/*
 * Xwebhook API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MessageAttemptTriggerType The reason an attempt was made: - Scheduled = 0 - Manual = 1
type MessageAttemptTriggerType int32

// List of MessageAttemptTriggerType
const (
	MESSAGEATTEMPTTRIGGERTYPE_Scheduled MessageAttemptTriggerType = 0
	MESSAGEATTEMPTTRIGGERTYPE_Manual MessageAttemptTriggerType = 1
)

var allowedMessageAttemptTriggerTypeEnumValues = []MessageAttemptTriggerType{
	0,
	1,
}

func (v *MessageAttemptTriggerType) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageAttemptTriggerType(value)
	for _, existing := range allowedMessageAttemptTriggerTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageAttemptTriggerType", value)
}

// NewMessageAttemptTriggerTypeFromValue returns a pointer to a valid MessageAttemptTriggerType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageAttemptTriggerTypeFromValue(v int32) (*MessageAttemptTriggerType, error) {
	ev := MessageAttemptTriggerType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageAttemptTriggerType: valid values are %v", v, allowedMessageAttemptTriggerTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageAttemptTriggerType) IsValid() bool {
	for _, existing := range allowedMessageAttemptTriggerTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageAttemptTriggerType value
func (v MessageAttemptTriggerType) Ptr() *MessageAttemptTriggerType {
	return &v
}

type NullableMessageAttemptTriggerType struct {
	value *MessageAttemptTriggerType
	isSet bool
}

func (v NullableMessageAttemptTriggerType) Get() *MessageAttemptTriggerType {
	return v.value
}

func (v *NullableMessageAttemptTriggerType) Set(val *MessageAttemptTriggerType) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageAttemptTriggerType) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageAttemptTriggerType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageAttemptTriggerType(val *MessageAttemptTriggerType) *NullableMessageAttemptTriggerType {
	return &NullableMessageAttemptTriggerType{value: val, isSet: true}
}

func (v NullableMessageAttemptTriggerType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageAttemptTriggerType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

