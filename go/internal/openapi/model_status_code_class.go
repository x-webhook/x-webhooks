/*
 * Xwebhook API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StatusCodeClass The different classes of HTTP status codes: - CodeNone = 0 - Code1xx = 100 - Code2xx = 200 - Code3xx = 300 - Code4xx = 400 - Code5xx = 500
type StatusCodeClass int32

// List of StatusCodeClass
const (
	STATUSCODECLASS_CodeNone StatusCodeClass = 0
	STATUSCODECLASS_Code1xx StatusCodeClass = 100
	STATUSCODECLASS_Code2xx StatusCodeClass = 200
	STATUSCODECLASS_Code3xx StatusCodeClass = 300
	STATUSCODECLASS_Code4xx StatusCodeClass = 400
	STATUSCODECLASS_Code5xx StatusCodeClass = 500
)

var allowedStatusCodeClassEnumValues = []StatusCodeClass{
	0,
	100,
	200,
	300,
	400,
	500,
}

func (v *StatusCodeClass) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StatusCodeClass(value)
	for _, existing := range allowedStatusCodeClassEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StatusCodeClass", value)
}

// NewStatusCodeClassFromValue returns a pointer to a valid StatusCodeClass
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusCodeClassFromValue(v int32) (*StatusCodeClass, error) {
	ev := StatusCodeClass(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StatusCodeClass: valid values are %v", v, allowedStatusCodeClassEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusCodeClass) IsValid() bool {
	for _, existing := range allowedStatusCodeClassEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StatusCodeClass value
func (v StatusCodeClass) Ptr() *StatusCodeClass {
	return &v
}

type NullableStatusCodeClass struct {
	value *StatusCodeClass
	isSet bool
}

func (v NullableStatusCodeClass) Get() *StatusCodeClass {
	return v.value
}

func (v *NullableStatusCodeClass) Set(val *StatusCodeClass) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusCodeClass) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusCodeClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusCodeClass(val *StatusCodeClass) *NullableStatusCodeClass {
	return &NullableStatusCodeClass{value: val, isSet: true}
}

func (v NullableStatusCodeClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusCodeClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

