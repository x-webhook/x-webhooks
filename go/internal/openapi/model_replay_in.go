/*
 * Xwebhook API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// ReplayIn struct for ReplayIn
type ReplayIn struct {
	Since time.Time `json:"since"`
	Until NullableTime `json:"until,omitempty"`
}

// NewReplayIn instantiates a new ReplayIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplayIn(since time.Time) *ReplayIn {
	this := ReplayIn{}
	this.Since = since
	return &this
}

// NewReplayInWithDefaults instantiates a new ReplayIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplayInWithDefaults() *ReplayIn {
	this := ReplayIn{}
	return &this
}

// GetSince returns the Since field value
func (o *ReplayIn) GetSince() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Since
}

// GetSinceOk returns a tuple with the Since field value
// and a boolean to check if the value has been set.
func (o *ReplayIn) GetSinceOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Since, true
}

// SetSince sets field value
func (o *ReplayIn) SetSince(v time.Time) {
	o.Since = v
}

// GetUntil returns the Until field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplayIn) GetUntil() time.Time {
	if o == nil || o.Until.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.Until.Get()
}

// GetUntilOk returns a tuple with the Until field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplayIn) GetUntilOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Until.Get(), o.Until.IsSet()
}

// HasUntil returns a boolean if a field has been set.
func (o *ReplayIn) HasUntil() bool {
	if o != nil && o.Until.IsSet() {
		return true
	}

	return false
}

// SetUntil gets a reference to the given NullableTime and assigns it to the Until field.
func (o *ReplayIn) SetUntil(v time.Time) {
	o.Until.Set(&v)
}
// SetUntilNil sets the value for Until to be an explicit nil
func (o *ReplayIn) SetUntilNil() {
	o.Until.Set(nil)
}

// UnsetUntil ensures that no value is present for Until, not even an explicit nil
func (o *ReplayIn) UnsetUntil() {
	o.Until.Unset()
}

func (o ReplayIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["since"] = o.Since
	}
	if o.Until.IsSet() {
		toSerialize["until"] = o.Until.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableReplayIn struct {
	value *ReplayIn
	isSet bool
}

func (v NullableReplayIn) Get() *ReplayIn {
	return v.value
}

func (v *NullableReplayIn) Set(val *ReplayIn) {
	v.value = val
	v.isSet = true
}

func (v NullableReplayIn) IsSet() bool {
	return v.isSet
}

func (v *NullableReplayIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplayIn(val *ReplayIn) *NullableReplayIn {
	return &NullableReplayIn{value: val, isSet: true}
}

func (v NullableReplayIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplayIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


