/*
 * Xwebhook API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Oauth2GrantTypeIn the model 'Oauth2GrantTypeIn'
type Oauth2GrantTypeIn string

// List of Oauth2GrantTypeIn
const (
	OAUTH2GRANTTYPEIN_CLIENT_CREDENTIALS Oauth2GrantTypeIn = "clientCredentials"
	OAUTH2GRANTTYPEIN_REFRESH_TOKEN Oauth2GrantTypeIn = "refreshToken"
)

var allowedOauth2GrantTypeInEnumValues = []Oauth2GrantTypeIn{
	"clientCredentials",
	"refreshToken",
}

func (v *Oauth2GrantTypeIn) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Oauth2GrantTypeIn(value)
	for _, existing := range allowedOauth2GrantTypeInEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Oauth2GrantTypeIn", value)
}

// NewOauth2GrantTypeInFromValue returns a pointer to a valid Oauth2GrantTypeIn
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOauth2GrantTypeInFromValue(v string) (*Oauth2GrantTypeIn, error) {
	ev := Oauth2GrantTypeIn(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Oauth2GrantTypeIn: valid values are %v", v, allowedOauth2GrantTypeInEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Oauth2GrantTypeIn) IsValid() bool {
	for _, existing := range allowedOauth2GrantTypeInEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Oauth2GrantTypeIn value
func (v Oauth2GrantTypeIn) Ptr() *Oauth2GrantTypeIn {
	return &v
}

type NullableOauth2GrantTypeIn struct {
	value *Oauth2GrantTypeIn
	isSet bool
}

func (v NullableOauth2GrantTypeIn) Get() *Oauth2GrantTypeIn {
	return v.value
}

func (v *NullableOauth2GrantTypeIn) Set(val *Oauth2GrantTypeIn) {
	v.value = val
	v.isSet = true
}

func (v NullableOauth2GrantTypeIn) IsSet() bool {
	return v.isSet
}

func (v *NullableOauth2GrantTypeIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOauth2GrantTypeIn(val *Oauth2GrantTypeIn) *NullableOauth2GrantTypeIn {
	return &NullableOauth2GrantTypeIn{value: val, isSet: true}
}

func (v NullableOauth2GrantTypeIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOauth2GrantTypeIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

