/*
 * Xwebhook API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// EventTypeFromOpenApi struct for EventTypeFromOpenApi
type EventTypeFromOpenApi struct {
	Description string `json:"description"`
	// The event type's name
	Name string `json:"name"`
	Schemas map[string]map[string]interface{} `json:"schemas,omitempty"`
}

// NewEventTypeFromOpenApi instantiates a new EventTypeFromOpenApi object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTypeFromOpenApi(description string, name string) *EventTypeFromOpenApi {
	this := EventTypeFromOpenApi{}
	this.Description = description
	this.Name = name
	return &this
}

// NewEventTypeFromOpenApiWithDefaults instantiates a new EventTypeFromOpenApi object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTypeFromOpenApiWithDefaults() *EventTypeFromOpenApi {
	this := EventTypeFromOpenApi{}
	return &this
}

// GetDescription returns the Description field value
func (o *EventTypeFromOpenApi) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EventTypeFromOpenApi) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EventTypeFromOpenApi) SetDescription(v string) {
	o.Description = v
}

// GetName returns the Name field value
func (o *EventTypeFromOpenApi) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventTypeFromOpenApi) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventTypeFromOpenApi) SetName(v string) {
	o.Name = v
}

// GetSchemas returns the Schemas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EventTypeFromOpenApi) GetSchemas() map[string]map[string]interface{} {
	if o == nil  {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EventTypeFromOpenApi) GetSchemasOk() (*map[string]map[string]interface{}, bool) {
	if o == nil || o.Schemas == nil {
		return nil, false
	}
	return &o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *EventTypeFromOpenApi) HasSchemas() bool {
	if o != nil && o.Schemas != nil {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given map[string]map[string]interface{} and assigns it to the Schemas field.
func (o *EventTypeFromOpenApi) SetSchemas(v map[string]map[string]interface{}) {
	o.Schemas = v
}

func (o EventTypeFromOpenApi) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Schemas != nil {
		toSerialize["schemas"] = o.Schemas
	}
	return json.Marshal(toSerialize)
}

type NullableEventTypeFromOpenApi struct {
	value *EventTypeFromOpenApi
	isSet bool
}

func (v NullableEventTypeFromOpenApi) Get() *EventTypeFromOpenApi {
	return v.value
}

func (v *NullableEventTypeFromOpenApi) Set(val *EventTypeFromOpenApi) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTypeFromOpenApi) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTypeFromOpenApi) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTypeFromOpenApi(val *EventTypeFromOpenApi) *NullableEventTypeFromOpenApi {
	return &NullableEventTypeFromOpenApi{value: val, isSet: true}
}

func (v NullableEventTypeFromOpenApi) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTypeFromOpenApi) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


