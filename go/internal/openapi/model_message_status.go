/*
 * Xwebhook API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MessageStatus The sending status of the message: - Success = 0 - Pending = 1 - Fail = 2 - Sending = 3
type MessageStatus int32

// List of MessageStatus
const (
	MESSAGESTATUS_Success MessageStatus = 0
	MESSAGESTATUS_Pending MessageStatus = 1
	MESSAGESTATUS_Fail MessageStatus = 2
	MESSAGESTATUS_Sending MessageStatus = 3
)

var allowedMessageStatusEnumValues = []MessageStatus{
	0,
	1,
	2,
	3,
}

func (v *MessageStatus) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MessageStatus(value)
	for _, existing := range allowedMessageStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MessageStatus", value)
}

// NewMessageStatusFromValue returns a pointer to a valid MessageStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMessageStatusFromValue(v int32) (*MessageStatus, error) {
	ev := MessageStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MessageStatus: valid values are %v", v, allowedMessageStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MessageStatus) IsValid() bool {
	for _, existing := range allowedMessageStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MessageStatus value
func (v MessageStatus) Ptr() *MessageStatus {
	return &v
}

type NullableMessageStatus struct {
	value *MessageStatus
	isSet bool
}

func (v NullableMessageStatus) Get() *MessageStatus {
	return v.value
}

func (v *NullableMessageStatus) Set(val *MessageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageStatus(val *MessageStatus) *NullableMessageStatus {
	return &NullableMessageStatus{value: val, isSet: true}
}

func (v NullableMessageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

