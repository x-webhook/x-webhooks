/*
 * Xwebhook API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.1.1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApplicationTokenExpireIn struct for ApplicationTokenExpireIn
type ApplicationTokenExpireIn struct {
	// How many seconds until the old key is expired.
	Expiry NullableInt64 `json:"expiry,omitempty"`
}

// NewApplicationTokenExpireIn instantiates a new ApplicationTokenExpireIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationTokenExpireIn() *ApplicationTokenExpireIn {
	this := ApplicationTokenExpireIn{}
	return &this
}

// NewApplicationTokenExpireInWithDefaults instantiates a new ApplicationTokenExpireIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationTokenExpireInWithDefaults() *ApplicationTokenExpireIn {
	this := ApplicationTokenExpireIn{}
	return &this
}

// GetExpiry returns the Expiry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationTokenExpireIn) GetExpiry() int64 {
	if o == nil || o.Expiry.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Expiry.Get()
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationTokenExpireIn) GetExpiryOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Expiry.Get(), o.Expiry.IsSet()
}

// HasExpiry returns a boolean if a field has been set.
func (o *ApplicationTokenExpireIn) HasExpiry() bool {
	if o != nil && o.Expiry.IsSet() {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given NullableInt64 and assigns it to the Expiry field.
func (o *ApplicationTokenExpireIn) SetExpiry(v int64) {
	o.Expiry.Set(&v)
}
// SetExpiryNil sets the value for Expiry to be an explicit nil
func (o *ApplicationTokenExpireIn) SetExpiryNil() {
	o.Expiry.Set(nil)
}

// UnsetExpiry ensures that no value is present for Expiry, not even an explicit nil
func (o *ApplicationTokenExpireIn) UnsetExpiry() {
	o.Expiry.Unset()
}

func (o ApplicationTokenExpireIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Expiry.IsSet() {
		toSerialize["expiry"] = o.Expiry.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationTokenExpireIn struct {
	value *ApplicationTokenExpireIn
	isSet bool
}

func (v NullableApplicationTokenExpireIn) Get() *ApplicationTokenExpireIn {
	return v.value
}

func (v *NullableApplicationTokenExpireIn) Set(val *ApplicationTokenExpireIn) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationTokenExpireIn) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationTokenExpireIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationTokenExpireIn(val *ApplicationTokenExpireIn) *NullableApplicationTokenExpireIn {
	return &NullableApplicationTokenExpireIn{value: val, isSet: true}
}

func (v NullableApplicationTokenExpireIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationTokenExpireIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


