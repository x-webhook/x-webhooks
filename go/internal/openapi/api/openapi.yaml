openapi: 3.0.2
info:
  title: Xwebhook API
  version: 1.1.1
  x-logo:
    altText: Xwebhook Logo
    url: https://webhook.openweb3.io/static/img/brand-padded.svg
servers:
- description: The Xwebhook EU region
  url: https://api.webhook.openweb3.io/
- description: The Xwebhook US region
  url: https://api.webhook.openweb3.io/
tags:
- description: Consumer Applications are where messages are sent to. In most cases
    you would want to have one application for each of your users.
  name: Application
- description: Messages are the webhook events being sent.
  name: Message
- description: Attempts to deliver `Message`s to `Endpoint`s.
  name: Message Attempt
- description: Endpoints are the URLs messages will be sent to. Each application can
    have up to 50 endpoints and each message sent to that application will be sent
    to all of them (unless they are not subscribed to the sent event type).
  name: Endpoint
- description: Integrations are services your users connect an application to. An
    integration can manage the application and its endpoints.
  name: Integration
- description: Event types are identifiers denoting the type of message being sent.
    Event types are primarily used to decide which events are sent to which endpoint.
  name: Event Type
- description: Easily give your users access to our pre-built management UI.
  name: Authentication
- description: Health checks for the API.
  name: Health
- description: The webhooks the Xwebhook service sends to notify you of events.
  name: Webhooks
- description: The background tasks that have been executed for your environment.
  name: Background Tasks
- description: Generate statistics about your Xwebhook utilization
  name: Statistics
paths:
  /api/v1/app:
    get:
      description: List of all the organization's applications.
      operationId: v1.application.list
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: The sorting order of the returned items
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Ordering'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_ApplicationOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Applications
      tags:
      - Application
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseApplicationOut = await xwebhook.application.list();
      - label: TypeScript
        lang: JavaScript
        source: const listResponseApplicationOut = await xwebhook.application.list();
      - label: Python
        lang: Python
        source: list_response_application_out = xwebhook.application.list(None)
      - label: Python (Async)
        lang: Python
        source: list_response_application_out = await xwebhook.application.list(None)
      - label: Go
        lang: Go
        source: listResponseApplicationOut, err := xwebhookClient.Application.List(ctx,
          nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseApplicationOut = xwebhook.application.list()
      - label: Java
        lang: Java
        source: ListResponseApplicationOut listResponseApplicationOut = xwebhook.getApplication().list()
      - label: Ruby
        lang: Ruby
        source: list_response_application_out = xwebhook.application.list()
      - label: Rust
        lang: Rust
        source: let list_response_application_out = xwebhook.application().list(None).await?;
      - label: C#
        lang: C#
        source: var listResponseApplicationOut = await xwebhook.Application.ListAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook application list '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    post:
      description: Create a new application.
      operationId: v1.application.create
      parameters:
      - description: Get an existing application, or create a new one if doesn't exist.
          It's two separate functions in the libs.
        explode: true
        in: query
        name: get_if_exists
        required: false
        schema:
          default: false
          description: Get an existing application, or create a new one if doesn't
            exist. It's two separate functions in the libs.
          type: boolean
        style: form
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationOut'
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Create Application
      tags:
      - Application
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const applicationOut = await xwebhook.application.create({
              name: "My first application",
              rateLimit: null,
              uid: "unique-app-identifier"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const applicationOut = await xwebhook.application.create({
              name: "My first application",
              rateLimit: null,
              uid: "unique-app-identifier"
          });
      - label: Python
        lang: Python
        source: |-
          application_out = xwebhook.application.create(ApplicationIn(
              name="My first application",
              rate_limit=None,
              uid="unique-app-identifier"
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          application_out = await xwebhook.application.create(ApplicationIn(
              name="My first application",
              rate_limit=None,
              uid="unique-app-identifier"
          ), None)
      - label: Go
        lang: Go
        source: |-
          applicationOut, err := xwebhookClient.Application.Create(ctx, &ApplicationIn{
              Name: "My first application",
              RateLimit: nil,
              Uid: "unique-app-identifier",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val applicationOut = xwebhook.application.create(ApplicationIn()
              .name("My first application")
              .rateLimit(null)
              .uid("unique-app-identifier")
          )
      - label: Java
        lang: Java
        source: |-
          ApplicationOut applicationOut = xwebhook.getApplication().create(new ApplicationIn()
              .name("My first application")
              .rateLimit(null)
              .uid("unique-app-identifier")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          application_out = xwebhook.application.create(Xwebhook::ApplicationIn.new({
              "name": "My first application",
              "rate_limit": nil,
              "uid": "unique-app-identifier"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let application_out = xwebhook.application().create(ApplicationIn {
              name: "My first application".to_string(),
              rate_limit: None,
              uid: Some("unique-app-identifier".to_string()),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var applicationOut = await xwebhook.Application.CreateAsync(new ApplicationIn{
              name: "My first application",
              rateLimit: null,
              uid: "unique-app-identifier"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook application create '{
              "name": "My first application",
              "rateLimit": null,
              "uid": "unique-app-identifier"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "name": "My first application",
                  "rateLimit": null,
                  "uid": "unique-app-identifier"
              }'
  /api/v1/app/stats/usage:
    get:
      description: Get basic statistics for all applications.
      operationId: get_app_usage_stats_api_v1_app_stats_usage__get
      parameters:
      - description: Filter the range to data after this date
        explode: true
        in: query
        name: since
        required: true
        schema:
          description: Filter the range to data after this date
          format: date-time
          type: string
        style: form
      - description: Filter the range to data before this date
        explode: true
        in: query
        name: until
        required: true
        schema:
          description: Filter the range to data before this date
          format: date-time
          type: string
        style: form
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          default: 50
          description: Limit the number of returned items
          format: int
          maximum: 250
          nullable: true
          type: integer
        style: form
      - description: The iterator to use (depends on the chosen ordering)
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator to use (depends on the chosen ordering)
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_ApplicationStats_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get App Usage Stats
      tags:
      - Application
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseApplicationStats = await xwebhook.app.stats();
      - label: TypeScript
        lang: JavaScript
        source: const listResponseApplicationStats = await xwebhook.app.stats();
      - label: Python
        lang: Python
        source: list_response_application_stats = xwebhook.app.stats()
      - label: Python (Async)
        lang: Python
        source: list_response_application_stats = await xwebhook.app.stats()
      - label: Go
        lang: Go
        source: listResponseApplicationStats, err := xwebhookClient.App.Stats(ctx)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseApplicationStats = xwebhook.app.stats()
      - label: Java
        lang: Java
        source: ListResponseApplicationStats listResponseApplicationStats = xwebhook.getApp().stats()
      - label: Ruby
        lang: Ruby
        source: list_response_application_stats = xwebhook.app.stats()
      - label: Rust
        lang: Rust
        source: let list_response_application_stats = xwebhook.app().stats().await?;
      - label: C#
        lang: C#
        source: var listResponseApplicationStats = await xwebhook.App.StatsAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook app stats '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/stats/usage' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}:
    delete:
      description: Delete an application.
      operationId: v1.application.delete
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Delete Application
      tags:
      - Application
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.application.delete("app_id");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.application.delete("app_id");
      - label: Python
        lang: Python
        source: xwebhook.application.delete("app_id")
      - label: Python (Async)
        lang: Python
        source: await xwebhook.application.delete("app_id")
      - label: Go
        lang: Go
        source: err := xwebhookClient.Application.Delete(ctx, "app_id")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.application.delete("app_id")
      - label: Java
        lang: Java
        source: xwebhook.getApplication().delete("app_id")
      - label: Ruby
        lang: Ruby
        source: xwebhook.application.delete("app_id")
      - label: Rust
        lang: Rust
        source: xwebhook.application().delete("app_id").await?;
      - label: C#
        lang: C#
        source: await xwebhook.Application.DeleteAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook application delete "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'DELETE' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    get:
      description: Get an application.
      operationId: v1.application.get
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Application
      tags:
      - Application
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const applicationOut = await xwebhook.application.get("app_id");
      - label: TypeScript
        lang: JavaScript
        source: const applicationOut = await xwebhook.application.get("app_id");
      - label: Python
        lang: Python
        source: application_out = xwebhook.application.get("app_id")
      - label: Python (Async)
        lang: Python
        source: application_out = await xwebhook.application.get("app_id")
      - label: Go
        lang: Go
        source: applicationOut, err := xwebhookClient.Application.Get(ctx, "app_id")
      - label: Kotlin
        lang: Kotlin
        source: val applicationOut = xwebhook.application.get("app_id")
      - label: Java
        lang: Java
        source: ApplicationOut applicationOut = xwebhook.getApplication().get("app_id")
      - label: Ruby
        lang: Ruby
        source: application_out = xwebhook.application.get("app_id")
      - label: Rust
        lang: Rust
        source: let application_out = xwebhook.application().get("app_id").await?;
      - label: C#
        lang: C#
        source: var applicationOut = await xwebhook.Application.GetAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook application get "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    patch:
      description: Partially update an application.
      operationId: v1.application.patch
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationPatch'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Patch Application
      tags:
      - Application
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const applicationOut = await xwebhook.application.patch("app_id", {
              rateLimit: null,
              uid: "unique-app-identifier"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const applicationOut = await xwebhook.application.patch("app_id", {
              rateLimit: null,
              uid: "unique-app-identifier"
          });
      - label: Python
        lang: Python
        source: |-
          application_out = xwebhook.application.patch("app_id", ApplicationPatch(
              rate_limit=None,
              uid="unique-app-identifier"
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          application_out = await xwebhook.application.patch("app_id", ApplicationPatch(
              rate_limit=None,
              uid="unique-app-identifier"
          ))
      - label: Go
        lang: Go
        source: |-
          applicationOut, err := xwebhookClient.Application.Patch(ctx, "app_id", &ApplicationPatch{
              RateLimit: nil,
              Uid: "unique-app-identifier",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val applicationOut = xwebhook.application.patch("app_id", ApplicationPatch()
              .rateLimit(null)
              .uid("unique-app-identifier")
          )
      - label: Java
        lang: Java
        source: |-
          ApplicationOut applicationOut = xwebhook.getApplication().patch("app_id", new ApplicationPatch()
              .rateLimit(null)
              .uid("unique-app-identifier")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          application_out = xwebhook.application.patch("app_id", xwebhook::ApplicationPatch.new({
              "rate_limit": nil,
              "uid": "unique-app-identifier"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let application_out = xwebhook.application().patch("app_id", ApplicationPatch {
              rate_limit: None,
              uid: Some("unique-app-identifier".to_string()),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var applicationOut = await xwebhook.Application.PatchAsync("app_id", new ApplicationPatch{
              rateLimit: null,
              uid: "unique-app-identifier"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook application patch "app_id" '{
              "rateLimit": null,
              "uid": "unique-app-identifier"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PATCH' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "rateLimit": null,
                  "uid": "unique-app-identifier"
              }'
    put:
      description: Update an application.
      operationId: v1.application.update
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationOut'
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Application
      tags:
      - Application
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const applicationOut = await xwebhook.application.update("app_id", {
              name: "My first application",
              rateLimit: null,
              uid: "unique-app-identifier"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const applicationOut = await xwebhook.application.update("app_id", {
              name: "My first application",
              rateLimit: null,
              uid: "unique-app-identifier"
          });
      - label: Python
        lang: Python
        source: |-
          application_out = xwebhook.application.update("app_id", ApplicationIn(
              name="My first application",
              rate_limit=None,
              uid="unique-app-identifier"
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          application_out = await xwebhook.application.update("app_id", ApplicationIn(
              name="My first application",
              rate_limit=None,
              uid="unique-app-identifier"
          ))
      - label: Go
        lang: Go
        source: |-
          applicationOut, err := xwebhookClient.Application.Update(ctx, "app_id", &ApplicationIn{
              Name: "My first application",
              RateLimit: nil,
              Uid: "unique-app-identifier",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val applicationOut = xwebhook.application.update("app_id", ApplicationIn()
              .name("My first application")
              .rateLimit(null)
              .uid("unique-app-identifier")
          )
      - label: Java
        lang: Java
        source: |-
          ApplicationOut applicationOut = xwebhook.getApplication().update("app_id", new ApplicationIn()
              .name("My first application")
              .rateLimit(null)
              .uid("unique-app-identifier")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          application_out = xwebhook.application.update("app_id", Xwebhook::ApplicationIn.new({
              "name": "My first application",
              "rate_limit": nil,
              "uid": "unique-app-identifier"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let application_out = xwebhook.application().update("app_id", ApplicationIn {
              name: "My first application".to_string(),
              rate_limit: None,
              uid: Some("unique-app-identifier".to_string()),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var applicationOut = await xwebhook.Application.UpdateAsync("app_id", new ApplicationIn{
              name: "My first application",
              rateLimit: null,
              uid: "unique-app-identifier"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook application update "app_id" '{
              "name": "My first application",
              "rateLimit": null,
              "uid": "unique-app-identifier"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "name": "My first application",
                  "rateLimit": null,
                  "uid": "unique-app-identifier"
              }'
  /api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}:
    get:
      description: |
        List attempts by endpoint id

        Note that by default this endpoint is limited to retrieving 90 days' worth of data
        relative to now or, if an iterator is provided, 90 days before/after the time indicated
        by the iterator ID. If you require data beyond those time ranges, you will need to explicitly
        set the `before` or `after` parameter as appropriate.
      operationId: v1.message-attempt.list-by-endpoint
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: Filter response based on the delivery status
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/MessageStatus'
        style: form
      - description: Filter response based on the HTTP status code
        explode: true
        in: query
        name: status_code_class
        required: false
        schema:
          $ref: '#/components/schemas/StatusCodeClass'
        style: form
      - description: Filter response based on the channel
        explode: true
        in: query
        name: channel
        required: false
        schema:
          description: Filter response based on the channel
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the tag
        explode: true
        in: query
        name: tag
        required: false
        schema:
          description: Filter response based on the tag
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Only include items created before a certain date
        explode: true
        in: query
        name: before
        required: false
        schema:
          description: Only include items created before a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Only include items created after a certain date
        explode: true
        in: query
        name: after
        required: false
        schema:
          description: Only include items created after a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: When `true` attempt content is included in the response
        explode: true
        in: query
        name: with_content
        required: false
        schema:
          default: true
          description: When `true` attempt content is included in the response
          type: boolean
        style: form
      - description: When `true`, the message information is included in the response
        explode: true
        in: query
        name: with_msg
        required: false
        schema:
          default: false
          description: When `true`, the message information is included in the response
          type: boolean
        style: form
      - description: Filter response based on the event type
        explode: true
        in: query
        name: event_types
        required: false
        schema:
          description: Filter response based on the event type
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_MessageAttemptOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Attempts By Endpoint
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseMessageAttemptOut = await xwebhook.messageAttempt.listByEndpoint("app_id",
          "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: const listResponseMessageAttemptOut = await xwebhook.messageAttempt.listByEndpoint("app_id",
          "endpoint_id");
      - label: Python
        lang: Python
        source: list_response_message_attempt_out = xwebhook.message_attempt.list_by_endpoint("app_id",
          "endpoint_id", None)
      - label: Python (Async)
        lang: Python
        source: list_response_message_attempt_out = await xwebhook.message_attempt.list_by_endpoint("app_id",
          "endpoint_id", None)
      - label: Go
        lang: Go
        source: listResponseMessageAttemptOut, err := xwebhookClient.MessageAttempt.ListByEndpoint(ctx,
          "app_id", "endpoint_id", nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseMessageAttemptOut = xwebhook.messageAttempt.listByEndpoint("app_id",
          "endpoint_id")
      - label: Java
        lang: Java
        source: ListResponseMessageAttemptOut listResponseMessageAttemptOut = xwebhook.getMessageAttempt().listByEndpoint("app_id",
          "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: list_response_message_attempt_out = xwebhook.message_attempt.list_by_endpoint("app_id",
          "endpoint_id")
      - label: Rust
        lang: Rust
        source: let list_response_message_attempt_out = xwebhook.message_attempt().list_by_endpoint("app_id",
          "endpoint_id", None).await?;
      - label: C#
        lang: C#
        source: var listResponseMessageAttemptOut = await xwebhook.MessageAttempt.ListByEndpointAsync("app_id",
          "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt list-by-endpoint "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/attempt/msg/{msg_id}:
    get:
      description: |
        List attempts by message id

        Note that by default this endpoint is limited to retrieving 90 days' worth of data
        relative to now or, if an iterator is provided, 90 days before/after the time indicated
        by the iterator ID. If you require data beyond those time ranges, you will need to explicitly
        set the `before` or `after` parameter as appropriate.
      operationId: v1.message-attempt.list-by-msg
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: Filter response based on the delivery status
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/MessageStatus'
        style: form
      - description: Filter response based on the HTTP status code
        explode: true
        in: query
        name: status_code_class
        required: false
        schema:
          $ref: '#/components/schemas/StatusCodeClass'
        style: form
      - description: Filter response based on the channel
        explode: true
        in: query
        name: channel
        required: false
        schema:
          description: Filter response based on the channel
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the tag
        explode: true
        in: query
        name: tag
        required: false
        schema:
          description: Filter response based on the tag
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter the attempts based on the attempted endpoint
        explode: true
        in: query
        name: endpoint_id
        required: false
        schema:
          description: Filter the attempts based on the attempted endpoint
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Only include items created before a certain date
        explode: true
        in: query
        name: before
        required: false
        schema:
          description: Only include items created before a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Only include items created after a certain date
        explode: true
        in: query
        name: after
        required: false
        schema:
          description: Only include items created after a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: When `true` attempt content is included in the response
        explode: true
        in: query
        name: with_content
        required: false
        schema:
          default: true
          description: When `true` attempt content is included in the response
          type: boolean
        style: form
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: Filter response based on the event type
        explode: true
        in: query
        name: event_types
        required: false
        schema:
          description: Filter response based on the event type
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_MessageAttemptOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Attempts By Msg
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseMessageAttemptOut = await xwebhook.messageAttempt.listByMsg("app_id",
          "msg_id");
      - label: TypeScript
        lang: JavaScript
        source: const listResponseMessageAttemptOut = await xwebhook.messageAttempt.listByMsg("app_id",
          "msg_id");
      - label: Python
        lang: Python
        source: list_response_message_attempt_out = xwebhook.message_attempt.list_by_msg("app_id",
          "msg_id", None)
      - label: Python (Async)
        lang: Python
        source: list_response_message_attempt_out = await xwebhook.message_attempt.list_by_msg("app_id",
          "msg_id", None)
      - label: Go
        lang: Go
        source: listResponseMessageAttemptOut, err := xwebhookClient.MessageAttempt.ListByMsg(ctx,
          "app_id", "msg_id", nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseMessageAttemptOut = xwebhook.messageAttempt.listByMsg("app_id",
          "msg_id")
      - label: Java
        lang: Java
        source: ListResponseMessageAttemptOut listResponseMessageAttemptOut = xwebhook.getMessageAttempt().listByMsg("app_id",
          "msg_id")
      - label: Ruby
        lang: Ruby
        source: list_response_message_attempt_out = xwebhook.message_attempt.list_by_msg("app_id",
          "msg_id")
      - label: Rust
        lang: Rust
        source: let list_response_message_attempt_out = xwebhook.message_attempt().list_by_msg("app_id",
          "msg_id", None).await?;
      - label: C#
        lang: C#
        source: var listResponseMessageAttemptOut = await xwebhook.MessageAttempt.ListByMsgAsync("app_id",
          "msg_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt list-by-msg "app_id" "msg_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/attempt/msg/{msg_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/endpoint:
    get:
      description: List the application's endpoints.
      operationId: v1.endpoint.list
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: The sorting order of the returned items
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Ordering'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_EndpointOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Endpoints
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseEndpointOut = await xwebhook.endpoint.list("app_id");
      - label: TypeScript
        lang: JavaScript
        source: const listResponseEndpointOut = await xwebhook.endpoint.list("app_id");
      - label: Python
        lang: Python
        source: list_response_endpoint_out = xwebhook.endpoint.list("app_id", None)
      - label: Python (Async)
        lang: Python
        source: list_response_endpoint_out = await xwebhook.endpoint.list("app_id",
          None)
      - label: Go
        lang: Go
        source: listResponseEndpointOut, err := xwebhookClient.Endpoint.List(ctx,
          "app_id", nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseEndpointOut = xwebhook.endpoint.list("app_id")
      - label: Java
        lang: Java
        source: ListResponseEndpointOut listResponseEndpointOut = xwebhook.getEndpoint().list("app_id")
      - label: Ruby
        lang: Ruby
        source: list_response_endpoint_out = xwebhook.endpoint.list("app_id")
      - label: Rust
        lang: Rust
        source: let list_response_endpoint_out = xwebhook.endpoint().list("app_id",
          None).await?;
      - label: C#
        lang: C#
        source: var listResponseEndpointOut = await xwebhook.Endpoint.ListAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook endpoint list "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    post:
      description: |-
        Create a new endpoint for the application.

        When `secret` is `null` the secret is automatically generated (recommended)
      operationId: v1.endpoint.create
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointIn'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Create Endpoint
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const endpointOut = await xwebhook.endpoint.create("app_id", {
              description: "An example endpoint name",
              rateLimit: null,
              uid: "unique-ep-identifier",
              url: "https://example.com/webhook/",
              version: 1,
              disabled: false,
              filterTypes: ["user.signup", "user.deleted"],
              channels: ["project_123", "group_2"],
              secret: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const endpointOut = await xwebhook.endpoint.create("app_id", {
              description: "An example endpoint name",
              rateLimit: null,
              uid: "unique-ep-identifier",
              url: "https://example.com/webhook/",
              version: 1,
              disabled: false,
              filterTypes: ["user.signup", "user.deleted"],
              channels: ["project_123", "group_2"],
              secret: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          });
      - label: Python
        lang: Python
        source: |-
          endpoint_out = xwebhook.endpoint.create("app_id", EndpointIn(
              description="An example endpoint name",
              rate_limit=None,
              uid="unique-ep-identifier",
              url="https://example.com/webhook/",
              version=1,
              disabled=False,
              filter_types=["user.signup", "user.deleted"],
              channels=["project_123", "group_2"],
              secret="whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          endpoint_out = await xwebhook.endpoint.create("app_id", EndpointIn(
              description="An example endpoint name",
              rate_limit=None,
              uid="unique-ep-identifier",
              url="https://example.com/webhook/",
              version=1,
              disabled=False,
              filter_types=["user.signup", "user.deleted"],
              channels=["project_123", "group_2"],
              secret="whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          ), None)
      - label: Go
        lang: Go
        source: |-
          endpointOut, err := xwebhookClient.Endpoint.Create(ctx, "app_id", &EndpointIn{
              Description: "An example endpoint name",
              RateLimit: nil,
              Uid: "unique-ep-identifier",
              Url: "https://example.com/webhook/",
              Version: 1,
              Disabled: false,
              FilterTypes: []string{"user.signup", "user.deleted"},
              Channels: []string{"project_123", "group_2"},
              Secret: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val endpointOut = xwebhook.endpoint.create("app_id", EndpointIn()
              .description("An example endpoint name")
              .rateLimit(null)
              .uid("unique-ep-identifier")
              .url("https://example.com/webhook/")
              .version(1)
              .disabled(false)
              .filterTypes(arrayOf("user.signup", "user.deleted"))
              .channels(arrayOf("project_123", "group_2"))
              .secret("whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD")
          )
      - label: Java
        lang: Java
        source: |-
          EndpointOut endpointOut = xwebhook.getEndpoint().create("app_id", new EndpointIn()
              .description("An example endpoint name")
              .rateLimit(null)
              .uid("unique-ep-identifier")
              .url("https://example.com/webhook/")
              .version(1)
              .disabled(false)
              .filterTypes(new String[]{"user.signup", "user.deleted"})
              .channels(new String[]{"project_123", "group_2"})
              .secret("whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          endpoint_out = xwebhook.endpoint.create("app_id", Xwebhook::EndpointIn.new({
              "description": "An example endpoint name",
              "rate_limit": nil,
              "uid": "unique-ep-identifier",
              "url": "https://example.com/webhook/",
              "version": 1,
              "disabled": false,
              "filter_types": ["user.signup", "user.deleted"],
              "channels": ["project_123", "group_2"],
              "secret": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let endpoint_out = xwebhook.endpoint().create("app_id", EndpointIn {
              description: Some("An example endpoint name".to_string()),
              rate_limit: None,
              uid: Some("unique-ep-identifier".to_string()),
              url: "https://example.com/webhook/".to_string(),
              version: Some(1),
              disabled: Some(false),
              filter_types: Some(vec!["user.signup".to_string(), "user.deleted".to_string()]),
              channels: Some(vec!["project_123".to_string(), "group_2".to_string()]),
              secret: Some("whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD".to_string()),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var endpointOut = await xwebhook.Endpoint.CreateAsync("app_id", new EndpointIn{
              description: "An example endpoint name",
              rateLimit: null,
              uid: "unique-ep-identifier",
              url: "https://example.com/webhook/",
              version: 1,
              disabled: false,
              filterTypes: new string[] {"user.signup", "user.deleted"},
              channels: new string[] {"project_123", "group_2"},
              secret: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint create "app_id" '{
              "description": "An example endpoint name",
              "rateLimit": null,
              "uid": "unique-ep-identifier",
              "url": "https://example.com/webhook/",
              "version": 1,
              "disabled": false,
              "filterTypes": ["user.signup", "user.deleted"],
              "channels": ["project_123", "group_2"],
              "secret": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "description": "An example endpoint name",
                  "rateLimit": null,
                  "uid": "unique-ep-identifier",
                  "url": "https://example.com/webhook/",
                  "version": 1,
                  "disabled": false,
                  "filterTypes": ["user.signup", "user.deleted"],
                  "channels": ["project_123", "group_2"],
                  "secret": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}:
    delete:
      description: Delete an endpoint.
      operationId: v1.endpoint.delete
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Delete Endpoint
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.endpoint.delete("app_id", "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.endpoint.delete("app_id", "endpoint_id");
      - label: Python
        lang: Python
        source: xwebhook.endpoint.delete("app_id", "endpoint_id")
      - label: Python (Async)
        lang: Python
        source: await xwebhook.endpoint.delete("app_id", "endpoint_id")
      - label: Go
        lang: Go
        source: err := xwebhookClient.Endpoint.Delete(ctx, "app_id", "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.endpoint.delete("app_id", "endpoint_id")
      - label: Java
        lang: Java
        source: xwebhook.getEndpoint().delete("app_id", "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: xwebhook.endpoint.delete("app_id", "endpoint_id")
      - label: Rust
        lang: Rust
        source: xwebhook.endpoint().delete("app_id", "endpoint_id").await?;
      - label: C#
        lang: C#
        source: await xwebhook.Endpoint.DeleteAsync("app_id", "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook endpoint delete "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'DELETE' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    get:
      description: Get an endpoint.
      operationId: v1.endpoint.get
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Endpoint
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const endpointOut = await xwebhook.endpoint.get("app_id", "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: const endpointOut = await xwebhook.endpoint.get("app_id", "endpoint_id");
      - label: Python
        lang: Python
        source: endpoint_out = xwebhook.endpoint.get("app_id", "endpoint_id")
      - label: Python (Async)
        lang: Python
        source: endpoint_out = await xwebhook.endpoint.get("app_id", "endpoint_id")
      - label: Go
        lang: Go
        source: endpointOut, err := xwebhookClient.Endpoint.Get(ctx, "app_id", "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: val endpointOut = xwebhook.endpoint.get("app_id", "endpoint_id")
      - label: Java
        lang: Java
        source: EndpointOut endpointOut = xwebhook.getEndpoint().get("app_id", "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: endpoint_out = xwebhook.endpoint.get("app_id", "endpoint_id")
      - label: Rust
        lang: Rust
        source: let endpoint_out = xwebhook.endpoint().get("app_id", "endpoint_id").await?;
      - label: C#
        lang: C#
        source: var endpointOut = await xwebhook.Endpoint.GetAsync("app_id", "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook endpoint get "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    patch:
      description: Partially update an endpoint.
      operationId: v1.endpoint.patch
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointPatch'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Patch Endpoint
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const endpointOut = await xwebhook.endpoint.patch("app_id", "endpoint_id", {
              rateLimit: null,
              uid: "unique-ep-identifier",
              version: 1,
              filterTypes: null,
              channels: null,
              secret: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const endpointOut = await xwebhook.endpoint.patch("app_id", "endpoint_id", {
              rateLimit: null,
              uid: "unique-ep-identifier",
              version: 1,
              filterTypes: null,
              channels: null,
              secret: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          });
      - label: Python
        lang: Python
        source: |-
          endpoint_out = xwebhook.endpoint.patch("app_id", "endpoint_id", EndpointPatch(
              rate_limit=None,
              uid="unique-ep-identifier",
              version=1,
              filter_types=None,
              channels=None,
              secret="whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          endpoint_out = await xwebhook.endpoint.patch("app_id", "endpoint_id", EndpointPatch(
              rate_limit=None,
              uid="unique-ep-identifier",
              version=1,
              filter_types=None,
              channels=None,
              secret="whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          ))
      - label: Go
        lang: Go
        source: |-
          endpointOut, err := xwebhookClient.Endpoint.Patch(ctx, "app_id", "endpoint_id", &EndpointPatch{
              RateLimit: nil,
              Uid: "unique-ep-identifier",
              Version: 1,
              FilterTypes: nil,
              Channels: nil,
              Secret: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val endpointOut = xwebhook.endpoint.patch("app_id", "endpoint_id", EndpointPatch()
              .rateLimit(null)
              .uid("unique-ep-identifier")
              .version(1)
              .filterTypes(null)
              .channels(null)
              .secret("whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD")
          )
      - label: Java
        lang: Java
        source: |-
          EndpointOut endpointOut = xwebhook.getEndpoint().patch("app_id", "endpoint_id", new EndpointPatch()
              .rateLimit(null)
              .uid("unique-ep-identifier")
              .version(1)
              .filterTypes(null)
              .channels(null)
              .secret("whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          endpoint_out = xwebhook.endpoint.patch("app_id", "endpoint_id", Xwebhook::EndpointPatch.new({
              "rate_limit": nil,
              "uid": "unique-ep-identifier",
              "version": 1,
              "filter_types": nil,
              "channels": nil,
              "secret": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let endpoint_out = xwebhook.endpoint().patch("app_id", "endpoint_id", EndpointPatch {
              rate_limit: None,
              uid: Some("unique-ep-identifier".to_string()),
              version: Some(1),
              filter_types: None,
              channels: None,
              secret: Some("whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD".to_string()),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var endpointOut = await xwebhook.Endpoint.PatchAsync("app_id", "endpoint_id", new EndpointPatch{
              rateLimit: null,
              uid: "unique-ep-identifier",
              version: 1,
              filterTypes: null,
              channels: null,
              secret: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint patch "app_id" "endpoint_id" '{
              "rateLimit": null,
              "uid": "unique-ep-identifier",
              "version": 1,
              "filterTypes": null,
              "channels": null,
              "secret": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PATCH' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "rateLimit": null,
                  "uid": "unique-ep-identifier",
                  "version": 1,
                  "filterTypes": null,
                  "channels": null,
                  "secret": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
              }'
    put:
      description: Update an endpoint.
      operationId: v1.endpoint.update
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointOut'
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Endpoint
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const endpointOut = await xwebhook.endpoint.update("app_id", "endpoint_id", {
              description: "An example endpoint name",
              rateLimit: null,
              uid: "unique-ep-identifier",
              url: "https://example.com/webhook/",
              version: 1,
              disabled: false,
              filterTypes: ["user.signup", "user.deleted"],
              channels: ["project_123", "group_2"]
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const endpointOut = await xwebhook.endpoint.update("app_id", "endpoint_id", {
              description: "An example endpoint name",
              rateLimit: null,
              uid: "unique-ep-identifier",
              url: "https://example.com/webhook/",
              version: 1,
              disabled: false,
              filterTypes: ["user.signup", "user.deleted"],
              channels: ["project_123", "group_2"]
          });
      - label: Python
        lang: Python
        source: |-
          endpoint_out = xwebhook.endpoint.update("app_id", "endpoint_id", EndpointUpdate(
              description="An example endpoint name",
              rate_limit=None,
              uid="unique-ep-identifier",
              url="https://example.com/webhook/",
              version=1,
              disabled=False,
              filter_types=["user.signup", "user.deleted"],
              channels=["project_123", "group_2"]
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          endpoint_out = await xwebhook.endpoint.update("app_id", "endpoint_id", EndpointUpdate(
              description="An example endpoint name",
              rate_limit=None,
              uid="unique-ep-identifier",
              url="https://example.com/webhook/",
              version=1,
              disabled=False,
              filter_types=["user.signup", "user.deleted"],
              channels=["project_123", "group_2"]
          ))
      - label: Go
        lang: Go
        source: |-
          endpointOut, err := xwebhookClient.Endpoint.Update(ctx, "app_id", "endpoint_id", &EndpointUpdate{
              Description: "An example endpoint name",
              RateLimit: nil,
              Uid: "unique-ep-identifier",
              Url: "https://example.com/webhook/",
              Version: 1,
              Disabled: false,
              FilterTypes: []string{"user.signup", "user.deleted"},
              Channels: []string{"project_123", "group_2"},
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val endpointOut = xwebhook.endpoint.update("app_id", "endpoint_id", EndpointUpdate()
              .description("An example endpoint name")
              .rateLimit(null)
              .uid("unique-ep-identifier")
              .url("https://example.com/webhook/")
              .version(1)
              .disabled(false)
              .filterTypes(arrayOf("user.signup", "user.deleted"))
              .channels(arrayOf("project_123", "group_2"))
          )
      - label: Java
        lang: Java
        source: |-
          EndpointOut endpointOut = xwebhook.getEndpoint().update("app_id", "endpoint_id", new EndpointUpdate()
              .description("An example endpoint name")
              .rateLimit(null)
              .uid("unique-ep-identifier")
              .url("https://example.com/webhook/")
              .version(1)
              .disabled(false)
              .filterTypes(new String[]{"user.signup", "user.deleted"})
              .channels(new String[]{"project_123", "group_2"})
          )
      - label: Ruby
        lang: Ruby
        source: |-
          endpoint_out = xwebhook.endpoint.update("app_id", "endpoint_id", Xwebhook::EndpointUpdate.new({
              "description": "An example endpoint name",
              "rate_limit": nil,
              "uid": "unique-ep-identifier",
              "url": "https://example.com/webhook/",
              "version": 1,
              "disabled": false,
              "filter_types": ["user.signup", "user.deleted"],
              "channels": ["project_123", "group_2"]
          }))
      - label: Rust
        lang: Rust
        source: |-
          let endpoint_out = xwebhook.endpoint().update("app_id", "endpoint_id", EndpointUpdate {
              description: Some("An example endpoint name".to_string()),
              rate_limit: None,
              uid: Some("unique-ep-identifier".to_string()),
              url: "https://example.com/webhook/".to_string(),
              version: Some(1),
              disabled: Some(false),
              filter_types: Some(vec!["user.signup".to_string(), "user.deleted".to_string()]),
              channels: Some(vec!["project_123".to_string(), "group_2".to_string()]),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var endpointOut = await xwebhook.Endpoint.UpdateAsync("app_id", "endpoint_id", new EndpointUpdate{
              description: "An example endpoint name",
              rateLimit: null,
              uid: "unique-ep-identifier",
              url: "https://example.com/webhook/",
              version: 1,
              disabled: false,
              filterTypes: new string[] {"user.signup", "user.deleted"},
              channels: new string[] {"project_123", "group_2"}
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint update "app_id" "endpoint_id" '{
              "description": "An example endpoint name",
              "rateLimit": null,
              "uid": "unique-ep-identifier",
              "url": "https://example.com/webhook/",
              "version": 1,
              "disabled": false,
              "filterTypes": ["user.signup", "user.deleted"],
              "channels": ["project_123", "group_2"]
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "description": "An example endpoint name",
                  "rateLimit": null,
                  "uid": "unique-ep-identifier",
                  "url": "https://example.com/webhook/",
                  "version": 1,
                  "disabled": false,
                  "filterTypes": ["user.signup", "user.deleted"],
                  "channels": ["project_123", "group_2"]
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/headers:
    get:
      description: Get the additional headers to be sent with the webhook
      operationId: v1.endpoint.get-headers
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointHeadersOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Endpoint Headers
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const endpointHeadersOut = await xwebhook.endpoint.getHeaders("app_id",
          "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: const endpointHeadersOut = await xwebhook.endpoint.getHeaders("app_id",
          "endpoint_id");
      - label: Python
        lang: Python
        source: endpoint_headers_out = xwebhook.endpoint.get_headers("app_id", "endpoint_id")
      - label: Python (Async)
        lang: Python
        source: endpoint_headers_out = await xwebhook.endpoint.get_headers("app_id",
          "endpoint_id")
      - label: Go
        lang: Go
        source: endpointHeadersOut, err := xwebhookClient.Endpoint.GetHeaders(ctx,
          "app_id", "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: val endpointHeadersOut = xwebhook.endpoint.getHeaders("app_id", "endpoint_id")
      - label: Java
        lang: Java
        source: EndpointHeadersOut endpointHeadersOut = xwebhook.getEndpoint().getHeaders("app_id",
          "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: endpoint_headers_out = xwebhook.endpoint.get_headers("app_id", "endpoint_id")
      - label: Rust
        lang: Rust
        source: let endpoint_headers_out = xwebhook.endpoint().get_headers("app_id",
          "endpoint_id").await?;
      - label: C#
        lang: C#
        source: var endpointHeadersOut = await xwebhook.Endpoint.GetHeadersAsync("app_id",
          "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook endpoint get-headers "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    patch:
      description: Partially set the additional headers to be sent with the webhook
      operationId: v1.endpoint.patch-headers
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointHeadersPatchIn'
        required: true
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Patch Endpoint Headers
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.patchHeaders("app_id", "endpoint_id", {
              headers: {"X-Example":"123","X-Foobar":"Bar"}
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.patchHeaders("app_id", "endpoint_id", {
              headers: {"X-Example":"123","X-Foobar":"Bar"}
          });
      - label: Python
        lang: Python
        source: |-
          xwebhook.endpoint.patch_headers("app_id", "endpoint_id", EndpointHeadersPatchIn(
              headers={"X-Example": "123", "X-Foobar": "Bar"}
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          await xwebhook.endpoint.patch_headers("app_id", "endpoint_id", EndpointHeadersPatchIn(
              headers={"X-Example": "123", "X-Foobar": "Bar"}
          ))
      - label: Go
        lang: Go
        source: |-
          err := xwebhookClient.Endpoint.PatchHeaders(ctx, "app_id", "endpoint_id", &EndpointHeadersPatchIn{
              Headers: map[string]interface{}{"X-Example": "123", "X-Foobar": "Bar"},
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          xwebhook.endpoint.patchHeaders("app_id", "endpoint_id", EndpointHeadersPatchIn()
              .headers(/* ... */)
          )
      - label: Java
        lang: Java
        source: |-
          xwebhook.getEndpoint().patchHeaders("app_id", "endpoint_id", new EndpointHeadersPatchIn()
              .headers(/* ... */)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          xwebhook.endpoint.patch_headers("app_id", "endpoint_id", Xwebhook::EndpointHeadersPatchIn.new({
              "headers": {"X-Example":"123","X-Foobar":"Bar"}
          }))
      - label: Rust
        lang: Rust
        source: |-
          xwebhook.endpoint().patch_headers("app_id", "endpoint_id", EndpointHeadersPatchIn {
              headers: json!({"X-Example":"123","X-Foobar":"Bar"}),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          await xwebhook.Endpoint.PatchHeadersAsync("app_id", "endpoint_id", new EndpointHeadersPatchIn{
              headers: /* ... */
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint patch-headers "app_id" "endpoint_id" '{
              "headers": {"X-Example":"123","X-Foobar":"Bar"}
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PATCH' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "headers": {"X-Example":"123","X-Foobar":"Bar"}
              }'
    put:
      description: Set the additional headers to be sent with the webhook
      operationId: v1.endpoint.update-headers
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointHeadersIn'
        required: true
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Endpoint Headers
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.updateHeaders("app_id", "endpoint_id", {
              headers: {"X-Example":"123","X-Foobar":"Bar"}
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.updateHeaders("app_id", "endpoint_id", {
              headers: {"X-Example":"123","X-Foobar":"Bar"}
          });
      - label: Python
        lang: Python
        source: |-
          xwebhook.endpoint.update_headers("app_id", "endpoint_id", EndpointHeadersIn(
              headers={"X-Example": "123", "X-Foobar": "Bar"}
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          await xwebhook.endpoint.update_headers("app_id", "endpoint_id", EndpointHeadersIn(
              headers={"X-Example": "123", "X-Foobar": "Bar"}
          ))
      - label: Go
        lang: Go
        source: |-
          err := xwebhookClient.Endpoint.UpdateHeaders(ctx, "app_id", "endpoint_id", &EndpointHeadersIn{
              Headers: map[string]interface{}{"X-Example": "123", "X-Foobar": "Bar"},
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          xwebhook.endpoint.updateHeaders("app_id", "endpoint_id", EndpointHeadersIn()
              .headers(/* ... */)
          )
      - label: Java
        lang: Java
        source: |-
          xwebhook.getEndpoint().updateHeaders("app_id", "endpoint_id", new EndpointHeadersIn()
              .headers(/* ... */)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          xwebhook.endpoint.update_headers("app_id", "endpoint_id", Xwebhook::EndpointHeadersIn.new({
              "headers": {"X-Example":"123","X-Foobar":"Bar"}
          }))
      - label: Rust
        lang: Rust
        source: |-
          xwebhook.endpoint().update_headers("app_id", "endpoint_id", EndpointHeadersIn {
              headers: json!({"X-Example":"123","X-Foobar":"Bar"}),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          await xwebhook.Endpoint.UpdateHeadersAsync("app_id", "endpoint_id", new EndpointHeadersIn{
              headers: /* ... */
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint update-headers "app_id" "endpoint_id" '{
              "headers": {"X-Example":"123","X-Foobar":"Bar"}
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "headers": {"X-Example":"123","X-Foobar":"Bar"}
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/msg:
    get:
      description: |
        List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.

        The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.

        Note that by default this endpoint is limited to retrieving 90 days' worth of data
        relative to now or, if an iterator is provided, 90 days before/after the time indicated
        by the iterator ID. If you require data beyond those time ranges, you will need to explicitly
        set the `before` or `after` parameter as appropriate.
      operationId: v1.message-attempt.list-attempted-messages
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: Filter response based on the channel
        explode: true
        in: query
        name: channel
        required: false
        schema:
          description: Filter response based on the channel
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the message tags
        explode: true
        in: query
        name: tag
        required: false
        schema:
          description: Filter response based on the message tags
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the delivery status
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/MessageStatus'
        style: form
      - description: Only include items created before a certain date
        explode: true
        in: query
        name: before
        required: false
        schema:
          description: Only include items created before a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Only include items created after a certain date
        explode: true
        in: query
        name: after
        required: false
        schema:
          description: Only include items created after a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: When `true` message payloads are included in the response
        explode: true
        in: query
        name: with_content
        required: false
        schema:
          default: true
          description: When `true` message payloads are included in the response
          type: boolean
        style: form
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: Filter response based on the event type
        explode: true
        in: query
        name: event_types
        required: false
        schema:
          description: Filter response based on the event type
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_EndpointMessageOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Attempted Messages
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseEndpointMessageOut = await xwebhook.messageAttempt.listAttemptedMessages("app_id",
          "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: const listResponseEndpointMessageOut = await xwebhook.messageAttempt.listAttemptedMessages("app_id",
          "endpoint_id");
      - label: Python
        lang: Python
        source: list_response_endpoint_message_out = xwebhook.message_attempt.list_attempted_messages("app_id",
          "endpoint_id", None)
      - label: Python (Async)
        lang: Python
        source: list_response_endpoint_message_out = await xwebhook.message_attempt.list_attempted_messages("app_id",
          "endpoint_id", None)
      - label: Go
        lang: Go
        source: listResponseEndpointMessageOut, err := xwebhookClient.MessageAttempt.ListAttemptedMessages(ctx,
          "app_id", "endpoint_id", nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseEndpointMessageOut = xwebhook.messageAttempt.listAttemptedMessages("app_id",
          "endpoint_id")
      - label: Java
        lang: Java
        source: ListResponseEndpointMessageOut listResponseEndpointMessageOut = xwebhook.getMessageAttempt().listAttemptedMessages("app_id",
          "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: list_response_endpoint_message_out = xwebhook.message_attempt.list_attempted_messages("app_id",
          "endpoint_id")
      - label: Rust
        lang: Rust
        source: let list_response_endpoint_message_out = xwebhook.message_attempt().list_attempted_messages("app_id",
          "endpoint_id", None).await?;
      - label: C#
        lang: C#
        source: var listResponseEndpointMessageOut = await xwebhook.MessageAttempt.ListAttemptedMessagesAsync("app_id",
          "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt list-attempted-messages "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/test-attempt:
    post:
      description: |-
        Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned.
        FIXME: use MessageIn for expediency, even though the `application` parameter is unused. Since this endpoint isn't publicly documented anyway, it should be fine
      operationId: create_message_attempt_for_endpoint
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIn'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageAttemptOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Create Message Attempt For Endpoint
      tags:
      - Message
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls:
    delete:
      description: Delete endpoint mTLS configuration
      operationId: v1.endpoint.delete-mtls-config
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Delete Endpoint Mtls Config
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.endpoint.deleteMtlsConfig("app_id", "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.endpoint.deleteMtlsConfig("app_id", "endpoint_id");
      - label: Python
        lang: Python
        source: xwebhook.endpoint.delete_mtls_config("app_id", "endpoint_id")
      - label: Python (Async)
        lang: Python
        source: await xwebhook.endpoint.delete_mtls_config("app_id", "endpoint_id")
      - label: Go
        lang: Go
        source: err := xwebhookClient.Endpoint.DeleteMtlsConfig(ctx, "app_id", "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.endpoint.deleteMtlsConfig("app_id", "endpoint_id")
      - label: Java
        lang: Java
        source: xwebhook.getEndpoint().deleteMtlsConfig("app_id", "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: xwebhook.endpoint.delete_mtls_config("app_id", "endpoint_id")
      - label: Rust
        lang: Rust
        source: xwebhook.endpoint().delete_mtls_config("app_id", "endpoint_id").await?;
      - label: C#
        lang: C#
        source: await xwebhook.Endpoint.DeleteMtlsConfigAsync("app_id", "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook endpoint delete-mtls-config "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'DELETE' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    put:
      description: Create/update endpoint mTLS configuration
      operationId: v1.endpoint.update-mtls-config
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointMtlsConfigIn'
        required: true
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Endpoint Mtls Config
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: "await xwebhook.endpoint.updateMtlsConfig(\"app_id\", \"endpoint_id\"\
          , \n});"
      - label: TypeScript
        lang: JavaScript
        source: "await xwebhook.endpoint.updateMtlsConfig(\"app_id\", \"endpoint_id\"\
          , \n});"
      - label: Python
        lang: Python
        source: |-
          xwebhook.endpoint.update_mtls_config("app_id", "endpoint_id", EndpointMtlsConfigIn
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          await xwebhook.endpoint.update_mtls_config("app_id", "endpoint_id", EndpointMtlsConfigIn
          ))
      - label: Go
        lang: Go
        source: |-
          err := xwebhookClient.Endpoint.UpdateMtlsConfig(ctx, "app_id", "endpoint_id", &EndpointMtlsConfigIn{
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          xwebhook.endpoint.updateMtlsConfig("app_id", "endpoint_id", EndpointMtlsConfigIn()
          )
      - label: Java
        lang: Java
        source: |-
          xwebhook.getEndpoint().updateMtlsConfig("app_id", "endpoint_id", new EndpointMtlsConfigIn()
          )
      - label: Ruby
        lang: Ruby
        source: |-
          xwebhook.endpoint.update_mtls_config("app_id", "endpoint_id", Xwebhook::EndpointMtlsConfigIn.new(
          }))
      - label: Rust
        lang: Rust
        source: |-
          xwebhook.endpoint().update_mtls_config("app_id", "endpoint_id", EndpointMtlsConfigIn {
          }).await?;
      - label: C#
        lang: C#
        source: |-
          await xwebhook.Endpoint.UpdateMtlsConfigAsync("app_id", "endpoint_id", new EndpointMtlsConfigIn
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint update-mtls-config "app_id" "endpoint_id" '
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth:
    delete:
      description: Delete endpoint OAuth configuration
      operationId: v1.endpoint.delete-oauth-config
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Delete Endpoint Oauth Config
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.endpoint.deleteOauthConfig("app_id", "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.endpoint.deleteOauthConfig("app_id", "endpoint_id");
      - label: Python
        lang: Python
        source: xwebhook.endpoint.delete_oauth_config("app_id", "endpoint_id")
      - label: Python (Async)
        lang: Python
        source: await xwebhook.endpoint.delete_oauth_config("app_id", "endpoint_id")
      - label: Go
        lang: Go
        source: err := xwebhookClient.Endpoint.DeleteOauthConfig(ctx, "app_id", "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.endpoint.deleteOauthConfig("app_id", "endpoint_id")
      - label: Java
        lang: Java
        source: xwebhook.getEndpoint().deleteOauthConfig("app_id", "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: xwebhook.endpoint.delete_oauth_config("app_id", "endpoint_id")
      - label: Rust
        lang: Rust
        source: xwebhook.endpoint().delete_oauth_config("app_id", "endpoint_id").await?;
      - label: C#
        lang: C#
        source: await xwebhook.Endpoint.DeleteOauthConfigAsync("app_id", "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook endpoint delete-oauth-config "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'DELETE' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    put:
      description: Create/update endpoint OAuth configuration
      operationId: v1.endpoint.update-oauth-config
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointOauthConfigIn'
        required: true
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Endpoint Oauth Config
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.updateOauthConfig("app_id", "endpoint_id", {
              jwtParams: null,
              clientSecret: null,
              scopes: null,
              extraParams: null,
              refreshToken: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.updateOauthConfig("app_id", "endpoint_id", {
              jwtParams: null,
              clientSecret: null,
              scopes: null,
              extraParams: null,
              refreshToken: null
          });
      - label: Python
        lang: Python
        source: |-
          xwebhook.endpoint.update_oauth_config("app_id", "endpoint_id", EndpointOauthConfigIn(
              jwt_params=None,
              client_secret=None,
              scopes=None,
              extra_params=None,
              refresh_token=None
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          await xwebhook.endpoint.update_oauth_config("app_id", "endpoint_id", EndpointOauthConfigIn(
              jwt_params=None,
              client_secret=None,
              scopes=None,
              extra_params=None,
              refresh_token=None
          ))
      - label: Go
        lang: Go
        source: |-
          err := xwebhookClient.Endpoint.UpdateOauthConfig(ctx, "app_id", "endpoint_id", &EndpointOauthConfigIn{
              JwtParams: nil,
              ClientSecret: nil,
              Scopes: nil,
              ExtraParams: nil,
              RefreshToken: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          xwebhook.endpoint.updateOauthConfig("app_id", "endpoint_id", EndpointOauthConfigIn()
              .jwtParams(null)
              .clientSecret(null)
              .scopes(null)
              .extraParams(null)
              .refreshToken(null)
          )
      - label: Java
        lang: Java
        source: |-
          xwebhook.getEndpoint().updateOauthConfig("app_id", "endpoint_id", new EndpointOauthConfigIn()
              .jwtParams(null)
              .clientSecret(null)
              .scopes(null)
              .extraParams(null)
              .refreshToken(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          xwebhook.endpoint.update_oauth_config("app_id", "endpoint_id", Xwebhook::EndpointOauthConfigIn.new({
              "jwt_params": nil,
              "client_secret": nil,
              "scopes": nil,
              "extra_params": nil,
              "refresh_token": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          xwebhook.endpoint().update_oauth_config("app_id", "endpoint_id", EndpointOauthConfigIn {
              jwt_params: None,
              client_secret: None,
              scopes: None,
              extra_params: None,
              refresh_token: None,
          }).await?;
      - label: C#
        lang: C#
        source: |-
          await xwebhook.Endpoint.UpdateOauthConfigAsync("app_id", "endpoint_id", new EndpointOauthConfigIn{
              jwtParams: null,
              clientSecret: null,
              scopes: null,
              extraParams: null,
              refreshToken: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint update-oauth-config "app_id" "endpoint_id" '{
              "jwtParams": null,
              "clientSecret": null,
              "scopes": null,
              "extraParams": null,
              "refreshToken": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "jwtParams": null,
                  "clientSecret": null,
                  "scopes": null,
                  "extraParams": null,
                  "refreshToken": null
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/recover:
    post:
      description: Resend all failed messages since a given time.
      operationId: v1.endpoint.recover
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecoverIn'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecoverOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Recover Failed Webhooks
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const recoverOut = await xwebhook.endpoint.recover("app_id", "endpoint_id", {
              until: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const recoverOut = await xwebhook.endpoint.recover("app_id", "endpoint_id", {
              until: null
          });
      - label: Python
        lang: Python
        source: |-
          recover_out = xwebhook.endpoint.recover("app_id", "endpoint_id", RecoverIn(
              until=None
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          recover_out = await xwebhook.endpoint.recover("app_id", "endpoint_id", RecoverIn(
              until=None
          ), None)
      - label: Go
        lang: Go
        source: |-
          recoverOut, err := xwebhookClient.Endpoint.Recover(ctx, "app_id", "endpoint_id", &RecoverIn{
              Until: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val recoverOut = xwebhook.endpoint.recover("app_id", "endpoint_id", RecoverIn()
              .until(null)
          )
      - label: Java
        lang: Java
        source: |-
          RecoverOut recoverOut = xwebhook.getEndpoint().recover("app_id", "endpoint_id", new RecoverIn()
              .until(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          recover_out = xwebhook.endpoint.recover("app_id", "endpoint_id", Xwebhook::RecoverIn.new({
              "until": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          let recover_out = xwebhook.endpoint().recover("app_id", "endpoint_id", RecoverIn {
              until: None,
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var recoverOut = await xwebhook.Endpoint.RecoverAsync("app_id", "endpoint_id", new RecoverIn{
              until: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint recover "app_id" "endpoint_id" '{
              "until": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "until": null
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing:
    post:
      description: Replays messages to the endpoint. Only messages that were created
        after `since` will be sent. Messages that were previously sent to the endpoint
        are not resent.
      operationId: v1.endpoint.replay
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplayIn'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReplayOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Replay Missing Webhooks
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const replayOut = await xwebhook.endpoint.replay("app_id", "endpoint_id", {
              until: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const replayOut = await xwebhook.endpoint.replay("app_id", "endpoint_id", {
              until: null
          });
      - label: Python
        lang: Python
        source: |-
          replay_out = xwebhook.endpoint.replay("app_id", "endpoint_id", ReplayIn(
              until=None
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          replay_out = await xwebhook.endpoint.replay("app_id", "endpoint_id", ReplayIn(
              until=None
          ), None)
      - label: Go
        lang: Go
        source: |-
          replayOut, err := xwebhookClient.Endpoint.Replay(ctx, "app_id", "endpoint_id", &ReplayIn{
              Until: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val replayOut = xwebhook.endpoint.replay("app_id", "endpoint_id", ReplayIn()
              .until(null)
          )
      - label: Java
        lang: Java
        source: |-
          ReplayOut replayOut = xwebhook.getEndpoint().replay("app_id", "endpoint_id", new ReplayIn()
              .until(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          replay_out = xwebhook.endpoint.replay("app_id", "endpoint_id", Xwebhook::ReplayIn.new({
              "until": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          let replay_out = xwebhook.endpoint().replay("app_id", "endpoint_id", ReplayIn {
              until: None,
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var replayOut = await xwebhook.Endpoint.ReplayAsync("app_id", "endpoint_id", new ReplayIn{
              until: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint replay "app_id" "endpoint_id" '{
              "until": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "until": null
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/secret:
    get:
      description: |-
        Get the endpoint's signing secret.

        This is used to verify the authenticity of the webhook.
        For more information please refer to [the consuming webhooks docs](https://docs.webhook.openweb3.io/consuming-webhooks/).
      operationId: v1.endpoint.get-secret
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointSecretOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Endpoint Secret
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const endpointSecretOut = await xwebhook.endpoint.getSecret("app_id",
          "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: const endpointSecretOut = await xwebhook.endpoint.getSecret("app_id",
          "endpoint_id");
      - label: Python
        lang: Python
        source: endpoint_secret_out = xwebhook.endpoint.get_secret("app_id", "endpoint_id")
      - label: Python (Async)
        lang: Python
        source: endpoint_secret_out = await xwebhook.endpoint.get_secret("app_id",
          "endpoint_id")
      - label: Go
        lang: Go
        source: endpointSecretOut, err := xwebhookClient.Endpoint.GetSecret(ctx, "app_id",
          "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: val endpointSecretOut = xwebhook.endpoint.getSecret("app_id", "endpoint_id")
      - label: Java
        lang: Java
        source: EndpointSecretOut endpointSecretOut = xwebhook.getEndpoint().getSecret("app_id",
          "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: endpoint_secret_out = xwebhook.endpoint.get_secret("app_id", "endpoint_id")
      - label: Rust
        lang: Rust
        source: let endpoint_secret_out = xwebhook.endpoint().get_secret("app_id",
          "endpoint_id").await?;
      - label: C#
        lang: C#
        source: var endpointSecretOut = await xwebhook.Endpoint.GetSecretAsync("app_id",
          "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook endpoint get-secret "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate:
    post:
      description: Rotates the endpoint's signing secret.  The previous secret will
        be valid for the next 24 hours.
      operationId: v1.endpoint.rotate-secret
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointSecretRotateIn'
        required: true
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Rotate Endpoint Secret
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.rotateSecret("app_id", "endpoint_id", {
              key: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.rotateSecret("app_id", "endpoint_id", {
              key: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          });
      - label: Python
        lang: Python
        source: |-
          xwebhook.endpoint.rotate_secret("app_id", "endpoint_id", EndpointSecretRotateIn(
              key="whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          await xwebhook.endpoint.rotate_secret("app_id", "endpoint_id", EndpointSecretRotateIn(
              key="whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          ), None)
      - label: Go
        lang: Go
        source: |-
          err := xwebhookClient.Endpoint.RotateSecret(ctx, "app_id", "endpoint_id", &EndpointSecretRotateIn{
              Key: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          xwebhook.endpoint.rotateSecret("app_id", "endpoint_id", EndpointSecretRotateIn()
              .key("whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD")
          )
      - label: Java
        lang: Java
        source: |-
          xwebhook.getEndpoint().rotateSecret("app_id", "endpoint_id", new EndpointSecretRotateIn()
              .key("whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          xwebhook.endpoint.rotate_secret("app_id", "endpoint_id", Xwebhook::EndpointSecretRotateIn.new({
              "key": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          }))
      - label: Rust
        lang: Rust
        source: |-
          xwebhook.endpoint().rotate_secret("app_id", "endpoint_id", EndpointSecretRotateIn {
              key: Some("whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD".to_string()),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          await xwebhook.Endpoint.RotateSecretAsync("app_id", "endpoint_id", new EndpointSecretRotateIn{
              key: "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint rotate-secret "app_id" "endpoint_id" '{
              "key": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "key": "whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD"
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example:
    post:
      description: Send an example message for event
      operationId: v1.endpoint.send-example
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventExampleIn'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Send Event Type Example Message
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const messageOut = await xwebhook.endpoint.sendExample("app_id", "endpoint_id", {
              eventType: "user.signup"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const messageOut = await xwebhook.endpoint.sendExample("app_id", "endpoint_id", {
              eventType: "user.signup"
          });
      - label: Python
        lang: Python
        source: |-
          message_out = xwebhook.endpoint.send_example("app_id", "endpoint_id", EventExampleIn(
              event_type="user.signup"
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          message_out = await xwebhook.endpoint.send_example("app_id", "endpoint_id", EventExampleIn(
              event_type="user.signup"
          ), None)
      - label: Go
        lang: Go
        source: |-
          messageOut, err := xwebhookClient.Endpoint.SendExample(ctx, "app_id", "endpoint_id", &EventExampleIn{
              EventType: "user.signup",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val messageOut = xwebhook.endpoint.sendExample("app_id", "endpoint_id", EventExampleIn()
              .eventType("user.signup")
          )
      - label: Java
        lang: Java
        source: |-
          MessageOut messageOut = xwebhook.getEndpoint().sendExample("app_id", "endpoint_id", new EventExampleIn()
              .eventType("user.signup")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          message_out = xwebhook.endpoint.send_example("app_id", "endpoint_id", Xwebhook::EventExampleIn.new({
              "event_type": "user.signup"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let message_out = xwebhook.endpoint().send_example("app_id", "endpoint_id", EventExampleIn {
              event_type: "user.signup".to_string(),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var messageOut = await xwebhook.Endpoint.SendExampleAsync("app_id", "endpoint_id", new EventExampleIn{
              eventType: "user.signup"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint send-example "app_id" "endpoint_id" '{
              "eventType": "user.signup"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "eventType": "user.signup"
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/stats:
    get:
      description: Get basic statistics for the endpoint.
      operationId: v1.endpoint.get-stats
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: Filter the range to data starting from this date
        explode: true
        in: query
        name: since
        required: false
        schema:
          description: Filter the range to data starting from this date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Filter the range to data ending by this date
        explode: true
        in: query
        name: until
        required: false
        schema:
          description: Filter the range to data ending by this date
          format: date-time
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointStats'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Endpoint Stats
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const endpointStats = await xwebhook.endpoint.getStats("app_id", "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: const endpointStats = await xwebhook.endpoint.getStats("app_id", "endpoint_id");
      - label: Python
        lang: Python
        source: endpoint_stats = xwebhook.endpoint.get_stats("app_id", "endpoint_id")
      - label: Python (Async)
        lang: Python
        source: endpoint_stats = await xwebhook.endpoint.get_stats("app_id", "endpoint_id")
      - label: Go
        lang: Go
        source: endpointStats, err := xwebhookClient.Endpoint.GetStats(ctx, "app_id",
          "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: val endpointStats = xwebhook.endpoint.getStats("app_id", "endpoint_id")
      - label: Java
        lang: Java
        source: EndpointStats endpointStats = xwebhook.getEndpoint().getStats("app_id",
          "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: endpoint_stats = xwebhook.endpoint.get_stats("app_id", "endpoint_id")
      - label: Rust
        lang: Rust
        source: let endpoint_stats = xwebhook.endpoint().get_stats("app_id", "endpoint_id").await?;
      - label: C#
        lang: C#
        source: var endpointStats = await xwebhook.Endpoint.GetStatsAsync("app_id",
          "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook endpoint get-stats "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation:
    get:
      description: Get the transformation code associated with this endpoint
      operationId: v1.endpoint.transformation-get
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointTransformationOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Endpoint Transformation
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const endpointTransformationOut = await xwebhook.endpoint.transformationGet("app_id",
          "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: const endpointTransformationOut = await xwebhook.endpoint.transformationGet("app_id",
          "endpoint_id");
      - label: Python
        lang: Python
        source: endpoint_transformation_out = xwebhook.endpoint.transformation_get("app_id",
          "endpoint_id")
      - label: Python (Async)
        lang: Python
        source: endpoint_transformation_out = await xwebhook.endpoint.transformation_get("app_id",
          "endpoint_id")
      - label: Go
        lang: Go
        source: endpointTransformationOut, err := xwebhookClient.Endpoint.TransformationGet(ctx,
          "app_id", "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: val endpointTransformationOut = xwebhook.endpoint.transformationGet("app_id",
          "endpoint_id")
      - label: Java
        lang: Java
        source: EndpointTransformationOut endpointTransformationOut = xwebhook.getEndpoint().transformationGet("app_id",
          "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: endpoint_transformation_out = xwebhook.endpoint.transformation_get("app_id",
          "endpoint_id")
      - label: Rust
        lang: Rust
        source: let endpoint_transformation_out = xwebhook.endpoint().transformation_get("app_id",
          "endpoint_id").await?;
      - label: C#
        lang: C#
        source: var endpointTransformationOut = await xwebhook.Endpoint.TransformationGetAsync("app_id",
          "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook endpoint transformation-get "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    patch:
      description: Set or unset the transformation code associated with this endpoint
      operationId: v1.endpoint.transformation-partial-update
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointTransformationIn'
        required: true
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Set Endpoint Transformation
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.transformationPartialUpdate("app_id", "endpoint_id", {
              code: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          await xwebhook.endpoint.transformationPartialUpdate("app_id", "endpoint_id", {
              code: null
          });
      - label: Python
        lang: Python
        source: |-
          xwebhook.endpoint.transformation_partial_update("app_id", "endpoint_id", EndpointTransformationIn(
              code=None
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          await xwebhook.endpoint.transformation_partial_update("app_id", "endpoint_id", EndpointTransformationIn(
              code=None
          ))
      - label: Go
        lang: Go
        source: |-
          err := xwebhookClient.Endpoint.TransformationPartialUpdate(ctx, "app_id", "endpoint_id", &EndpointTransformationIn{
              Code: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          xwebhook.endpoint.transformationPartialUpdate("app_id", "endpoint_id", EndpointTransformationIn()
              .code(null)
          )
      - label: Java
        lang: Java
        source: |-
          xwebhook.getEndpoint().transformationPartialUpdate("app_id", "endpoint_id", new EndpointTransformationIn()
              .code(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          xwebhook.endpoint.transformation_partial_update("app_id", "endpoint_id", Xwebhook::EndpointTransformationIn.new({
              "code": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          xwebhook.endpoint().transformation_partial_update("app_id", "endpoint_id", EndpointTransformationIn {
              code: None,
          }).await?;
      - label: C#
        lang: C#
        source: |-
          await xwebhook.Endpoint.TransformationPartialUpdateAsync("app_id", "endpoint_id", new EndpointTransformationIn{
              code: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint transformation-partial-update "app_id" "endpoint_id" '{
              "code": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PATCH' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "code": null
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation-template/oauth/hubspot:
    put:
      description: |-
        Create/update endpoint Hubsport OAuth configuration
        Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.
      operationId: v1.endpoint.update-hubspot-oauth-config
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HubspotOauthConfigIn'
        required: true
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Hubspot Oauth Config
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: "await xwebhook.endpoint.updateHubspotOauthConfig(\"app_id\", \"endpoint_id\"\
          , \n});"
      - label: TypeScript
        lang: JavaScript
        source: "await xwebhook.endpoint.updateHubspotOauthConfig(\"app_id\", \"endpoint_id\"\
          , \n});"
      - label: Python
        lang: Python
        source: |-
          xwebhook.endpoint.update_hubspot_oauth_config("app_id", "endpoint_id", HubspotOauthConfigIn
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          await xwebhook.endpoint.update_hubspot_oauth_config("app_id", "endpoint_id", HubspotOauthConfigIn
          ))
      - label: Go
        lang: Go
        source: |-
          err := xwebhookClient.Endpoint.UpdateHubspotOauthConfig(ctx, "app_id", "endpoint_id", &HubspotOauthConfigIn{
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          xwebhook.endpoint.updateHubspotOauthConfig("app_id", "endpoint_id", HubspotOauthConfigIn()
          )
      - label: Java
        lang: Java
        source: |-
          xwebhook.getEndpoint().updateHubspotOauthConfig("app_id", "endpoint_id", new HubspotOauthConfigIn()
          )
      - label: Ruby
        lang: Ruby
        source: |-
          xwebhook.endpoint.update_hubspot_oauth_config("app_id", "endpoint_id", Xwebhook::HubspotOauthConfigIn.new(
          }))
      - label: Rust
        lang: Rust
        source: |-
          xwebhook.endpoint().update_hubspot_oauth_config("app_id", "endpoint_id", HubspotOauthConfigIn {
          }).await?;
      - label: C#
        lang: C#
        source: |-
          await xwebhook.Endpoint.UpdateHubspotOauthConfigAsync("app_id", "endpoint_id", new HubspotOauthConfigIn
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint update-hubspot-oauth-config "app_id" "endpoint_id" '
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation-template/oauth/hubspot' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '
              }'
  /api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate:
    post:
      description: Simulate running the transformation on the payload and code
      operationId: v1.endpoint.transformation-simulate
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EndpointTransformationSimulateIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EndpointTransformationSimulateOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Simulate
      tags:
      - Endpoint
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const endpointTransformationSimulateOut = await xwebhook.endpoint.transformationSimulate("app_id", "endpoint_id", {
              eventType: "user.signup",
              channels: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const endpointTransformationSimulateOut = await xwebhook.endpoint.transformationSimulate("app_id", "endpoint_id", {
              eventType: "user.signup",
              channels: null
          });
      - label: Python
        lang: Python
        source: |-
          endpoint_transformation_simulate_out = xwebhook.endpoint.transformation_simulate("app_id", "endpoint_id", EndpointTransformationSimulateIn(
              event_type="user.signup",
              channels=None
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          endpoint_transformation_simulate_out = await xwebhook.endpoint.transformation_simulate("app_id", "endpoint_id", EndpointTransformationSimulateIn(
              event_type="user.signup",
              channels=None
          ), None)
      - label: Go
        lang: Go
        source: |-
          endpointTransformationSimulateOut, err := xwebhookClient.Endpoint.TransformationSimulate(ctx, "app_id", "endpoint_id", &EndpointTransformationSimulateIn{
              EventType: "user.signup",
              Channels: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val endpointTransformationSimulateOut = xwebhook.endpoint.transformationSimulate("app_id", "endpoint_id", EndpointTransformationSimulateIn()
              .eventType("user.signup")
              .channels(null)
          )
      - label: Java
        lang: Java
        source: |-
          EndpointTransformationSimulateOut endpointTransformationSimulateOut = xwebhook.getEndpoint().transformationSimulate("app_id", "endpoint_id", new EndpointTransformationSimulateIn()
              .eventType("user.signup")
              .channels(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          endpoint_transformation_simulate_out = xwebhook.endpoint.transformation_simulate("app_id", "endpoint_id", Xwebhook::EndpointTransformationSimulateIn.new({
              "event_type": "user.signup",
              "channels": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          let endpoint_transformation_simulate_out = xwebhook.endpoint().transformation_simulate("app_id", "endpoint_id", EndpointTransformationSimulateIn {
              event_type: "user.signup".to_string(),
              channels: None,
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var endpointTransformationSimulateOut = await xwebhook.Endpoint.TransformationSimulateAsync("app_id", "endpoint_id", new EndpointTransformationSimulateIn{
              eventType: "user.signup",
              channels: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook endpoint transformation-simulate "app_id" "endpoint_id" '{
              "eventType": "user.signup",
              "channels": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "eventType": "user.signup",
                  "channels": null
              }'
  /api/v1/app/{app_id}/events:
    get:
      description: Reads the stream of created messages for an application
      operationId: v1.message.stream
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          nullable: true
          type: string
        style: form
      - description: Filter response based on the event type
        explode: true
        in: query
        name: event_types
        required: false
        schema:
          description: Filter response based on the event type
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      - description: Filter response based on the event type
        explode: true
        in: query
        name: channels
        required: false
        schema:
          description: Filter response based on the event type
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageStreamOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Stream Events
      tags:
      - Message
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const messageStreamOut = await xwebhook.message.stream("app_id");
      - label: TypeScript
        lang: JavaScript
        source: const messageStreamOut = await xwebhook.message.stream("app_id");
      - label: Python
        lang: Python
        source: message_stream_out = xwebhook.message.stream("app_id")
      - label: Python (Async)
        lang: Python
        source: message_stream_out = await xwebhook.message.stream("app_id")
      - label: Go
        lang: Go
        source: messageStreamOut, err := xwebhookClient.Message.Stream(ctx, "app_id")
      - label: Kotlin
        lang: Kotlin
        source: val messageStreamOut = xwebhook.message.stream("app_id")
      - label: Java
        lang: Java
        source: MessageStreamOut messageStreamOut = xwebhook.getMessage().stream("app_id")
      - label: Ruby
        lang: Ruby
        source: message_stream_out = xwebhook.message.stream("app_id")
      - label: Rust
        lang: Rust
        source: let message_stream_out = xwebhook.message().stream("app_id").await?;
      - label: C#
        lang: C#
        source: var messageStreamOut = await xwebhook.Message.StreamAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook message stream "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/events' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/inbound/msg/{inbound_token}:
    post:
      description: Handles a raw inbound webhook for the application.
      operationId: v1.inbound.msg
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - explode: false
        in: path
        name: inbound_token
        required: true
        schema:
          type: string
        style: simple
      - description: The event type's name
        explode: true
        in: query
        name: event_type
        required: false
        schema:
          description: The event type's name
          example: user.signup
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Handle Inbound
      tags:
      - Inbound
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const messageOut = await xwebhook.inbound.msg("app_id", "inbound_token");
      - label: TypeScript
        lang: JavaScript
        source: const messageOut = await xwebhook.inbound.msg("app_id", "inbound_token");
      - label: Python
        lang: Python
        source: message_out = xwebhook.inbound.msg("app_id", "inbound_token", None)
      - label: Python (Async)
        lang: Python
        source: message_out = await xwebhook.inbound.msg("app_id", "inbound_token",
          None)
      - label: Go
        lang: Go
        source: messageOut, err := xwebhookClient.Inbound.Msg(ctx, "app_id", "inbound_token")
      - label: Kotlin
        lang: Kotlin
        source: val messageOut = xwebhook.inbound.msg("app_id", "inbound_token")
      - label: Java
        lang: Java
        source: MessageOut messageOut = xwebhook.getInbound().msg("app_id", "inbound_token")
      - label: Ruby
        lang: Ruby
        source: message_out = xwebhook.inbound.msg("app_id", "inbound_token")
      - label: Rust
        lang: Rust
        source: let message_out = xwebhook.inbound().msg("app_id", "inbound_token",
          None).await?;
      - label: C#
        lang: C#
        source: var messageOut = await xwebhook.Inbound.MsgAsync("app_id", "inbound_token")
      - label: CLI
        lang: Shell
        source: xwebhook inbound msg "app_id" "inbound_token"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/inbound/msg/{inbound_token}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/inbound/rotate-url:
    post:
      description: |-
        Invalidates the previous inbound url (if one exists), producing a new inbound
        URL for this app
      operationId: v1.inbound.rotate-url
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RotatedUrlOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Rotate Url
      tags:
      - Inbound
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const rotatedUrlOut = await xwebhook.inbound.rotateUrl("app_id");
      - label: TypeScript
        lang: JavaScript
        source: const rotatedUrlOut = await xwebhook.inbound.rotateUrl("app_id");
      - label: Python
        lang: Python
        source: rotated_url_out = xwebhook.inbound.rotate_url("app_id", None)
      - label: Python (Async)
        lang: Python
        source: rotated_url_out = await xwebhook.inbound.rotate_url("app_id", None)
      - label: Go
        lang: Go
        source: rotatedUrlOut, err := xwebhookClient.Inbound.RotateUrl(ctx, "app_id")
      - label: Kotlin
        lang: Kotlin
        source: val rotatedUrlOut = xwebhook.inbound.rotateUrl("app_id")
      - label: Java
        lang: Java
        source: RotatedUrlOut rotatedUrlOut = xwebhook.getInbound().rotateUrl("app_id")
      - label: Ruby
        lang: Ruby
        source: rotated_url_out = xwebhook.inbound.rotate_url("app_id")
      - label: Rust
        lang: Rust
        source: let rotated_url_out = xwebhook.inbound().rotate_url("app_id", None).await?;
      - label: C#
        lang: C#
        source: var rotatedUrlOut = await xwebhook.Inbound.RotateUrlAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook inbound rotate-url "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/inbound/rotate-url' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/integration:
    get:
      description: List the application's integrations.
      operationId: v1.integration.list
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: The sorting order of the returned items
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Ordering'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_IntegrationOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Integrations
      tags:
      - Integration
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseIntegrationOut = await xwebhook.integration.list("app_id");
      - label: TypeScript
        lang: JavaScript
        source: const listResponseIntegrationOut = await xwebhook.integration.list("app_id");
      - label: Python
        lang: Python
        source: list_response_integration_out = xwebhook.integration.list("app_id",
          None)
      - label: Python (Async)
        lang: Python
        source: list_response_integration_out = await xwebhook.integration.list("app_id",
          None)
      - label: Go
        lang: Go
        source: listResponseIntegrationOut, err := xwebhookClient.Integration.List(ctx,
          "app_id", nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseIntegrationOut = xwebhook.integration.list("app_id")
      - label: Java
        lang: Java
        source: ListResponseIntegrationOut listResponseIntegrationOut = xwebhook.getIntegration().list("app_id")
      - label: Ruby
        lang: Ruby
        source: list_response_integration_out = xwebhook.integration.list("app_id")
      - label: Rust
        lang: Rust
        source: let list_response_integration_out = xwebhook.integration().list("app_id",
          None).await?;
      - label: C#
        lang: C#
        source: var listResponseIntegrationOut = await xwebhook.Integration.ListAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook integration list "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/integration' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    post:
      description: Create an integration.
      operationId: v1.integration.create
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationIn'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Create Integration
      tags:
      - Integration
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const integrationOut = await xwebhook.integration.create("app_id", {
              name: "Example Integration"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const integrationOut = await xwebhook.integration.create("app_id", {
              name: "Example Integration"
          });
      - label: Python
        lang: Python
        source: |-
          integration_out = xwebhook.integration.create("app_id", IntegrationIn(
              name="Example Integration"
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          integration_out = await xwebhook.integration.create("app_id", IntegrationIn(
              name="Example Integration"
          ), None)
      - label: Go
        lang: Go
        source: |-
          integrationOut, err := xwebhookClient.Integration.Create(ctx, "app_id", &IntegrationIn{
              Name: "Example Integration",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val integrationOut = xwebhook.integration.create("app_id", IntegrationIn()
              .name("Example Integration")
          )
      - label: Java
        lang: Java
        source: |-
          IntegrationOut integrationOut = xwebhook.getIntegration().create("app_id", new IntegrationIn()
              .name("Example Integration")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          integration_out = xwebhook.integration.create("app_id", Xwebhook::IntegrationIn.new({
              "name": "Example Integration"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let integration_out = xwebhook.integration().create("app_id", IntegrationIn {
              name: "Example Integration".to_string(),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var integrationOut = await xwebhook.Integration.CreateAsync("app_id", new IntegrationIn{
              name: "Example Integration"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook integration create "app_id" '{
              "name": "Example Integration"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/integration' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "name": "Example Integration"
              }'
  /api/v1/app/{app_id}/integration/{integ_id}:
    delete:
      description: Delete an integration.
      operationId: v1.integration.delete
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The integ's ID
        explode: false
        in: path
        name: integ_id
        required: true
        schema:
          description: The integ's ID
          example: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        style: simple
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Delete Integration
      tags:
      - Integration
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.integration.delete("app_id", "integ_id");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.integration.delete("app_id", "integ_id");
      - label: Python
        lang: Python
        source: xwebhook.integration.delete("app_id", "integ_id")
      - label: Python (Async)
        lang: Python
        source: await xwebhook.integration.delete("app_id", "integ_id")
      - label: Go
        lang: Go
        source: err := xwebhookClient.Integration.Delete(ctx, "app_id", "integ_id")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.integration.delete("app_id", "integ_id")
      - label: Java
        lang: Java
        source: xwebhook.getIntegration().delete("app_id", "integ_id")
      - label: Ruby
        lang: Ruby
        source: xwebhook.integration.delete("app_id", "integ_id")
      - label: Rust
        lang: Rust
        source: xwebhook.integration().delete("app_id", "integ_id").await?;
      - label: C#
        lang: C#
        source: await xwebhook.Integration.DeleteAsync("app_id", "integ_id")
      - label: CLI
        lang: Shell
        source: xwebhook integration delete "app_id" "integ_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'DELETE' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/integration/{integ_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    get:
      description: Get an integration.
      operationId: v1.integration.get
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The integ's ID
        explode: false
        in: path
        name: integ_id
        required: true
        schema:
          description: The integ's ID
          example: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Integration
      tags:
      - Integration
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const integrationOut = await xwebhook.integration.get("app_id", "integ_id");
      - label: TypeScript
        lang: JavaScript
        source: const integrationOut = await xwebhook.integration.get("app_id", "integ_id");
      - label: Python
        lang: Python
        source: integration_out = xwebhook.integration.get("app_id", "integ_id")
      - label: Python (Async)
        lang: Python
        source: integration_out = await xwebhook.integration.get("app_id", "integ_id")
      - label: Go
        lang: Go
        source: integrationOut, err := xwebhookClient.Integration.Get(ctx, "app_id",
          "integ_id")
      - label: Kotlin
        lang: Kotlin
        source: val integrationOut = xwebhook.integration.get("app_id", "integ_id")
      - label: Java
        lang: Java
        source: IntegrationOut integrationOut = xwebhook.getIntegration().get("app_id",
          "integ_id")
      - label: Ruby
        lang: Ruby
        source: integration_out = xwebhook.integration.get("app_id", "integ_id")
      - label: Rust
        lang: Rust
        source: let integration_out = xwebhook.integration().get("app_id", "integ_id").await?;
      - label: C#
        lang: C#
        source: var integrationOut = await xwebhook.Integration.GetAsync("app_id",
          "integ_id")
      - label: CLI
        lang: Shell
        source: xwebhook integration get "app_id" "integ_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/integration/{integ_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    put:
      description: Update an integration.
      operationId: v1.integration.update
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The integ's ID
        explode: false
        in: path
        name: integ_id
        required: true
        schema:
          description: The integ's ID
          example: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntegrationUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Integration
      tags:
      - Integration
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const integrationOut = await xwebhook.integration.update("app_id", "integ_id", {
              name: "Example Integration"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const integrationOut = await xwebhook.integration.update("app_id", "integ_id", {
              name: "Example Integration"
          });
      - label: Python
        lang: Python
        source: |-
          integration_out = xwebhook.integration.update("app_id", "integ_id", IntegrationUpdate(
              name="Example Integration"
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          integration_out = await xwebhook.integration.update("app_id", "integ_id", IntegrationUpdate(
              name="Example Integration"
          ))
      - label: Go
        lang: Go
        source: |-
          integrationOut, err := xwebhookClient.Integration.Update(ctx, "app_id", "integ_id", &IntegrationUpdate{
              Name: "Example Integration",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val integrationOut = xwebhook.integration.update("app_id", "integ_id", IntegrationUpdate()
              .name("Example Integration")
          )
      - label: Java
        lang: Java
        source: |-
          IntegrationOut integrationOut = xwebhook.getIntegration().update("app_id", "integ_id", new IntegrationUpdate()
              .name("Example Integration")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          integration_out = xwebhook.integration.update("app_id", "integ_id", Xwebhook::IntegrationUpdate.new({
              "name": "Example Integration"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let integration_out = xwebhook.integration().update("app_id", "integ_id", IntegrationUpdate {
              name: "Example Integration".to_string(),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var integrationOut = await xwebhook.Integration.UpdateAsync("app_id", "integ_id", new IntegrationUpdate{
              name: "Example Integration"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook integration update "app_id" "integ_id" '{
              "name": "Example Integration"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/integration/{integ_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "name": "Example Integration"
              }'
  /api/v1/app/{app_id}/integration/{integ_id}/key:
    get:
      deprecated: true
      description: Get an integration's key.
      operationId: v1.integration.get-key
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The integ's ID
        explode: false
        in: path
        name: integ_id
        required: true
        schema:
          description: The integ's ID
          example: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationKeyOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Integration Key
      tags:
      - Integration
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const integrationKeyOut = await xwebhook.integration.getKey("app_id",
          "integ_id");
      - label: TypeScript
        lang: JavaScript
        source: const integrationKeyOut = await xwebhook.integration.getKey("app_id",
          "integ_id");
      - label: Python
        lang: Python
        source: integration_key_out = xwebhook.integration.get_key("app_id", "integ_id")
      - label: Python (Async)
        lang: Python
        source: integration_key_out = await xwebhook.integration.get_key("app_id",
          "integ_id")
      - label: Go
        lang: Go
        source: integrationKeyOut, err := xwebhookClient.Integration.GetKey(ctx, "app_id",
          "integ_id")
      - label: Kotlin
        lang: Kotlin
        source: val integrationKeyOut = xwebhook.integration.getKey("app_id", "integ_id")
      - label: Java
        lang: Java
        source: IntegrationKeyOut integrationKeyOut = xwebhook.getIntegration().getKey("app_id",
          "integ_id")
      - label: Ruby
        lang: Ruby
        source: integration_key_out = xwebhook.integration.get_key("app_id", "integ_id")
      - label: Rust
        lang: Rust
        source: let integration_key_out = xwebhook.integration().get_key("app_id",
          "integ_id").await?;
      - label: C#
        lang: C#
        source: var integrationKeyOut = await xwebhook.Integration.GetKeyAsync("app_id",
          "integ_id")
      - label: CLI
        lang: Shell
        source: xwebhook integration get-key "app_id" "integ_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/integration/{integ_id}/key' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/integration/{integ_id}/key/rotate:
    post:
      description: Rotate the integration's key. The previous key will be immediately
        revoked.
      operationId: v1.integration.rotate-key
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The integ's ID
        explode: false
        in: path
        name: integ_id
        required: true
        schema:
          description: The integ's ID
          example: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IntegrationKeyOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Rotate Integration Key
      tags:
      - Integration
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const integrationKeyOut = await xwebhook.integration.rotateKey("app_id",
          "integ_id");
      - label: TypeScript
        lang: JavaScript
        source: const integrationKeyOut = await xwebhook.integration.rotateKey("app_id",
          "integ_id");
      - label: Python
        lang: Python
        source: integration_key_out = xwebhook.integration.rotate_key("app_id", "integ_id",
          None)
      - label: Python (Async)
        lang: Python
        source: integration_key_out = await xwebhook.integration.rotate_key("app_id",
          "integ_id", None)
      - label: Go
        lang: Go
        source: integrationKeyOut, err := xwebhookClient.Integration.RotateKey(ctx,
          "app_id", "integ_id")
      - label: Kotlin
        lang: Kotlin
        source: val integrationKeyOut = xwebhook.integration.rotateKey("app_id", "integ_id")
      - label: Java
        lang: Java
        source: IntegrationKeyOut integrationKeyOut = xwebhook.getIntegration().rotateKey("app_id",
          "integ_id")
      - label: Ruby
        lang: Ruby
        source: integration_key_out = xwebhook.integration.rotate_key("app_id", "integ_id")
      - label: Rust
        lang: Rust
        source: let integration_key_out = xwebhook.integration().rotate_key("app_id",
          "integ_id", None).await?;
      - label: C#
        lang: C#
        source: var integrationKeyOut = await xwebhook.Integration.RotateKeyAsync("app_id",
          "integ_id")
      - label: CLI
        lang: Shell
        source: xwebhook integration rotate-key "app_id" "integ_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/integration/{integ_id}/key/rotate' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg:
    get:
      description: |
        List all of the application's messages.

        The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results
        within a certain window.

        Note that by default this endpoint is limited to retrieving 90 days' worth of data
        relative to now or, if an iterator is provided, 90 days before/after the time indicated
        by the iterator ID. If you require data beyond those time ranges, you will need to explicitly
        set the `before` or `after` parameter as appropriate.
      operationId: v1.message.list
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: Filter response based on the channel
        explode: true
        in: query
        name: channel
        required: false
        schema:
          description: Filter response based on the channel
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Only include items created before a certain date
        explode: true
        in: query
        name: before
        required: false
        schema:
          description: Only include items created before a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Only include items created after a certain date
        explode: true
        in: query
        name: after
        required: false
        schema:
          description: Only include items created after a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: When `true` message payloads are included in the response
        explode: true
        in: query
        name: with_content
        required: false
        schema:
          default: true
          description: When `true` message payloads are included in the response
          type: boolean
        style: form
      - description: Filter messages matching the provided tag
        explode: true
        in: query
        name: tag
        required: false
        schema:
          description: Filter messages matching the provided tag
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the event type
        explode: true
        in: query
        name: event_types
        required: false
        schema:
          description: Filter response based on the event type
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_MessageOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Messages
      tags:
      - Message
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseMessageOut = await xwebhook.message.list("app_id");
      - label: TypeScript
        lang: JavaScript
        source: const listResponseMessageOut = await xwebhook.message.list("app_id");
      - label: Python
        lang: Python
        source: list_response_message_out = xwebhook.message.list("app_id", None)
      - label: Python (Async)
        lang: Python
        source: list_response_message_out = await xwebhook.message.list("app_id",
          None)
      - label: Go
        lang: Go
        source: listResponseMessageOut, err := xwebhookClient.Message.List(ctx, "app_id",
          nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseMessageOut = xwebhook.message.list("app_id")
      - label: Java
        lang: Java
        source: ListResponseMessageOut listResponseMessageOut = xwebhook.getMessage().list("app_id")
      - label: Ruby
        lang: Ruby
        source: list_response_message_out = xwebhook.message.list("app_id")
      - label: Rust
        lang: Rust
        source: let list_response_message_out = xwebhook.message().list("app_id",
          None).await?;
      - label: C#
        lang: C#
        source: var listResponseMessageOut = await xwebhook.Message.ListAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook message list "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    post:
      description: |-
        Creates a new message and dispatches it to all of the application's endpoints.

        The `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made.
        If a message with the same `eventId` already exists for any application in your environment, a 409 conflict error will be returned.

        The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types.
        Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.

        The `payload` property is the webhook's body (the actual webhook message). Xwebhook supports payload sizes of up to ~350kb, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.
      operationId: v1.message.create
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: When `true` message payloads are included in the response
        explode: true
        in: query
        name: with_content
        required: false
        schema:
          default: true
          description: When `true` message payloads are included in the response
          type: boolean
        style: form
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIn'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "413":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Payload too large
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Create Message
      tags:
      - Message
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const messageOut = await xwebhook.message.create("app_id", {
              eventId: "unique-msg-identifier",
              eventType: "user.signup",
              payload: {"email":"test@example.com","type":"user.created","username":"test_user"},
              channels: ["project_123", "group_2"],
              payloadRetentionPeriod: 90,
              application: null,
              tags: ["my_tag", "other"],
              transformationsParams: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const messageOut = await xwebhook.message.create("app_id", {
              eventId: "unique-msg-identifier",
              eventType: "user.signup",
              payload: {"email":"test@example.com","type":"user.created","username":"test_user"},
              channels: ["project_123", "group_2"],
              payloadRetentionPeriod: 90,
              application: null,
              tags: ["my_tag", "other"],
              transformationsParams: null
          });
      - label: Python
        lang: Python
        source: |-
          message_out = xwebhook.message.create("app_id", MessageIn(
              event_id="unique-msg-identifier",
              event_type="user.signup",
              payload={"email": "test@example.com", "type": "user.created", "username": "test_user"},
              channels=["project_123", "group_2"],
              payload_retention_period=90,
              application=None,
              tags=["my_tag", "other"],
              transformations_params=None
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          message_out = await xwebhook.message.create("app_id", MessageIn(
              event_id="unique-msg-identifier",
              event_type="user.signup",
              payload={"email": "test@example.com", "type": "user.created", "username": "test_user"},
              channels=["project_123", "group_2"],
              payload_retention_period=90,
              application=None,
              tags=["my_tag", "other"],
              transformations_params=None
          ), None)
      - label: Go
        lang: Go
        source: |-
          messageOut, err := xwebhookClient.Message.Create(ctx, "app_id", &MessageIn{
              EventId: "unique-msg-identifier",
              EventType: "user.signup",
              Payload: map[string]interface{}{"email": "test@example.com", "type": "user.created", "username": "test_user"},
              Channels: []string{"project_123", "group_2"},
              PayloadRetentionPeriod: 90,
              Application: nil,
              Tags: []string{"my_tag", "other"},
              TransformationsParams: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val messageOut = xwebhook.message.create("app_id", MessageIn()
              .eventId("unique-msg-identifier")
              .eventType("user.signup")
              .payload(/* ... */)
              .channels(arrayOf("project_123", "group_2"))
              .payloadRetentionPeriod(90)
              .application(null)
              .tags(arrayOf("my_tag", "other"))
              .transformationsParams(null)
          )
      - label: Java
        lang: Java
        source: |-
          MessageOut messageOut = xwebhook.getMessage().create("app_id", new MessageIn()
              .eventId("unique-msg-identifier")
              .eventType("user.signup")
              .payload(/* ... */)
              .channels(new String[]{"project_123", "group_2"})
              .payloadRetentionPeriod(90)
              .application(null)
              .tags(new String[]{"my_tag", "other"})
              .transformationsParams(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          message_out = xwebhook.message.create("app_id", Xwebhook::MessageIn.new({
              "event_id": "unique-msg-identifier",
              "event_type": "user.signup",
              "payload": {"email":"test@example.com","type":"user.created","username":"test_user"},
              "channels": ["project_123", "group_2"],
              "payload_retention_period": 90,
              "application": nil,
              "tags": ["my_tag", "other"],
              "transformations_params": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          let message_out = xwebhook.message().create("app_id", MessageIn {
              event_id: Some("unique-msg-identifier".to_string()),
              event_type: "user.signup".to_string(),
              payload: json!({"email":"test@example.com","type":"user.created","username":"test_user"}),
              channels: Some(vec!["project_123".to_string(), "group_2".to_string()]),
              payload_retention_period: Some(90),
              application: None,
              tags: Some(vec!["my_tag".to_string(), "other".to_string()]),
              transformations_params: None,
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var messageOut = await xwebhook.Message.CreateAsync("app_id", new MessageIn{
              eventId: "unique-msg-identifier",
              eventType: "user.signup",
              payload: /* ... */,
              channels: new string[] {"project_123", "group_2"},
              payloadRetentionPeriod: 90,
              application: null,
              tags: new string[] {"my_tag", "other"},
              transformationsParams: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook message create "app_id" '{
              "eventId": "unique-msg-identifier",
              "eventType": "user.signup",
              "payload": {"email":"test@example.com","type":"user.created","username":"test_user"},
              "channels": ["project_123", "group_2"],
              "payloadRetentionPeriod": 90,
              "application": null,
              "tags": ["my_tag", "other"],
              "transformationsParams": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "eventId": "unique-msg-identifier",
                  "eventType": "user.signup",
                  "payload": {"email":"test@example.com","type":"user.created","username":"test_user"},
                  "channels": ["project_123", "group_2"],
                  "payloadRetentionPeriod": 90,
                  "application": null,
                  "tags": ["my_tag", "other"],
                  "transformationsParams": null
              }'
  /api/v1/app/{app_id}/msg/{msg_id}:
    get:
      description: Get a message by its ID or eventID.
      operationId: v1.message.get
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: When `true` message payloads are included in the response
        explode: true
        in: query
        name: with_content
        required: false
        schema:
          default: true
          description: When `true` message payloads are included in the response
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Message
      tags:
      - Message
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const messageOut = await xwebhook.message.get("app_id", "msg_id");
      - label: TypeScript
        lang: JavaScript
        source: const messageOut = await xwebhook.message.get("app_id", "msg_id");
      - label: Python
        lang: Python
        source: message_out = xwebhook.message.get("app_id", "msg_id")
      - label: Python (Async)
        lang: Python
        source: message_out = await xwebhook.message.get("app_id", "msg_id")
      - label: Go
        lang: Go
        source: messageOut, err := xwebhookClient.Message.Get(ctx, "app_id", "msg_id")
      - label: Kotlin
        lang: Kotlin
        source: val messageOut = xwebhook.message.get("app_id", "msg_id")
      - label: Java
        lang: Java
        source: MessageOut messageOut = xwebhook.getMessage().get("app_id", "msg_id")
      - label: Ruby
        lang: Ruby
        source: message_out = xwebhook.message.get("app_id", "msg_id")
      - label: Rust
        lang: Rust
        source: let message_out = xwebhook.message().get("app_id", "msg_id").await?;
      - label: C#
        lang: C#
        source: var messageOut = await xwebhook.Message.GetAsync("app_id", "msg_id")
      - label: CLI
        lang: Shell
        source: xwebhook message get "app_id" "msg_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg/{msg_id}/attempt:
    get:
      deprecated: true
      description: |-
        Deprecated: Please use "List Attempts by Endpoint" and "List Attempts by Msg" instead.

        Note that by default this endpoint is limited to retrieving 90 days' worth of data
        relative to now or, if an iterator is provided, 90 days before/after the time indicated
        by the iterator ID. If you require data beyond those time ranges, you will need to explicitly
        set the `before` or `after` parameter as appropriate.

        `msg_id`: Use a message id or a message `eventId`
      operationId: v1.message-attempt.list-by-msg-deprecated
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: Filter the attempts based on the attempted endpoint
        explode: true
        in: query
        name: endpoint_id
        required: false
        schema:
          description: Filter the attempts based on the attempted endpoint
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the channel
        explode: true
        in: query
        name: channel
        required: false
        schema:
          description: Filter response based on the channel
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the tag
        explode: true
        in: query
        name: tag
        required: false
        schema:
          description: Filter response based on the tag
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the delivery status
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/MessageStatus'
        style: form
      - description: Only include items created before a certain date
        explode: true
        in: query
        name: before
        required: false
        schema:
          description: Only include items created before a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Only include items created after a certain date
        explode: true
        in: query
        name: after
        required: false
        schema:
          description: Only include items created after a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Filter response based on the HTTP status code
        explode: true
        in: query
        name: status_code_class
        required: false
        schema:
          $ref: '#/components/schemas/StatusCodeClass'
        style: form
      - description: Filter response based on the event type
        explode: true
        in: query
        name: event_types
        required: false
        schema:
          description: Filter response based on the event type
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_MessageAttemptOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Attempts
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseMessageAttemptOut = await xwebhook.messageAttempt.listByMsgDeprecated("app_id",
          "msg_id");
      - label: TypeScript
        lang: JavaScript
        source: const listResponseMessageAttemptOut = await xwebhook.messageAttempt.listByMsgDeprecated("app_id",
          "msg_id");
      - label: Python
        lang: Python
        source: list_response_message_attempt_out = xwebhook.message_attempt.list_by_msg_deprecated("app_id",
          "msg_id", None)
      - label: Python (Async)
        lang: Python
        source: list_response_message_attempt_out = await xwebhook.message_attempt.list_by_msg_deprecated("app_id",
          "msg_id", None)
      - label: Go
        lang: Go
        source: listResponseMessageAttemptOut, err := xwebhookClient.MessageAttempt.ListByMsgDeprecated(ctx,
          "app_id", "msg_id", nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseMessageAttemptOut = xwebhook.messageAttempt.listByMsgDeprecated("app_id",
          "msg_id")
      - label: Java
        lang: Java
        source: ListResponseMessageAttemptOut listResponseMessageAttemptOut = xwebhook.getMessageAttempt().listByMsgDeprecated("app_id",
          "msg_id")
      - label: Ruby
        lang: Ruby
        source: list_response_message_attempt_out = xwebhook.message_attempt.list_by_msg_deprecated("app_id",
          "msg_id")
      - label: Rust
        lang: Rust
        source: let list_response_message_attempt_out = xwebhook.message_attempt().list_by_msg_deprecated("app_id",
          "msg_id", None).await?;
      - label: C#
        lang: C#
        source: var listResponseMessageAttemptOut = await xwebhook.MessageAttempt.ListByMsgDeprecatedAsync("app_id",
          "msg_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt list-by-msg-deprecated "app_id" "msg_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}/attempt' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}:
    get:
      description: '`msg_id`: Use a message id or a message `eventId`'
      operationId: v1.message-attempt.get
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The attempt's ID
        explode: false
        in: path
        name: attempt_id
        required: true
        schema:
          description: The attempt's ID
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageAttemptOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Attempt
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const messageAttemptOut = await xwebhook.messageAttempt.get("app_id",
          "msg_id", "attempt_id");
      - label: TypeScript
        lang: JavaScript
        source: const messageAttemptOut = await xwebhook.messageAttempt.get("app_id",
          "msg_id", "attempt_id");
      - label: Python
        lang: Python
        source: message_attempt_out = xwebhook.message_attempt.get("app_id", "msg_id",
          "attempt_id")
      - label: Python (Async)
        lang: Python
        source: message_attempt_out = await xwebhook.message_attempt.get("app_id",
          "msg_id", "attempt_id")
      - label: Go
        lang: Go
        source: messageAttemptOut, err := xwebhookClient.MessageAttempt.Get(ctx, "app_id",
          "msg_id", "attempt_id")
      - label: Kotlin
        lang: Kotlin
        source: val messageAttemptOut = xwebhook.messageAttempt.get("app_id", "msg_id",
          "attempt_id")
      - label: Java
        lang: Java
        source: MessageAttemptOut messageAttemptOut = xwebhook.getMessageAttempt().get("app_id",
          "msg_id", "attempt_id")
      - label: Ruby
        lang: Ruby
        source: message_attempt_out = xwebhook.message_attempt.get("app_id", "msg_id",
          "attempt_id")
      - label: Rust
        lang: Rust
        source: let message_attempt_out = xwebhook.message_attempt().get("app_id",
          "msg_id", "attempt_id").await?;
      - label: C#
        lang: C#
        source: var messageAttemptOut = await xwebhook.MessageAttempt.GetAsync("app_id",
          "msg_id", "attempt_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt get "app_id" "msg_id" "attempt_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content:
    delete:
      description: Deletes the given attempt's response body. Useful when an endpoint
        accidentally returned sensitive content.
      operationId: v1.message-attempt.expunge-content
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The attempt's ID
        explode: false
        in: path
        name: attempt_id
        required: true
        schema:
          description: The attempt's ID
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        style: simple
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Delete attempt response body
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.messageAttempt.expungeContent("app_id", "msg_id", "attempt_id");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.messageAttempt.expungeContent("app_id", "msg_id", "attempt_id");
      - label: Python
        lang: Python
        source: xwebhook.message_attempt.expunge_content("app_id", "msg_id", "attempt_id")
      - label: Python (Async)
        lang: Python
        source: await xwebhook.message_attempt.expunge_content("app_id", "msg_id",
          "attempt_id")
      - label: Go
        lang: Go
        source: err := xwebhookClient.MessageAttempt.ExpungeContent(ctx, "app_id",
          "msg_id", "attempt_id")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.messageAttempt.expungeContent("app_id", "msg_id", "attempt_id")
      - label: Java
        lang: Java
        source: xwebhook.getMessageAttempt().expungeContent("app_id", "msg_id", "attempt_id")
      - label: Ruby
        lang: Ruby
        source: xwebhook.message_attempt.expunge_content("app_id", "msg_id", "attempt_id")
      - label: Rust
        lang: Rust
        source: xwebhook.message_attempt().expunge_content("app_id", "msg_id", "attempt_id").await?;
      - label: C#
        lang: C#
        source: await xwebhook.MessageAttempt.ExpungeContentAsync("app_id", "msg_id",
          "attempt_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt expunge-content "app_id" "msg_id" "attempt_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'DELETE' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers:
    get:
      description: Calculate and return headers used on a given message attempt
      operationId: v1.message-attempt.get-headers
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The attempt's ID
        explode: false
        in: path
        name: attempt_id
        required: true
        schema:
          description: The attempt's ID
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageAttemptHeadersOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Attempt Headers
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const messageAttemptHeadersOut = await xwebhook.messageAttempt.getHeaders("app_id",
          "msg_id", "attempt_id");
      - label: TypeScript
        lang: JavaScript
        source: const messageAttemptHeadersOut = await xwebhook.messageAttempt.getHeaders("app_id",
          "msg_id", "attempt_id");
      - label: Python
        lang: Python
        source: message_attempt_headers_out = xwebhook.message_attempt.get_headers("app_id",
          "msg_id", "attempt_id")
      - label: Python (Async)
        lang: Python
        source: message_attempt_headers_out = await xwebhook.message_attempt.get_headers("app_id",
          "msg_id", "attempt_id")
      - label: Go
        lang: Go
        source: messageAttemptHeadersOut, err := xwebhookClient.MessageAttempt.GetHeaders(ctx,
          "app_id", "msg_id", "attempt_id")
      - label: Kotlin
        lang: Kotlin
        source: val messageAttemptHeadersOut = xwebhook.messageAttempt.getHeaders("app_id",
          "msg_id", "attempt_id")
      - label: Java
        lang: Java
        source: MessageAttemptHeadersOut messageAttemptHeadersOut = xwebhook.getMessageAttempt().getHeaders("app_id",
          "msg_id", "attempt_id")
      - label: Ruby
        lang: Ruby
        source: message_attempt_headers_out = xwebhook.message_attempt.get_headers("app_id",
          "msg_id", "attempt_id")
      - label: Rust
        lang: Rust
        source: let message_attempt_headers_out = xwebhook.message_attempt().get_headers("app_id",
          "msg_id", "attempt_id").await?;
      - label: C#
        lang: C#
        source: var messageAttemptHeadersOut = await xwebhook.MessageAttempt.GetHeadersAsync("app_id",
          "msg_id", "attempt_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt get-headers "app_id" "msg_id" "attempt_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg/{msg_id}/content:
    delete:
      description: |-
        Delete the given message's payload. Useful in cases when a message was accidentally sent with sensitive content.

        The message can't be replayed or resent once its payload has been deleted or expired.
      operationId: v1.message.expunge-content
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Delete message payload
      tags:
      - Message
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.message.expungeContent("app_id", "msg_id");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.message.expungeContent("app_id", "msg_id");
      - label: Python
        lang: Python
        source: xwebhook.message.expunge_content("app_id", "msg_id")
      - label: Python (Async)
        lang: Python
        source: await xwebhook.message.expunge_content("app_id", "msg_id")
      - label: Go
        lang: Go
        source: err := xwebhookClient.Message.ExpungeContent(ctx, "app_id", "msg_id")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.message.expungeContent("app_id", "msg_id")
      - label: Java
        lang: Java
        source: xwebhook.getMessage().expungeContent("app_id", "msg_id")
      - label: Ruby
        lang: Ruby
        source: xwebhook.message.expunge_content("app_id", "msg_id")
      - label: Rust
        lang: Rust
        source: xwebhook.message().expunge_content("app_id", "msg_id").await?;
      - label: C#
        lang: C#
        source: await xwebhook.Message.ExpungeContentAsync("app_id", "msg_id")
      - label: CLI
        lang: Shell
        source: xwebhook message expunge-content "app_id" "msg_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'DELETE' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}/content' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg/{msg_id}/endpoint:
    get:
      description: |-
        List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt.
        By default, endpoints are listed in ascending order by ID.
      operationId: v1.message-attempt.list-attempted-destinations
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_MessageEndpointOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Attempted Destinations
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseMessageEndpointOut = await xwebhook.messageAttempt.listAttemptedDestinations("app_id",
          "msg_id");
      - label: TypeScript
        lang: JavaScript
        source: const listResponseMessageEndpointOut = await xwebhook.messageAttempt.listAttemptedDestinations("app_id",
          "msg_id");
      - label: Python
        lang: Python
        source: list_response_message_endpoint_out = xwebhook.message_attempt.list_attempted_destinations("app_id",
          "msg_id", None)
      - label: Python (Async)
        lang: Python
        source: list_response_message_endpoint_out = await xwebhook.message_attempt.list_attempted_destinations("app_id",
          "msg_id", None)
      - label: Go
        lang: Go
        source: listResponseMessageEndpointOut, err := xwebhookClient.MessageAttempt.ListAttemptedDestinations(ctx,
          "app_id", "msg_id", nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseMessageEndpointOut = xwebhook.messageAttempt.listAttemptedDestinations("app_id",
          "msg_id")
      - label: Java
        lang: Java
        source: ListResponseMessageEndpointOut listResponseMessageEndpointOut = xwebhook.getMessageAttempt().listAttemptedDestinations("app_id",
          "msg_id")
      - label: Ruby
        lang: Ruby
        source: list_response_message_endpoint_out = xwebhook.message_attempt.list_attempted_destinations("app_id",
          "msg_id")
      - label: Rust
        lang: Rust
        source: let list_response_message_endpoint_out = xwebhook.message_attempt().list_attempted_destinations("app_id",
          "msg_id", None).await?;
      - label: C#
        lang: C#
        source: var listResponseMessageEndpointOut = await xwebhook.MessageAttempt.ListAttemptedDestinationsAsync("app_id",
          "msg_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt list-attempted-destinations "app_id" "msg_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}/endpoint' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt:
    get:
      deprecated: true
      description: |
        DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.

        List the message attempts for a particular endpoint.

        Returning the endpoint.

        The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.

        Note that by default this endpoint is limited to retrieving 90 days' worth of data
        relative to now or, if an iterator is provided, 90 days before/after the time indicated
        by the iterator ID. If you require data beyond those time ranges, you will need to explicitly
        set the `before` or `after` parameter as appropriate.
      operationId: v1.message-attempt.list-by-endpoint-deprecated
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nullable: true
          type: string
        style: form
      - description: Filter response based on the channel
        explode: true
        in: query
        name: channel
        required: false
        schema:
          description: Filter response based on the channel
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the tag
        explode: true
        in: query
        name: tag
        required: false
        schema:
          description: Filter response based on the tag
          example: project_1337
          maxLength: 128
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: Filter response based on the delivery status
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/MessageStatus'
        style: form
      - description: Only include items created before a certain date
        explode: true
        in: query
        name: before
        required: false
        schema:
          description: Only include items created before a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Only include items created after a certain date
        explode: true
        in: query
        name: after
        required: false
        schema:
          description: Only include items created after a certain date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Filter response based on the event type
        explode: true
        in: query
        name: event_types
        required: false
        schema:
          description: Filter response based on the event type
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_MessageAttemptEndpointOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Attempts For Endpoint
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseMessageAttemptEndpointOut = await xwebhook.messageAttempt.listByEndpointDeprecated("app_id",
          "msg_id", "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: const listResponseMessageAttemptEndpointOut = await xwebhook.messageAttempt.listByEndpointDeprecated("app_id",
          "msg_id", "endpoint_id");
      - label: Python
        lang: Python
        source: list_response_message_attempt_endpoint_out = xwebhook.message_attempt.list_by_endpoint_deprecated("app_id",
          "msg_id", "endpoint_id", None)
      - label: Python (Async)
        lang: Python
        source: list_response_message_attempt_endpoint_out = await xwebhook.message_attempt.list_by_endpoint_deprecated("app_id",
          "msg_id", "endpoint_id", None)
      - label: Go
        lang: Go
        source: listResponseMessageAttemptEndpointOut, err := xwebhookClient.MessageAttempt.ListByEndpointDeprecated(ctx,
          "app_id", "msg_id", "endpoint_id", nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseMessageAttemptEndpointOut = xwebhook.messageAttempt.listByEndpointDeprecated("app_id",
          "msg_id", "endpoint_id")
      - label: Java
        lang: Java
        source: ListResponseMessageAttemptEndpointOut listResponseMessageAttemptEndpointOut
          = xwebhook.getMessageAttempt().listByEndpointDeprecated("app_id", "msg_id",
          "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: list_response_message_attempt_endpoint_out = xwebhook.message_attempt.list_by_endpoint_deprecated("app_id",
          "msg_id", "endpoint_id")
      - label: Rust
        lang: Rust
        source: let list_response_message_attempt_endpoint_out = xwebhook.message_attempt().list_by_endpoint_deprecated("app_id",
          "msg_id", "endpoint_id", None).await?;
      - label: C#
        lang: C#
        source: var listResponseMessageAttemptEndpointOut = await xwebhook.MessageAttempt.ListByEndpointDeprecatedAsync("app_id",
          "msg_id", "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt list-by-endpoint-deprecated "app_id" "msg_id"
          "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend:
    post:
      description: Resend a message to the specified endpoint.
      operationId: v1.message-attempt.resend
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "202":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Resend Webhook
      tags:
      - Message Attempt
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.messageAttempt.resend("app_id", "msg_id", "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.messageAttempt.resend("app_id", "msg_id", "endpoint_id");
      - label: Python
        lang: Python
        source: xwebhook.message_attempt.resend("app_id", "msg_id", "endpoint_id",
          None)
      - label: Python (Async)
        lang: Python
        source: await xwebhook.message_attempt.resend("app_id", "msg_id", "endpoint_id",
          None)
      - label: Go
        lang: Go
        source: err := xwebhookClient.MessageAttempt.Resend(ctx, "app_id", "msg_id",
          "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.messageAttempt.resend("app_id", "msg_id", "endpoint_id")
      - label: Java
        lang: Java
        source: xwebhook.getMessageAttempt().resend("app_id", "msg_id", "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: xwebhook.message_attempt.resend("app_id", "msg_id", "endpoint_id")
      - label: Rust
        lang: Rust
        source: xwebhook.message_attempt().resend("app_id", "msg_id", "endpoint_id",
          None).await?;
      - label: C#
        lang: C#
        source: await xwebhook.MessageAttempt.ResendAsync("app_id", "msg_id", "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook message-attempt resend "app_id" "msg_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/msg/{msg_id}/raw:
    get:
      description: Get a message raw payload by its ID or eventID.
      operationId: v1.message.get_raw_payload
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The msg's ID or UID
        explode: false
        in: path
        name: msg_id
        required: true
        schema:
          description: The msg's ID or UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageRawPayloadOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Raw Message Payload
      tags:
      - Message
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const messageRawPayloadOut = await xwebhook.message.get("app_id",
          "msg_id");
      - label: TypeScript
        lang: JavaScript
        source: const messageRawPayloadOut = await xwebhook.message.get("app_id",
          "msg_id");
      - label: Python
        lang: Python
        source: message_raw_payload_out = xwebhook.message.get("app_id", "msg_id")
      - label: Python (Async)
        lang: Python
        source: message_raw_payload_out = await xwebhook.message.get("app_id", "msg_id")
      - label: Go
        lang: Go
        source: messageRawPayloadOut, err := xwebhookClient.Message.Get(ctx, "app_id",
          "msg_id")
      - label: Kotlin
        lang: Kotlin
        source: val messageRawPayloadOut = xwebhook.message.get("app_id", "msg_id")
      - label: Java
        lang: Java
        source: MessageRawPayloadOut messageRawPayloadOut = xwebhook.getMessage().get("app_id",
          "msg_id")
      - label: Ruby
        lang: Ruby
        source: message_raw_payload_out = xwebhook.message.get("app_id", "msg_id")
      - label: Rust
        lang: Rust
        source: let message_raw_payload_out = xwebhook.message().get("app_id", "msg_id").await?;
      - label: C#
        lang: C#
        source: var messageRawPayloadOut = await xwebhook.Message.GetAsync("app_id",
          "msg_id")
      - label: CLI
        lang: Shell
        source: xwebhook message get "app_id" "msg_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/msg/{msg_id}/raw' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/app/{app_id}/stats:
    get:
      description: Get basic statistics for the application
      operationId: v1.application.get-stats
      parameters:
      - description: Filter the range to data starting from this date
        explode: true
        in: query
        name: since
        required: true
        schema:
          description: Filter the range to data starting from this date
          format: date-time
          type: string
        style: form
      - description: Filter the range to data ending by this date
        explode: true
        in: query
        name: until
        required: true
        schema:
          description: Filter the range to data ending by this date
          format: date-time
          type: string
        style: form
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApplicationStats'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get App Stats
      tags:
      - Application
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const applicationStats = await xwebhook.application.getStats("app_id");
      - label: TypeScript
        lang: JavaScript
        source: const applicationStats = await xwebhook.application.getStats("app_id");
      - label: Python
        lang: Python
        source: application_stats = xwebhook.application.get_stats("app_id")
      - label: Python (Async)
        lang: Python
        source: application_stats = await xwebhook.application.get_stats("app_id")
      - label: Go
        lang: Go
        source: applicationStats, err := xwebhookClient.Application.GetStats(ctx,
          "app_id")
      - label: Kotlin
        lang: Kotlin
        source: val applicationStats = xwebhook.application.getStats("app_id")
      - label: Java
        lang: Java
        source: ApplicationStats applicationStats = xwebhook.getApplication().getStats("app_id")
      - label: Ruby
        lang: Ruby
        source: application_stats = xwebhook.application.get_stats("app_id")
      - label: Rust
        lang: Rust
        source: let application_stats = xwebhook.application().get_stats("app_id").await?;
      - label: C#
        lang: C#
        source: var applicationStats = await xwebhook.Application.GetStatsAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook application get-stats "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/app/{app_id}/stats' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/auth/app-portal-access/{app_id}:
    post:
      description: Use this function to get magic links (and authentication codes)
        for connecting your users to the Consumer Application Portal.
      operationId: v1.authentication.app-portal-access
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppPortalAccessIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppPortalAccessOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Consumer App Portal Access
      tags:
      - Authentication
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const appPortalAccessOut = await xwebhook.authentication.appPortalAccess("app_id", {
              featureFlags: [],
              expiry: null,
              readOnly: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const appPortalAccessOut = await xwebhook.authentication.appPortalAccess("app_id", {
              featureFlags: [],
              expiry: null,
              readOnly: null
          });
      - label: Python
        lang: Python
        source: |-
          app_portal_access_out = xwebhook.authentication.app_portal_access("app_id", AppPortalAccessIn(
              feature_flags=[],
              expiry=None,
              read_only=None
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          app_portal_access_out = await xwebhook.authentication.app_portal_access("app_id", AppPortalAccessIn(
              feature_flags=[],
              expiry=None,
              read_only=None
          ), None)
      - label: Go
        lang: Go
        source: |-
          appPortalAccessOut, err := xwebhookClient.Authentication.AppPortalAccess(ctx, "app_id", &AppPortalAccessIn{
              FeatureFlags: []interface{}{},
              Expiry: nil,
              ReadOnly: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val appPortalAccessOut = xwebhook.authentication.appPortalAccess("app_id", AppPortalAccessIn()
              .featureFlags(arrayOf())
              .expiry(null)
              .readOnly(null)
          )
      - label: Java
        lang: Java
        source: |-
          AppPortalAccessOut appPortalAccessOut = xwebhook.getAuthentication().appPortalAccess("app_id", new AppPortalAccessIn()
              .featureFlags(new Object[]{})
              .expiry(null)
              .readOnly(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          app_portal_access_out = xwebhook.authentication.app_portal_access("app_id", Xwebhook::AppPortalAccessIn.new({
              "feature_flags": [],
              "expiry": nil,
              "read_only": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          let app_portal_access_out = xwebhook.authentication().app_portal_access("app_id", AppPortalAccessIn {
              feature_flags: Some(vec![]),
              expiry: None,
              read_only: None,
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var appPortalAccessOut = await xwebhook.Authentication.AppPortalAccessAsync("app_id", new AppPortalAccessIn{
              featureFlags: new Object[] {},
              expiry: null,
              readOnly: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook authentication app-portal-access "app_id" '{
              "featureFlags": [],
              "expiry": null,
              "readOnly": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/auth/app-portal-access/{app_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "featureFlags": [],
                  "expiry": null,
                  "readOnly": null
              }'
  /api/v1/auth/app/{app_id}/expire-all:
    post:
      description: Expire all of the tokens associated with a specific Application
      operationId: v1.authentication.expire-all
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationTokenExpireIn'
        required: true
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Expire All
      tags:
      - Authentication
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          await xwebhook.authentication.expireAll("app_id", {
              expiry: 60
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          await xwebhook.authentication.expireAll("app_id", {
              expiry: 60
          });
      - label: Python
        lang: Python
        source: |-
          xwebhook.authentication.expire_all("app_id", ApplicationTokenExpireIn(
              expiry=60
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          await xwebhook.authentication.expire_all("app_id", ApplicationTokenExpireIn(
              expiry=60
          ), None)
      - label: Go
        lang: Go
        source: |-
          err := xwebhookClient.Authentication.ExpireAll(ctx, "app_id", &ApplicationTokenExpireIn{
              Expiry: 60,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          xwebhook.authentication.expireAll("app_id", ApplicationTokenExpireIn()
              .expiry(60)
          )
      - label: Java
        lang: Java
        source: |-
          xwebhook.getAuthentication().expireAll("app_id", new ApplicationTokenExpireIn()
              .expiry(60)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          xwebhook.authentication.expire_all("app_id", Xwebhook::ApplicationTokenExpireIn.new({
              "expiry": 60
          }))
      - label: Rust
        lang: Rust
        source: |-
          xwebhook.authentication().expire_all("app_id", ApplicationTokenExpireIn {
              expiry: Some(60),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          await xwebhook.Authentication.ExpireAllAsync("app_id", new ApplicationTokenExpireIn{
              expiry: 60
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook authentication expire-all "app_id" '{
              "expiry": 60
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/auth/app/{app_id}/expire-all' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "expiry": 60
              }'
  /api/v1/auth/dashboard-access/{app_id}:
    post:
      deprecated: true
      description: |-
        DEPRECATED: Please use `app-portal-access` instead.

        Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
      operationId: v1.authentication.dashboard-access
      parameters:
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardAccessOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Dashboard Access
      tags:
      - Authentication
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const dashboardAccessOut = await xwebhook.authentication.dashboardAccess("app_id");
      - label: TypeScript
        lang: JavaScript
        source: const dashboardAccessOut = await xwebhook.authentication.dashboardAccess("app_id");
      - label: Python
        lang: Python
        source: dashboard_access_out = xwebhook.authentication.dashboard_access("app_id",
          None)
      - label: Python (Async)
        lang: Python
        source: dashboard_access_out = await xwebhook.authentication.dashboard_access("app_id",
          None)
      - label: Go
        lang: Go
        source: dashboardAccessOut, err := xwebhookClient.Authentication.DashboardAccess(ctx,
          "app_id")
      - label: Kotlin
        lang: Kotlin
        source: val dashboardAccessOut = xwebhook.authentication.dashboardAccess("app_id")
      - label: Java
        lang: Java
        source: DashboardAccessOut dashboardAccessOut = xwebhook.getAuthentication().dashboardAccess("app_id")
      - label: Ruby
        lang: Ruby
        source: dashboard_access_out = xwebhook.authentication.dashboard_access("app_id")
      - label: Rust
        lang: Rust
        source: let dashboard_access_out = xwebhook.authentication().dashboard_access("app_id",
          None).await?;
      - label: C#
        lang: C#
        source: var dashboardAccessOut = await xwebhook.Authentication.DashboardAccessAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook authentication dashboard-access "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/auth/dashboard-access/{app_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/auth/logout:
    post:
      description: |-
        Logout an app token.

        Trying to log out other tokens will fail.
      operationId: v1.authentication.logout
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Logout
      tags:
      - Authentication
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.authentication.logout();
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.authentication.logout();
      - label: Python
        lang: Python
        source: xwebhook.authentication.logout(None)
      - label: Python (Async)
        lang: Python
        source: await xwebhook.authentication.logout(None)
      - label: Go
        lang: Go
        source: err := xwebhookClient.Authentication.Logout(ctx)
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.authentication.logout()
      - label: Java
        lang: Java
        source: xwebhook.getAuthentication().logout()
      - label: Ruby
        lang: Ruby
        source: xwebhook.authentication.logout()
      - label: Rust
        lang: Rust
        source: xwebhook.authentication().logout(None).await?;
      - label: C#
        lang: C#
        source: await xwebhook.Authentication.LogoutAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook authentication logout '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/auth/logout' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/auth/one-time-token:
    post:
      description: This is a one time token
      operationId: v1.authentication.exchange-one-time-token
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneTimeTokenIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OneTimeTokenOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Exchange One Time Token
      tags:
      - Authentication
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const oneTimeTokenOut = await xwebhook.authentication.exchangeOneTimeToken(
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const oneTimeTokenOut = await xwebhook.authentication.exchangeOneTimeToken(
          });
      - label: Python
        lang: Python
        source: |-
          one_time_token_out = xwebhook.authentication.exchange_one_time_token(OneTimeTokenIn
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          one_time_token_out = await xwebhook.authentication.exchange_one_time_token(OneTimeTokenIn
          ), None)
      - label: Go
        lang: Go
        source: |-
          oneTimeTokenOut, err := xwebhookClient.Authentication.ExchangeOneTimeToken(ctx, &OneTimeTokenIn{
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val oneTimeTokenOut = xwebhook.authentication.exchangeOneTimeToken(OneTimeTokenIn()
          )
      - label: Java
        lang: Java
        source: |-
          OneTimeTokenOut oneTimeTokenOut = xwebhook.getAuthentication().exchangeOneTimeToken(new OneTimeTokenIn()
          )
      - label: Ruby
        lang: Ruby
        source: |-
          one_time_token_out = xwebhook.authentication.exchange_one_time_token(Xwebhook::OneTimeTokenIn.new(
          }))
      - label: Rust
        lang: Rust
        source: |-
          let one_time_token_out = xwebhook.authentication().exchange_one_time_token(OneTimeTokenIn {
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var oneTimeTokenOut = await xwebhook.Authentication.ExchangeOneTimeTokenAsync(new OneTimeTokenIn
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook authentication exchange-one-time-token '
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/auth/one-time-token' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '
              }'
  /api/v1/background-task:
    get:
      description: List background tasks executed in the past 90 days.
      operationId: list_background_tasks
      parameters:
      - description: Filter the response based on the status
        explode: true
        in: query
        name: status
        required: false
        schema:
          $ref: '#/components/schemas/BackgroundTaskStatus'
        style: form
      - description: Filter the response based on the type
        explode: true
        in: query
        name: task
        required: false
        schema:
          $ref: '#/components/schemas/BackgroundTaskType'
        style: form
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          nullable: true
          type: string
        style: form
      - description: The sorting order of the returned items
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Ordering'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_BackgroundTaskOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Background Tasks
      tags:
      - Background Tasks
  /api/v1/background-task/{task_id}:
    get:
      description: Get a background task by ID.
      operationId: get_background_task
      parameters:
      - explode: false
        in: path
        name: task_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BackgroundTaskOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Background Task
      tags:
      - Background Tasks
  /api/v1/environment/export:
    get:
      description: Download a JSON file containing all org-settings and event types
      operationId: v1.environment.export.get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Export Environment Configuration
      tags:
      - Environment
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const environmentOut = await xwebhook.environment.export();
      - label: TypeScript
        lang: JavaScript
        source: const environmentOut = await xwebhook.environment.export();
      - label: Python
        lang: Python
        source: environment_out = xwebhook.environment.export()
      - label: Python (Async)
        lang: Python
        source: environment_out = await xwebhook.environment.export()
      - label: Go
        lang: Go
        source: environmentOut, err := xwebhookClient.Environment.Export(ctx)
      - label: Kotlin
        lang: Kotlin
        source: val environmentOut = xwebhook.environment.export()
      - label: Java
        lang: Java
        source: EnvironmentOut environmentOut = xwebhook.getEnvironment().export()
      - label: Ruby
        lang: Ruby
        source: environment_out = xwebhook.environment.export()
      - label: Rust
        lang: Rust
        source: let environment_out = xwebhook.environment().export().await?;
      - label: C#
        lang: C#
        source: var environmentOut = await xwebhook.Environment.ExportAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook environment export '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/environment/export' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    post:
      description: Download a JSON file containing all org-settings and event types
      operationId: v1.environment.export
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Export Environment Configuration
      tags:
      - Environment
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const environmentOut = await xwebhook.environment.export();
      - label: TypeScript
        lang: JavaScript
        source: const environmentOut = await xwebhook.environment.export();
      - label: Python
        lang: Python
        source: environment_out = xwebhook.environment.export(None)
      - label: Python (Async)
        lang: Python
        source: environment_out = await xwebhook.environment.export(None)
      - label: Go
        lang: Go
        source: environmentOut, err := xwebhookClient.Environment.Export(ctx)
      - label: Kotlin
        lang: Kotlin
        source: val environmentOut = xwebhook.environment.export()
      - label: Java
        lang: Java
        source: EnvironmentOut environmentOut = xwebhook.getEnvironment().export()
      - label: Ruby
        lang: Ruby
        source: environment_out = xwebhook.environment.export()
      - label: Rust
        lang: Rust
        source: let environment_out = xwebhook.environment().export(None).await?;
      - label: C#
        lang: C#
        source: var environmentOut = await xwebhook.Environment.ExportAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook environment export '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/environment/export' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/environment/import:
    post:
      description: |-
        Import a configuration into the active organization.
        It doesn't delete anything, only adds/updates what was passed to it.
      operationId: v1.environment.import
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnvironmentIn'
        required: true
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Import Environment Configuration
      tags:
      - Environment
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          await xwebhook.environment.import({
              eventTypes: null,
              settings: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          await xwebhook.environment.import({
              eventTypes: null,
              settings: null
          });
      - label: Python
        lang: Python
        source: |-
          xwebhook.environment.import(EnvironmentIn(
              event_types=None,
              settings=None
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          await xwebhook.environment.import(EnvironmentIn(
              event_types=None,
              settings=None
          ), None)
      - label: Go
        lang: Go
        source: |-
          err := xwebhookClient.Environment.Import(ctx, &EnvironmentIn{
              EventTypes: nil,
              Settings: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          xwebhook.environment.import(EnvironmentIn()
              .eventTypes(null)
              .settings(null)
          )
      - label: Java
        lang: Java
        source: |-
          xwebhook.getEnvironment().import(new EnvironmentIn()
              .eventTypes(null)
              .settings(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          xwebhook.environment.import(Xwebhook::EnvironmentIn.new({
              "event_types": nil,
              "settings": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          xwebhook.environment().import(EnvironmentIn {
              event_types: None,
              settings: None,
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          await xwebhook.Environment.ImportAsync(new EnvironmentIn{
              eventTypes: null,
              settings: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook environment import '{
              "eventTypes": null,
              "settings": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/environment/import' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "eventTypes": null,
                  "settings": null
              }'
  /api/v1/environment/settings:
    get:
      description: Get the environment's settings
      operationId: v1.environment.get-settings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnvironmentSettingsOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Org Settings
      tags:
      - Environment-Settings
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const environmentSettingsOut = await xwebhook.environment.getSettings();
      - label: TypeScript
        lang: JavaScript
        source: const environmentSettingsOut = await xwebhook.environment.getSettings();
      - label: Python
        lang: Python
        source: environment_settings_out = xwebhook.environment.get_settings()
      - label: Python (Async)
        lang: Python
        source: environment_settings_out = await xwebhook.environment.get_settings()
      - label: Go
        lang: Go
        source: environmentSettingsOut, err := xwebhookClient.Environment.GetSettings(ctx)
      - label: Kotlin
        lang: Kotlin
        source: val environmentSettingsOut = xwebhook.environment.getSettings()
      - label: Java
        lang: Java
        source: EnvironmentSettingsOut environmentSettingsOut = xwebhook.getEnvironment().getSettings()
      - label: Ruby
        lang: Ruby
        source: environment_settings_out = xwebhook.environment.get_settings()
      - label: Rust
        lang: Rust
        source: let environment_settings_out = xwebhook.environment().get_settings().await?;
      - label: C#
        lang: C#
        source: var environmentSettingsOut = await xwebhook.Environment.GetSettingsAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook environment get-settings '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/environment/settings' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/event-type:
    get:
      description: Return the list of event types.
      operationId: v1.event-type.list
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          example: user.signup
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: form
      - description: The sorting order of the returned items
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Ordering'
        style: form
      - description: When `true` archived (deleted but not expunged) items are included
          in the response
        explode: true
        in: query
        name: include_archived
        required: false
        schema:
          default: false
          description: When `true` archived (deleted but not expunged) items are included
            in the response
          type: boolean
        style: form
      - description: When `true` the full item (including the schema) is included
          in the response
        explode: true
        in: query
        name: with_content
        required: false
        schema:
          default: false
          description: When `true` the full item (including the schema) is included
            in the response
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_EventTypeOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Event Types
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseEventTypeOut = await xwebhook.eventType.list();
      - label: TypeScript
        lang: JavaScript
        source: const listResponseEventTypeOut = await xwebhook.eventType.list();
      - label: Python
        lang: Python
        source: list_response_event_type_out = xwebhook.event_type.list(None)
      - label: Python (Async)
        lang: Python
        source: list_response_event_type_out = await xwebhook.event_type.list(None)
      - label: Go
        lang: Go
        source: listResponseEventTypeOut, err := xwebhookClient.EventType.List(ctx,
          nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseEventTypeOut = xwebhook.eventType.list()
      - label: Java
        lang: Java
        source: ListResponseEventTypeOut listResponseEventTypeOut = xwebhook.getEventType().list()
      - label: Ruby
        lang: Ruby
        source: list_response_event_type_out = xwebhook.event_type.list()
      - label: Rust
        lang: Rust
        source: let list_response_event_type_out = xwebhook.event_type().list(None).await?;
      - label: C#
        lang: C#
        source: var listResponseEventTypeOut = await xwebhook.EventType.ListAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook event-type list '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/event-type' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    post:
      description: |-
        Create new or unarchive existing event type.

        Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it.
        Endpoints filtering on the event type before archival will continue to filter on it.
        This operation does not preserve the description and schemas.
      operationId: v1.event-type.create
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTypeIn'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Create Event Type
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const eventTypeOut = await xwebhook.eventType.create({
              name: "user.signup",
              description: "A user has signed up",
              archived: false,
              schemas: {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
              featureFlag: "cool-new-feature"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const eventTypeOut = await xwebhook.eventType.create({
              name: "user.signup",
              description: "A user has signed up",
              archived: false,
              schemas: {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
              featureFlag: "cool-new-feature"
          });
      - label: Python
        lang: Python
        source: |-
          event_type_out = xwebhook.event_type.create(EventTypeIn(
              name="user.signup",
              description="A user has signed up",
              archived=False,
              schemas={"1": {"description": "An invoice was paid by a user", "properties": {"invoiceId": {"description": "The invoice id", "type": "string"}, "userId": {"description": "The user id", "type": "string"}}, "required": ["invoiceId", "userId"], "title": "Invoice Paid Event", "type": "object"}},
              feature_flag="cool-new-feature"
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          event_type_out = await xwebhook.event_type.create(EventTypeIn(
              name="user.signup",
              description="A user has signed up",
              archived=False,
              schemas={"1": {"description": "An invoice was paid by a user", "properties": {"invoiceId": {"description": "The invoice id", "type": "string"}, "userId": {"description": "The user id", "type": "string"}}, "required": ["invoiceId", "userId"], "title": "Invoice Paid Event", "type": "object"}},
              feature_flag="cool-new-feature"
          ), None)
      - label: Go
        lang: Go
        source: |-
          eventTypeOut, err := xwebhookClient.EventType.Create(ctx, &EventTypeIn{
              Name: "user.signup",
              Description: "A user has signed up",
              Archived: false,
              Schemas: map[interface{}]interface{}{"1": map[string]interface{}{"description": "An invoice was paid by a user", "properties": map[interface{}]interface{}{"invoiceId": map[string]interface{}{"description": "The invoice id", "type": "string"}, "userId": map[string]interface{}{"description": "The user id", "type": "string"}}, "required": []string{"invoiceId", "userId"}, "title": "Invoice Paid Event", "type": "object"}},
              FeatureFlag: "cool-new-feature",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val eventTypeOut = xwebhook.eventType.create(EventTypeIn()
              .name("user.signup")
              .description("A user has signed up")
              .archived(false)
              .schemas(/* ... */)
              .featureFlag("cool-new-feature")
          )
      - label: Java
        lang: Java
        source: |-
          EventTypeOut eventTypeOut = xwebhook.getEventType().create(new EventTypeIn()
              .name("user.signup")
              .description("A user has signed up")
              .archived(false)
              .schemas(/* ... */)
              .featureFlag("cool-new-feature")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          event_type_out = xwebhook.event_type.create(Xwebhook::EventTypeIn.new({
              "name": "user.signup",
              "description": "A user has signed up",
              "archived": false,
              "schemas": {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
              "feature_flag": "cool-new-feature"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let event_type_out = xwebhook.event_type().create(EventTypeIn {
              name: "user.signup".to_string(),
              description: "A user has signed up".to_string(),
              archived: Some(false),
              schemas: Some(json!({"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}})),
              feature_flag: Some("cool-new-feature".to_string()),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var eventTypeOut = await xwebhook.EventType.CreateAsync(new EventTypeIn{
              name: "user.signup",
              description: "A user has signed up",
              archived: false,
              schemas: /* ... */,
              featureFlag: "cool-new-feature"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook event-type create '{
              "name": "user.signup",
              "description": "A user has signed up",
              "archived": false,
              "schemas": {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
              "featureFlag": "cool-new-feature"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/event-type' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "name": "user.signup",
                  "description": "A user has signed up",
                  "archived": false,
                  "schemas": {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
                  "featureFlag": "cool-new-feature"
              }'
  /api/v1/event-type/export/openapi:
    post:
      description: |-
        Exports event type definitions based on the OpenAPI schemas associated
        with each existing event type
      operationId: v1.event-type.export-openapi
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportEventTypeOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Event Type Export From Openapi
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const exportEventTypeOut = await xwebhook.eventType.exportOpenapi();
      - label: TypeScript
        lang: JavaScript
        source: const exportEventTypeOut = await xwebhook.eventType.exportOpenapi();
      - label: Python
        lang: Python
        source: export_event_type_out = xwebhook.event_type.export_openapi(None)
      - label: Python (Async)
        lang: Python
        source: export_event_type_out = await xwebhook.event_type.export_openapi(None)
      - label: Go
        lang: Go
        source: exportEventTypeOut, err := xwebhookClient.EventType.ExportOpenapi(ctx)
      - label: Kotlin
        lang: Kotlin
        source: val exportEventTypeOut = xwebhook.eventType.exportOpenapi()
      - label: Java
        lang: Java
        source: ExportEventTypeOut exportEventTypeOut = xwebhook.getEventType().exportOpenapi()
      - label: Ruby
        lang: Ruby
        source: export_event_type_out = xwebhook.event_type.export_openapi()
      - label: Rust
        lang: Rust
        source: let export_event_type_out = xwebhook.event_type().export_openapi(None).await?;
      - label: C#
        lang: C#
        source: var exportEventTypeOut = await xwebhook.EventType.ExportOpenapiAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook event-type export-openapi '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/event-type/export/openapi' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/event-type/import/openapi:
    post:
      description: |-
        Given an OpenAPI spec, create new or update existing event types.
        If an existing `archived` event type is updated, it will be unarchived.

        The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks`
        top-level.
      operationId: v1.event-type.import-openapi
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTypeImportOpenApiIn'
        description: |-
          Import a list of event types from webhooks defined in an OpenAPI spec.

          The OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeImportOpenApiOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Event Type Import From Openapi
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const eventTypeImportOpenApiOut = await xwebhook.eventType.importOpenapi({
              spec: {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}},
              specRaw: {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}}
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const eventTypeImportOpenApiOut = await xwebhook.eventType.importOpenapi({
              spec: {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}},
              specRaw: {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}}
          });
      - label: Python
        lang: Python
        source: |-
          event_type_import_open_api_out = xwebhook.event_type.import_openapi(EventTypeImportOpenApiIn(
              spec={"info": {"title": "Webhook Example", "version": "1.0.0"}, "openapi": "3.1.0", "webhooks": {"pet.new": {"post": {"requestBody": {"content": {"application/json": {"schema": {"properties": {"id": {"format": "int64", "type": "integer"}, "name": {"type": "string"}, "tag": {"type": "string"}}, "required": ["id", "name"]}}}, "description": "Information about a new pet in the system"}, "responses": {"200": {"description": "Return a 200 status to indicate that the data was received successfully"}}}}}},
              spec_raw={"info": {"title": "Webhook Example", "version": "1.0.0"}, "openapi": "3.1.0", "webhooks": {"pet.new": {"post": {"requestBody": {"content": {"application/json": {"schema": {"properties": {"id": {"format": "int64", "type": "integer"}, "name": {"type": "string"}, "tag": {"type": "string"}}, "required": ["id", "name"]}}}, "description": "Information about a new pet in the system"}, "responses": {"200": {"description": "Return a 200 status to indicate that the data was received successfully"}}}}}}
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          event_type_import_open_api_out = await xwebhook.event_type.import_openapi(EventTypeImportOpenApiIn(
              spec={"info": {"title": "Webhook Example", "version": "1.0.0"}, "openapi": "3.1.0", "webhooks": {"pet.new": {"post": {"requestBody": {"content": {"application/json": {"schema": {"properties": {"id": {"format": "int64", "type": "integer"}, "name": {"type": "string"}, "tag": {"type": "string"}}, "required": ["id", "name"]}}}, "description": "Information about a new pet in the system"}, "responses": {"200": {"description": "Return a 200 status to indicate that the data was received successfully"}}}}}},
              spec_raw={"info": {"title": "Webhook Example", "version": "1.0.0"}, "openapi": "3.1.0", "webhooks": {"pet.new": {"post": {"requestBody": {"content": {"application/json": {"schema": {"properties": {"id": {"format": "int64", "type": "integer"}, "name": {"type": "string"}, "tag": {"type": "string"}}, "required": ["id", "name"]}}}, "description": "Information about a new pet in the system"}, "responses": {"200": {"description": "Return a 200 status to indicate that the data was received successfully"}}}}}}
          ), None)
      - label: Go
        lang: Go
        source: |-
          eventTypeImportOpenApiOut, err := xwebhookClient.EventType.ImportOpenapi(ctx, &EventTypeImportOpenApiIn{
              Spec: map[interface{}]interface{}{"info": map[string]interface{}{"title": "Webhook Example", "version": "1.0.0"}, "openapi": "3.1.0", "webhooks": map[interface{}]interface{}{"pet.new": map[interface{}]interface{}{"post": map[interface{}]interface{}{"requestBody": map[interface{}]interface{}{"content": map[interface{}]interface{}{"application/json": map[interface{}]interface{}{"schema": map[interface{}]interface{}{"properties": map[interface{}]interface{}{"id": map[string]interface{}{"format": "int64", "type": "integer"}, "name": map[string]interface{}{"type": "string"}, "tag": map[string]interface{}{"type": "string"}}, "required": []string{"id", "name"}}}}, "description": "Information about a new pet in the system"}, "responses": map[interface{}]interface{}{"200": map[string]interface{}{"description": "Return a 200 status to indicate that the data was received successfully"}}}}}},
              SpecRaw: map[interface{}]interface{}{"info": map[string]interface{}{"title": "Webhook Example", "version": "1.0.0"}, "openapi": "3.1.0", "webhooks": map[interface{}]interface{}{"pet.new": map[interface{}]interface{}{"post": map[interface{}]interface{}{"requestBody": map[interface{}]interface{}{"content": map[interface{}]interface{}{"application/json": map[interface{}]interface{}{"schema": map[interface{}]interface{}{"properties": map[interface{}]interface{}{"id": map[string]interface{}{"format": "int64", "type": "integer"}, "name": map[string]interface{}{"type": "string"}, "tag": map[string]interface{}{"type": "string"}}, "required": []string{"id", "name"}}}}, "description": "Information about a new pet in the system"}, "responses": map[interface{}]interface{}{"200": map[string]interface{}{"description": "Return a 200 status to indicate that the data was received successfully"}}}}}},
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val eventTypeImportOpenApiOut = xwebhook.eventType.importOpenapi(EventTypeImportOpenApiIn()
              .spec(/* ... */)
              .specRaw(/* ... */)
          )
      - label: Java
        lang: Java
        source: |-
          EventTypeImportOpenApiOut eventTypeImportOpenApiOut = xwebhook.getEventType().importOpenapi(new EventTypeImportOpenApiIn()
              .spec(/* ... */)
              .specRaw(/* ... */)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          event_type_import_open_api_out = xwebhook.event_type.import_openapi(Xwebhook::EventTypeImportOpenApiIn.new({
              "spec": {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}},
              "spec_raw": {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}}
          }))
      - label: Rust
        lang: Rust
        source: |-
          let event_type_import_open_api_out = xwebhook.event_type().import_openapi(EventTypeImportOpenApiIn {
              spec: Some(json!({"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}})),
              spec_raw: Some(json!({"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}})),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var eventTypeImportOpenApiOut = await xwebhook.EventType.ImportOpenapiAsync(new EventTypeImportOpenApiIn{
              spec: /* ... */,
              specRaw: /* ... */
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook event-type import-openapi '{
              "spec": {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}},
              "specRaw": {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}}
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/event-type/import/openapi' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "spec": {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}},
                  "specRaw": {"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information about a new pet in the system"},"responses":{"200":{"description":"Return a 200 status to indicate that the data was received successfully"}}}}}}
              }'
  /api/v1/event-type/schema/generate-example:
    post:
      description: Generates a fake example from the given JSONSchema
      operationId: v1.event-type.generate-example
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTypeSchemaIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeExampleOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Generate Schema Example
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const eventTypeExampleOut = await xwebhook.eventType.generateExample({
              schema: {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const eventTypeExampleOut = await xwebhook.eventType.generateExample({
              schema: {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}
          });
      - label: Python
        lang: Python
        source: |-
          event_type_example_out = xwebhook.event_type.generate_example(EventTypeSchemaIn(
              schema={"description": "An invoice was paid by a user", "properties": {"invoiceId": {"description": "The invoice id", "type": "string"}, "userId": {"description": "The user id", "type": "string"}}, "required": ["invoiceId", "userId"], "title": "Invoice Paid Event", "type": "object"}
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          event_type_example_out = await xwebhook.event_type.generate_example(EventTypeSchemaIn(
              schema={"description": "An invoice was paid by a user", "properties": {"invoiceId": {"description": "The invoice id", "type": "string"}, "userId": {"description": "The user id", "type": "string"}}, "required": ["invoiceId", "userId"], "title": "Invoice Paid Event", "type": "object"}
          ), None)
      - label: Go
        lang: Go
        source: |-
          eventTypeExampleOut, err := xwebhookClient.EventType.GenerateExample(ctx, &EventTypeSchemaIn{
              Schema: map[string]interface{}{"description": "An invoice was paid by a user", "properties": map[interface{}]interface{}{"invoiceId": map[string]interface{}{"description": "The invoice id", "type": "string"}, "userId": map[string]interface{}{"description": "The user id", "type": "string"}}, "required": []string{"invoiceId", "userId"}, "title": "Invoice Paid Event", "type": "object"},
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val eventTypeExampleOut = xwebhook.eventType.generateExample(EventTypeSchemaIn()
              .schema(/* ... */)
          )
      - label: Java
        lang: Java
        source: |-
          EventTypeExampleOut eventTypeExampleOut = xwebhook.getEventType().generateExample(new EventTypeSchemaIn()
              .schema(/* ... */)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          event_type_example_out = xwebhook.event_type.generate_example(Xwebhook::EventTypeSchemaIn.new({
              "schema": {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}
          }))
      - label: Rust
        lang: Rust
        source: |-
          let event_type_example_out = xwebhook.event_type().generate_example(EventTypeSchemaIn {
              schema: json!({"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var eventTypeExampleOut = await xwebhook.EventType.GenerateExampleAsync(new EventTypeSchemaIn{
              schema: /* ... */
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook event-type generate-example '{
              "schema": {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/event-type/schema/generate-example' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "schema": {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}
              }'
  /api/v1/event-type/{event_type_name}:
    delete:
      description: |-
        Archive an event type.

        Endpoints already configured to filter on an event type will continue to do so after archival.
        However, new messages can not be sent with it and endpoints can not filter on it.
        An event type can be unarchived with the
        [create operation](#operation/create_event_type_api_v1_event_type__post).
      operationId: v1.event-type.delete
      parameters:
      - description: The event type's name
        explode: false
        in: path
        name: event_type_name
        required: true
        schema:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: By default event types are archived when "deleted". Passing this
          to `true` deletes them entirely.
        explode: true
        in: query
        name: expunge
        required: false
        schema:
          default: false
          description: By default event types are archived when "deleted". Passing
            this to `true` deletes them entirely.
          type: boolean
        style: form
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Delete Event Type
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.eventType.delete("event_type_name");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.eventType.delete("event_type_name");
      - label: Python
        lang: Python
        source: xwebhook.event_type.delete("event_type_name")
      - label: Python (Async)
        lang: Python
        source: await xwebhook.event_type.delete("event_type_name")
      - label: Go
        lang: Go
        source: err := xwebhookClient.EventType.Delete(ctx, "event_type_name")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.eventType.delete("event_type_name")
      - label: Java
        lang: Java
        source: xwebhook.getEventType().delete("event_type_name")
      - label: Ruby
        lang: Ruby
        source: xwebhook.event_type.delete("event_type_name")
      - label: Rust
        lang: Rust
        source: xwebhook.event_type().delete("event_type_name").await?;
      - label: C#
        lang: C#
        source: await xwebhook.EventType.DeleteAsync("event_type_name")
      - label: CLI
        lang: Shell
        source: xwebhook event-type delete "event_type_name"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'DELETE' \
            'https://api.webhook.openweb3.io/api/v1/event-type/{event_type_name}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    get:
      description: Get an event type.
      operationId: v1.event-type.get
      parameters:
      - description: The event type's name
        explode: false
        in: path
        name: event_type_name
        required: true
        schema:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Event Type
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const eventTypeOut = await xwebhook.eventType.get("event_type_name");
      - label: TypeScript
        lang: JavaScript
        source: const eventTypeOut = await xwebhook.eventType.get("event_type_name");
      - label: Python
        lang: Python
        source: event_type_out = xwebhook.event_type.get("event_type_name")
      - label: Python (Async)
        lang: Python
        source: event_type_out = await xwebhook.event_type.get("event_type_name")
      - label: Go
        lang: Go
        source: eventTypeOut, err := xwebhookClient.EventType.Get(ctx, "event_type_name")
      - label: Kotlin
        lang: Kotlin
        source: val eventTypeOut = xwebhook.eventType.get("event_type_name")
      - label: Java
        lang: Java
        source: EventTypeOut eventTypeOut = xwebhook.getEventType().get("event_type_name")
      - label: Ruby
        lang: Ruby
        source: event_type_out = xwebhook.event_type.get("event_type_name")
      - label: Rust
        lang: Rust
        source: let event_type_out = xwebhook.event_type().get("event_type_name").await?;
      - label: C#
        lang: C#
        source: var eventTypeOut = await xwebhook.EventType.GetAsync("event_type_name")
      - label: CLI
        lang: Shell
        source: xwebhook event-type get "event_type_name"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/event-type/{event_type_name}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    patch:
      description: Partially update an event type.
      operationId: v1.event-type.patch
      parameters:
      - description: The event type's name
        explode: false
        in: path
        name: event_type_name
        required: true
        schema:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTypePatch'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Patch Event Type
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const eventTypeOut = await xwebhook.eventType.patch("event_type_name", {
              schemas: {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"},
              featureFlag: "cool-new-feature"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const eventTypeOut = await xwebhook.eventType.patch("event_type_name", {
              schemas: {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"},
              featureFlag: "cool-new-feature"
          });
      - label: Python
        lang: Python
        source: |-
          event_type_out = xwebhook.event_type.patch("event_type_name", EventTypePatch(
              schemas={"description": "An invoice was paid by a user", "properties": {"invoiceId": {"description": "The invoice id", "type": "string"}, "userId": {"description": "The user id", "type": "string"}}, "required": ["invoiceId", "userId"], "title": "Invoice Paid Event", "type": "object"},
              feature_flag="cool-new-feature"
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          event_type_out = await xwebhook.event_type.patch("event_type_name", EventTypePatch(
              schemas={"description": "An invoice was paid by a user", "properties": {"invoiceId": {"description": "The invoice id", "type": "string"}, "userId": {"description": "The user id", "type": "string"}}, "required": ["invoiceId", "userId"], "title": "Invoice Paid Event", "type": "object"},
              feature_flag="cool-new-feature"
          ))
      - label: Go
        lang: Go
        source: |-
          eventTypeOut, err := xwebhookClient.EventType.Patch(ctx, "event_type_name", &EventTypePatch{
              Schemas: map[string]interface{}{"description": "An invoice was paid by a user", "properties": map[interface{}]interface{}{"invoiceId": map[string]interface{}{"description": "The invoice id", "type": "string"}, "userId": map[string]interface{}{"description": "The user id", "type": "string"}}, "required": []string{"invoiceId", "userId"}, "title": "Invoice Paid Event", "type": "object"},
              FeatureFlag: "cool-new-feature",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val eventTypeOut = xwebhook.eventType.patch("event_type_name", EventTypePatch()
              .schemas(/* ... */)
              .featureFlag("cool-new-feature")
          )
      - label: Java
        lang: Java
        source: |-
          EventTypeOut eventTypeOut = xwebhook.getEventType().patch("event_type_name", new EventTypePatch()
              .schemas(/* ... */)
              .featureFlag("cool-new-feature")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          event_type_out = xwebhook.event_type.patch("event_type_name", Xwebhook::EventTypePatch.new({
              "schemas": {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"},
              "feature_flag": "cool-new-feature"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let event_type_out = xwebhook.event_type().patch("event_type_name", EventTypePatch {
              schemas: Some(json!({"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"})),
              feature_flag: Some("cool-new-feature".to_string()),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var eventTypeOut = await xwebhook.EventType.PatchAsync("event_type_name", new EventTypePatch{
              schemas: /* ... */,
              featureFlag: "cool-new-feature"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook event-type patch "event_type_name" '{
              "schemas": {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"},
              "featureFlag": "cool-new-feature"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PATCH' \
            'https://api.webhook.openweb3.io/api/v1/event-type/{event_type_name}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "schemas": {"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"},
                  "featureFlag": "cool-new-feature"
              }'
    put:
      description: Update an event type.
      operationId: v1.event-type.update
      parameters:
      - description: The event type's name
        explode: false
        in: path
        name: event_type_name
        required: true
        schema:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTypeUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeOut'
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTypeOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Event Type
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const eventTypeOut = await xwebhook.eventType.update("event_type_name", {
              description: "A user has signed up",
              archived: false,
              schemas: {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
              featureFlag: "cool-new-feature"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const eventTypeOut = await xwebhook.eventType.update("event_type_name", {
              description: "A user has signed up",
              archived: false,
              schemas: {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
              featureFlag: "cool-new-feature"
          });
      - label: Python
        lang: Python
        source: |-
          event_type_out = xwebhook.event_type.update("event_type_name", EventTypeUpdate(
              description="A user has signed up",
              archived=False,
              schemas={"1": {"description": "An invoice was paid by a user", "properties": {"invoiceId": {"description": "The invoice id", "type": "string"}, "userId": {"description": "The user id", "type": "string"}}, "required": ["invoiceId", "userId"], "title": "Invoice Paid Event", "type": "object"}},
              feature_flag="cool-new-feature"
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          event_type_out = await xwebhook.event_type.update("event_type_name", EventTypeUpdate(
              description="A user has signed up",
              archived=False,
              schemas={"1": {"description": "An invoice was paid by a user", "properties": {"invoiceId": {"description": "The invoice id", "type": "string"}, "userId": {"description": "The user id", "type": "string"}}, "required": ["invoiceId", "userId"], "title": "Invoice Paid Event", "type": "object"}},
              feature_flag="cool-new-feature"
          ))
      - label: Go
        lang: Go
        source: |-
          eventTypeOut, err := xwebhookClient.EventType.Update(ctx, "event_type_name", &EventTypeUpdate{
              Description: "A user has signed up",
              Archived: false,
              Schemas: map[interface{}]interface{}{"1": map[string]interface{}{"description": "An invoice was paid by a user", "properties": map[interface{}]interface{}{"invoiceId": map[string]interface{}{"description": "The invoice id", "type": "string"}, "userId": map[string]interface{}{"description": "The user id", "type": "string"}}, "required": []string{"invoiceId", "userId"}, "title": "Invoice Paid Event", "type": "object"}},
              FeatureFlag: "cool-new-feature",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val eventTypeOut = xwebhook.eventType.update("event_type_name", EventTypeUpdate()
              .description("A user has signed up")
              .archived(false)
              .schemas(/* ... */)
              .featureFlag("cool-new-feature")
          )
      - label: Java
        lang: Java
        source: |-
          EventTypeOut eventTypeOut = xwebhook.getEventType().update("event_type_name", new EventTypeUpdate()
              .description("A user has signed up")
              .archived(false)
              .schemas(/* ... */)
              .featureFlag("cool-new-feature")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          event_type_out = xwebhook.event_type.update("event_type_name", Xwebhook::EventTypeUpdate.new({
              "description": "A user has signed up",
              "archived": false,
              "schemas": {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
              "feature_flag": "cool-new-feature"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let event_type_out = xwebhook.event_type().update("event_type_name", EventTypeUpdate {
              description: "A user has signed up".to_string(),
              archived: Some(false),
              schemas: Some(json!({"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}})),
              feature_flag: Some("cool-new-feature".to_string()),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var eventTypeOut = await xwebhook.EventType.UpdateAsync("event_type_name", new EventTypeUpdate{
              description: "A user has signed up",
              archived: false,
              schemas: /* ... */,
              featureFlag: "cool-new-feature"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook event-type update "event_type_name" '{
              "description": "A user has signed up",
              "archived": false,
              "schemas": {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
              "featureFlag": "cool-new-feature"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/event-type/{event_type_name}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "description": "A user has signed up",
                  "archived": false,
                  "schemas": {"1":{"description":"An invoice was paid by a user","properties":{"invoiceId":{"description":"The invoice id","type":"string"},"userId":{"description":"The user id","type":"string"}},"required":["invoiceId","userId"],"title":"Invoice Paid Event","type":"object"}},
                  "featureFlag": "cool-new-feature"
              }'
  /api/v1/event-type/{event_type_name}/retry-schedule:
    get:
      description: Gets the retry schedule for messages using the given event type
      operationId: v1.event-type.get-retry-schedule
      parameters:
      - description: The event type's name
        explode: false
        in: path
        name: event_type_name
        required: true
        schema:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetryScheduleInOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Retry Schedule
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const retryScheduleInOut = await xwebhook.eventType.getRetrySchedule("event_type_name");
      - label: TypeScript
        lang: JavaScript
        source: const retryScheduleInOut = await xwebhook.eventType.getRetrySchedule("event_type_name");
      - label: Python
        lang: Python
        source: retry_schedule_in_out = xwebhook.event_type.get_retry_schedule("event_type_name")
      - label: Python (Async)
        lang: Python
        source: retry_schedule_in_out = await xwebhook.event_type.get_retry_schedule("event_type_name")
      - label: Go
        lang: Go
        source: retryScheduleInOut, err := xwebhookClient.EventType.GetRetrySchedule(ctx,
          "event_type_name")
      - label: Kotlin
        lang: Kotlin
        source: val retryScheduleInOut = xwebhook.eventType.getRetrySchedule("event_type_name")
      - label: Java
        lang: Java
        source: RetryScheduleInOut retryScheduleInOut = xwebhook.getEventType().getRetrySchedule("event_type_name")
      - label: Ruby
        lang: Ruby
        source: retry_schedule_in_out = xwebhook.event_type.get_retry_schedule("event_type_name")
      - label: Rust
        lang: Rust
        source: let retry_schedule_in_out = xwebhook.event_type().get_retry_schedule("event_type_name").await?;
      - label: C#
        lang: C#
        source: var retryScheduleInOut = await xwebhook.EventType.GetRetryScheduleAsync("event_type_name")
      - label: CLI
        lang: Shell
        source: xwebhook event-type get-retry-schedule "event_type_name"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/event-type/{event_type_name}/retry-schedule' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    put:
      description: Sets a retry schedule for all messages using the given event type
      operationId: v1.event-type.update-retry-schedule
      parameters:
      - description: The event type's name
        explode: false
        in: path
        name: event_type_name
        required: true
        schema:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetryScheduleInOut'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetryScheduleInOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Retry Schedule
      tags:
      - Event Type
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const retryScheduleInOut = await xwebhook.eventType.updateRetrySchedule("event_type_name", {
              retrySchedule: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const retryScheduleInOut = await xwebhook.eventType.updateRetrySchedule("event_type_name", {
              retrySchedule: null
          });
      - label: Python
        lang: Python
        source: |-
          retry_schedule_in_out = xwebhook.event_type.update_retry_schedule("event_type_name", RetryScheduleInOut(
              retry_schedule=None
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          retry_schedule_in_out = await xwebhook.event_type.update_retry_schedule("event_type_name", RetryScheduleInOut(
              retry_schedule=None
          ))
      - label: Go
        lang: Go
        source: |-
          retryScheduleInOut, err := xwebhookClient.EventType.UpdateRetrySchedule(ctx, "event_type_name", &RetryScheduleInOut{
              RetrySchedule: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val retryScheduleInOut = xwebhook.eventType.updateRetrySchedule("event_type_name", RetryScheduleInOut()
              .retrySchedule(null)
          )
      - label: Java
        lang: Java
        source: |-
          RetryScheduleInOut retryScheduleInOut = xwebhook.getEventType().updateRetrySchedule("event_type_name", new RetryScheduleInOut()
              .retrySchedule(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          retry_schedule_in_out = xwebhook.event_type.update_retry_schedule("event_type_name", Xwebhook::RetryScheduleInOut.new({
              "retry_schedule": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          let retry_schedule_in_out = xwebhook.event_type().update_retry_schedule("event_type_name", RetryScheduleInOut {
              retry_schedule: None,
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var retryScheduleInOut = await xwebhook.EventType.UpdateRetryScheduleAsync("event_type_name", new RetryScheduleInOut{
              retrySchedule: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook event-type update-retry-schedule "event_type_name" '{
              "retrySchedule": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/event-type/{event_type_name}/retry-schedule' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "retrySchedule": null
              }'
  /api/v1/events:
    get:
      description: Reads the stream of operational webhook events for this environment
      operationId: v1.events
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          nullable: true
          type: string
        style: form
      - description: Filter response based on the event type
        explode: true
        in: query
        name: event_types
        required: false
        schema:
          description: Filter response based on the event type
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      - description: Filter response based on the event type
        explode: true
        in: query
        name: channels
        required: false
        schema:
          description: Filter response based on the event type
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        style: form
      - explode: true
        in: query
        name: after
        required: false
        schema:
          format: date-time
          nullable: true
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageStreamOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Events
      tags:
      - Events
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const messageStreamOut = await xwebhook.even.s();
      - label: TypeScript
        lang: JavaScript
        source: const messageStreamOut = await xwebhook.even.s();
      - label: Python
        lang: Python
        source: message_stream_out = xwebhook.even.s()
      - label: Python (Async)
        lang: Python
        source: message_stream_out = await xwebhook.even.s()
      - label: Go
        lang: Go
        source: messageStreamOut, err := xwebhookClient.Even.S(ctx)
      - label: Kotlin
        lang: Kotlin
        source: val messageStreamOut = xwebhook.even.s()
      - label: Java
        lang: Java
        source: MessageStreamOut messageStreamOut = xwebhook.getEven().s()
      - label: Ruby
        lang: Ruby
        source: message_stream_out = xwebhook.even.s()
      - label: Rust
        lang: Rust
        source: let message_stream_out = xwebhook.even().s().await?;
      - label: C#
        lang: C#
        source: var messageStreamOut = await xwebhook.Even.SAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook even s '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/events' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/health:
    get:
      description: Verify the API server is up and running.
      operationId: v1.health.get
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      summary: Health
      tags:
      - Health
      x-codeSamples:
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/health' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/msg/broadcast:
    post:
      description: Creates a background task to send the same message to each application
        in your organization
      operationId: create_broadcast_message
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBroadcastIn'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBroadcastOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Create Broadcast Message
      tags:
      - Broadcast
  /api/v1/stats/app/{app_id}/attempt:
    get:
      description: Returns application-level statistics on message attempts
      operationId: v1.stats.app-attempts
      parameters:
      - description: Filter the range to data starting from this date
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          description: Filter the range to data starting from this date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Filter the range to data ending by this date
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          description: Filter the range to data ending by this date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttemptStatisticsResponse'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get App Attempt Stats
      tags:
      - Statistics
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const attemptStatisticsResponse = await xwebhook.stats.appAttempts("app_id");
      - label: TypeScript
        lang: JavaScript
        source: const attemptStatisticsResponse = await xwebhook.stats.appAttempts("app_id");
      - label: Python
        lang: Python
        source: attempt_statistics_response = xwebhook.stats.app_attempts("app_id")
      - label: Python (Async)
        lang: Python
        source: attempt_statistics_response = await xwebhook.stats.app_attempts("app_id")
      - label: Go
        lang: Go
        source: attemptStatisticsResponse, err := xwebhookClient.Stats.AppAttempts(ctx,
          "app_id")
      - label: Kotlin
        lang: Kotlin
        source: val attemptStatisticsResponse = xwebhook.stats.appAttempts("app_id")
      - label: Java
        lang: Java
        source: AttemptStatisticsResponse attemptStatisticsResponse = xwebhook.getStats().appAttempts("app_id")
      - label: Ruby
        lang: Ruby
        source: attempt_statistics_response = xwebhook.stats.app_attempts("app_id")
      - label: Rust
        lang: Rust
        source: let attempt_statistics_response = xwebhook.stats().app_attempts("app_id").await?;
      - label: C#
        lang: C#
        source: var attemptStatisticsResponse = await xwebhook.Stats.AppAttemptsAsync("app_id")
      - label: CLI
        lang: Shell
        source: xwebhook stats app-attempts "app_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/stats/app/{app_id}/attempt' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt:
    get:
      description: Returns endpoint-level statistics on message attempts
      operationId: v1.stats.endpoint-attempts
      parameters:
      - description: Filter the range to data starting from this date
        explode: true
        in: query
        name: startDate
        required: false
        schema:
          description: Filter the range to data starting from this date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: Filter the range to data ending by this date
        explode: true
        in: query
        name: endDate
        required: false
        schema:
          description: Filter the range to data ending by this date
          format: date-time
          nullable: true
          type: string
        style: form
      - description: The app's ID or UID
        explode: false
        in: path
        name: app_id
        required: true
        schema:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      - description: The ep's ID or UID
        explode: false
        in: path
        name: endpoint_id
        required: true
        schema:
          description: The ep's ID or UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttemptStatisticsResponse'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Ep Stats
      tags:
      - Statistics
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const attemptStatisticsResponse = await xwebhook.stats.endpointAttempts("app_id",
          "endpoint_id");
      - label: TypeScript
        lang: JavaScript
        source: const attemptStatisticsResponse = await xwebhook.stats.endpointAttempts("app_id",
          "endpoint_id");
      - label: Python
        lang: Python
        source: attempt_statistics_response = xwebhook.stats.endpoint_attempts("app_id",
          "endpoint_id")
      - label: Python (Async)
        lang: Python
        source: attempt_statistics_response = await xwebhook.stats.endpoint_attempts("app_id",
          "endpoint_id")
      - label: Go
        lang: Go
        source: attemptStatisticsResponse, err := xwebhookClient.Stats.EndpointAttempts(ctx,
          "app_id", "endpoint_id")
      - label: Kotlin
        lang: Kotlin
        source: val attemptStatisticsResponse = xwebhook.stats.endpointAttempts("app_id",
          "endpoint_id")
      - label: Java
        lang: Java
        source: AttemptStatisticsResponse attemptStatisticsResponse = xwebhook.getStats().endpointAttempts("app_id",
          "endpoint_id")
      - label: Ruby
        lang: Ruby
        source: attempt_statistics_response = xwebhook.stats.endpoint_attempts("app_id",
          "endpoint_id")
      - label: Rust
        lang: Rust
        source: let attempt_statistics_response = xwebhook.stats().endpoint_attempts("app_id",
          "endpoint_id").await?;
      - label: C#
        lang: C#
        source: var attemptStatisticsResponse = await xwebhook.Stats.EndpointAttemptsAsync("app_id",
          "endpoint_id")
      - label: CLI
        lang: Shell
        source: xwebhook stats endpoint-attempts "app_id" "endpoint_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/stats/usage/app:
    post:
      description: |-
        Creates a background task to calculate the message destinations for all applications in the environment.

        Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to
        retrieve the results of the operation.
      operationId: v1.statistics.aggregate-app-stats
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppUsageStatsIn'
        required: true
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppUsageStatsOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Aggregate App Stats
      tags:
      - Statistics
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const appUsageStatsOut = await xwebhook.statistics.aggregateAppStats({
              appIds: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const appUsageStatsOut = await xwebhook.statistics.aggregateAppStats({
              appIds: null
          });
      - label: Python
        lang: Python
        source: |-
          app_usage_stats_out = xwebhook.statistics.aggregate_app_stats(AppUsageStatsIn(
              app_ids=None
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          app_usage_stats_out = await xwebhook.statistics.aggregate_app_stats(AppUsageStatsIn(
              app_ids=None
          ), None)
      - label: Go
        lang: Go
        source: |-
          appUsageStatsOut, err := xwebhookClient.Statistics.AggregateAppStats(ctx, &AppUsageStatsIn{
              AppIds: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val appUsageStatsOut = xwebhook.statistics.aggregateAppStats(AppUsageStatsIn()
              .appIds(null)
          )
      - label: Java
        lang: Java
        source: |-
          AppUsageStatsOut appUsageStatsOut = xwebhook.getStatistics().aggregateAppStats(new AppUsageStatsIn()
              .appIds(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          app_usage_stats_out = xwebhook.statistics.aggregate_app_stats(Xwebhook::AppUsageStatsIn.new({
              "app_ids": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          let app_usage_stats_out = xwebhook.statistics().aggregate_app_stats(AppUsageStatsIn {
              app_ids: None,
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var appUsageStatsOut = await xwebhook.Statistics.AggregateAppStatsAsync(new AppUsageStatsIn{
              appIds: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook statistics aggregate-app-stats '{
              "appIds": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/stats/usage/app' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "appIds": null
              }'
  /api/v1/stats/usage/event-types:
    put:
      description: |-
        Creates a background task to calculate the listed event types for all apps in the organization.

        Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to
        retrieve the results of the operation.
      operationId: v1.statistics.aggregate-event-types
      responses:
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AggregateEventTypesOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Aggregate Event Types
      tags:
      - Statistics
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const aggregateEventTypesOut = await xwebhook.statistics.aggregateEventTypes();
      - label: TypeScript
        lang: JavaScript
        source: const aggregateEventTypesOut = await xwebhook.statistics.aggregateEventTypes();
      - label: Python
        lang: Python
        source: aggregate_event_types_out = xwebhook.statistics.aggregate_event_types()
      - label: Python (Async)
        lang: Python
        source: aggregate_event_types_out = await xwebhook.statistics.aggregate_event_types()
      - label: Go
        lang: Go
        source: aggregateEventTypesOut, err := xwebhookClient.Statistics.AggregateEventTypes(ctx)
      - label: Kotlin
        lang: Kotlin
        source: val aggregateEventTypesOut = xwebhook.statistics.aggregateEventTypes()
      - label: Java
        lang: Java
        source: AggregateEventTypesOut aggregateEventTypesOut = xwebhook.getStatistics().aggregateEventTypes()
      - label: Ruby
        lang: Ruby
        source: aggregate_event_types_out = xwebhook.statistics.aggregate_event_types()
      - label: Rust
        lang: Rust
        source: let aggregate_event_types_out = xwebhook.statistics().aggregate_event_types().await?;
      - label: C#
        lang: C#
        source: var aggregateEventTypesOut = await xwebhook.Statistics.AggregateEventTypesAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook statistics aggregate-event-types '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/stats/usage/event-types' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
  /api/v1/transformation-template:
    get:
      description: List all transformation templates for an application
      operationId: v1.transformation-template.list
      parameters:
      - description: Limit the number of returned items
        explode: true
        in: query
        name: limit
        required: false
        schema:
          description: Limit the number of returned items
          format: uint64
          maximum: 250
          minimum: 1
          type: integer
        style: form
      - description: The iterator returned from a prior invocation
        explode: true
        in: query
        name: iterator
        required: false
        schema:
          description: The iterator returned from a prior invocation
          nullable: true
          type: string
        style: form
      - description: The sorting order of the returned items
        explode: true
        in: query
        name: order
        required: false
        schema:
          $ref: '#/components/schemas/Ordering'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListResponse_TemplateOut_'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: List Transformation Templates
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const listResponseTemplateOut = await xwebhook.transformationTemplate.list();
      - label: TypeScript
        lang: JavaScript
        source: const listResponseTemplateOut = await xwebhook.transformationTemplate.list();
      - label: Python
        lang: Python
        source: list_response_template_out = xwebhook.transformation_template.list(None)
      - label: Python (Async)
        lang: Python
        source: list_response_template_out = await xwebhook.transformation_template.list(None)
      - label: Go
        lang: Go
        source: listResponseTemplateOut, err := xwebhookClient.TransformationTemplate.List(ctx,
          nil)
      - label: Kotlin
        lang: Kotlin
        source: val listResponseTemplateOut = xwebhook.transformationTemplate.list()
      - label: Java
        lang: Java
        source: ListResponseTemplateOut listResponseTemplateOut = xwebhook.getTransformationTemplate().list()
      - label: Ruby
        lang: Ruby
        source: list_response_template_out = xwebhook.transformation_template.list()
      - label: Rust
        lang: Rust
        source: let list_response_template_out = xwebhook.transformation_template().list(None).await?;
      - label: C#
        lang: C#
        source: var listResponseTemplateOut = await xwebhook.TransformationTemplate.ListAsync()
      - label: CLI
        lang: Shell
        source: 'xwebhook transformation-template list '
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    post:
      description: Create a new transformation template
      operationId: v1.transformation-template.create
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateIn'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Create Transformation Template
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const templateOut = await xwebhook.transformationTemplate.create({
              instructionsLink: null,
              filterTypes: ["user.signup", "user.deleted"],
              featureFlag: "cool-new-feature"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const templateOut = await xwebhook.transformationTemplate.create({
              instructionsLink: null,
              filterTypes: ["user.signup", "user.deleted"],
              featureFlag: "cool-new-feature"
          });
      - label: Python
        lang: Python
        source: |-
          template_out = xwebhook.transformation_template.create(TemplateIn(
              instructions_link=None,
              filter_types=["user.signup", "user.deleted"],
              feature_flag="cool-new-feature"
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          template_out = await xwebhook.transformation_template.create(TemplateIn(
              instructions_link=None,
              filter_types=["user.signup", "user.deleted"],
              feature_flag="cool-new-feature"
          ), None)
      - label: Go
        lang: Go
        source: |-
          templateOut, err := xwebhookClient.TransformationTemplate.Create(ctx, &TemplateIn{
              InstructionsLink: nil,
              FilterTypes: []string{"user.signup", "user.deleted"},
              FeatureFlag: "cool-new-feature",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val templateOut = xwebhook.transformationTemplate.create(TemplateIn()
              .instructionsLink(null)
              .filterTypes(arrayOf("user.signup", "user.deleted"))
              .featureFlag("cool-new-feature")
          )
      - label: Java
        lang: Java
        source: |-
          TemplateOut templateOut = xwebhook.getTransformationTemplate().create(new TemplateIn()
              .instructionsLink(null)
              .filterTypes(new String[]{"user.signup", "user.deleted"})
              .featureFlag("cool-new-feature")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          template_out = xwebhook.transformation_template.create(Xwebhook::TemplateIn.new({
              "instructions_link": nil,
              "filter_types": ["user.signup", "user.deleted"],
              "feature_flag": "cool-new-feature"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let template_out = xwebhook.transformation_template().create(TemplateIn {
              instructions_link: None,
              filter_types: Some(vec!["user.signup".to_string(), "user.deleted".to_string()]),
              feature_flag: Some("cool-new-feature".to_string()),
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var templateOut = await xwebhook.TransformationTemplate.CreateAsync(new TemplateIn{
              instructionsLink: null,
              filterTypes: new string[] {"user.signup", "user.deleted"},
              featureFlag: "cool-new-feature"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook transformation-template create '{
              "instructionsLink": null,
              "filterTypes": ["user.signup", "user.deleted"],
              "featureFlag": "cool-new-feature"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "instructionsLink": null,
                  "filterTypes": ["user.signup", "user.deleted"],
                  "featureFlag": "cool-new-feature"
              }'
  /api/v1/transformation-template/generate:
    post:
      description: Use OpenAI's Completion API to generate code for a transformation
        template
      operationId: v1.transformation-template.generate
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenerateOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Generate
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const generateOut = await xwebhook.transformationTemplate.generate(
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const generateOut = await xwebhook.transformationTemplate.generate(
          });
      - label: Python
        lang: Python
        source: |-
          generate_out = xwebhook.transformation_template.generate(GenerateIn
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          generate_out = await xwebhook.transformation_template.generate(GenerateIn
          ), None)
      - label: Go
        lang: Go
        source: |-
          generateOut, err := xwebhookClient.TransformationTemplate.Generate(ctx, &GenerateIn{
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val generateOut = xwebhook.transformationTemplate.generate(GenerateIn()
          )
      - label: Java
        lang: Java
        source: |-
          GenerateOut generateOut = xwebhook.getTransformationTemplate().generate(new GenerateIn()
          )
      - label: Ruby
        lang: Ruby
        source: |-
          generate_out = xwebhook.transformation_template.generate(Xwebhook::GenerateIn.new(
          }))
      - label: Rust
        lang: Rust
        source: |-
          let generate_out = xwebhook.transformation_template().generate(GenerateIn {
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var generateOut = await xwebhook.TransformationTemplate.GenerateAsync(new GenerateIn
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook transformation-template generate '
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template/generate' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '
              }'
  /api/v1/transformation-template/oauth/discord:
    post:
      description: Get Discord Incoming webhook URL
      operationId: v1.transformation-template.oauth.discord
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthPayloadIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomingWebhookPayloadOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Authorize Discord
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const incomingWebhookPayloadOut = await xwebhook.transformationTemplate.oauth(
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const incomingWebhookPayloadOut = await xwebhook.transformationTemplate.oauth(
          });
      - label: Python
        lang: Python
        source: |-
          incoming_webhook_payload_out = xwebhook.transformation_template.oauth(OAuthPayloadIn
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          incoming_webhook_payload_out = await xwebhook.transformation_template.oauth(OAuthPayloadIn
          ), None)
      - label: Go
        lang: Go
        source: |-
          incomingWebhookPayloadOut, err := xwebhookClient.TransformationTemplate.Oauth(ctx, &OAuthPayloadIn{
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val incomingWebhookPayloadOut = xwebhook.transformationTemplate.oauth(OAuthPayloadIn()
          )
      - label: Java
        lang: Java
        source: |-
          IncomingWebhookPayloadOut incomingWebhookPayloadOut = xwebhook.getTransformationTemplate().oauth(new OAuthPayloadIn()
          )
      - label: Ruby
        lang: Ruby
        source: |-
          incoming_webhook_payload_out = xwebhook.transformation_template.oauth(Xwebhook::OAuthPayloadIn.new(
          }))
      - label: Rust
        lang: Rust
        source: |-
          let incoming_webhook_payload_out = xwebhook.transformation_template().oauth(OAuthPayloadIn {
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var incomingWebhookPayloadOut = await xwebhook.TransformationTemplate.OauthAsync(new OAuthPayloadIn
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook transformation-template oauth '
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template/oauth/discord' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '
              }'
  /api/v1/transformation-template/oauth/hubspot:
    post:
      description: Get Hubspot access token using authorization code
      operationId: v1.transformation-template.oauth.hubspot
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthPayloadIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthPayloadOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Authorize Hubspot
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const oAuthPayloadOut = await xwebhook.transformationTemplate.oauth(
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const oAuthPayloadOut = await xwebhook.transformationTemplate.oauth(
          });
      - label: Python
        lang: Python
        source: |-
          o_auth_payload_out = xwebhook.transformation_template.oauth(OAuthPayloadIn
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          o_auth_payload_out = await xwebhook.transformation_template.oauth(OAuthPayloadIn
          ), None)
      - label: Go
        lang: Go
        source: |-
          oAuthPayloadOut, err := xwebhookClient.TransformationTemplate.Oauth(ctx, &OAuthPayloadIn{
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val oAuthPayloadOut = xwebhook.transformationTemplate.oauth(OAuthPayloadIn()
          )
      - label: Java
        lang: Java
        source: |-
          OAuthPayloadOut oAuthPayloadOut = xwebhook.getTransformationTemplate().oauth(new OAuthPayloadIn()
          )
      - label: Ruby
        lang: Ruby
        source: |-
          o_auth_payload_out = xwebhook.transformation_template.oauth(Xwebhook::OAuthPayloadIn.new(
          }))
      - label: Rust
        lang: Rust
        source: |-
          let o_auth_payload_out = xwebhook.transformation_template().oauth(OAuthPayloadIn {
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var oAuthPayloadOut = await xwebhook.TransformationTemplate.OauthAsync(new OAuthPayloadIn
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook transformation-template oauth '
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template/oauth/hubspot' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '
              }'
  /api/v1/transformation-template/oauth/slack:
    post:
      description: Get Slack Incoming webhook URL
      operationId: v1.transformation-template.oauth.slack
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthPayloadIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IncomingWebhookPayloadOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Authorize Slack
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const incomingWebhookPayloadOut = await xwebhook.transformationTemplate.oauth(
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const incomingWebhookPayloadOut = await xwebhook.transformationTemplate.oauth(
          });
      - label: Python
        lang: Python
        source: |-
          incoming_webhook_payload_out = xwebhook.transformation_template.oauth(OAuthPayloadIn
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          incoming_webhook_payload_out = await xwebhook.transformation_template.oauth(OAuthPayloadIn
          ), None)
      - label: Go
        lang: Go
        source: |-
          incomingWebhookPayloadOut, err := xwebhookClient.TransformationTemplate.Oauth(ctx, &OAuthPayloadIn{
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val incomingWebhookPayloadOut = xwebhook.transformationTemplate.oauth(OAuthPayloadIn()
          )
      - label: Java
        lang: Java
        source: |-
          IncomingWebhookPayloadOut incomingWebhookPayloadOut = xwebhook.getTransformationTemplate().oauth(new OAuthPayloadIn()
          )
      - label: Ruby
        lang: Ruby
        source: |-
          incoming_webhook_payload_out = xwebhook.transformation_template.oauth(Xwebhook::OAuthPayloadIn.new(
          }))
      - label: Rust
        lang: Rust
        source: |-
          let incoming_webhook_payload_out = xwebhook.transformation_template().oauth(OAuthPayloadIn {
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var incomingWebhookPayloadOut = await xwebhook.TransformationTemplate.OauthAsync(new OAuthPayloadIn
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook transformation-template oauth '
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template/oauth/slack' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '
              }'
  /api/v1/transformation-template/simulate:
    post:
      description: Simulate running the transformation on the payload and code
      operationId: v1.transformation-template.simulate
      parameters:
      - description: The request's idempotency key
        explode: false
        in: header
        name: idempotency-key
        required: false
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransformationSimulateIn'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransformationSimulateOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Simulate
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const transformationSimulateOut = await xwebhook.transformationTemplate.simulate({
              eventType: "user.signup",
              channels: null
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const transformationSimulateOut = await xwebhook.transformationTemplate.simulate({
              eventType: "user.signup",
              channels: null
          });
      - label: Python
        lang: Python
        source: |-
          transformation_simulate_out = xwebhook.transformation_template.simulate(TransformationSimulateIn(
              event_type="user.signup",
              channels=None
          ), None)
      - label: Python (Async)
        lang: Python
        source: |-
          transformation_simulate_out = await xwebhook.transformation_template.simulate(TransformationSimulateIn(
              event_type="user.signup",
              channels=None
          ), None)
      - label: Go
        lang: Go
        source: |-
          transformationSimulateOut, err := xwebhookClient.TransformationTemplate.Simulate(ctx, &TransformationSimulateIn{
              EventType: "user.signup",
              Channels: nil,
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val transformationSimulateOut = xwebhook.transformationTemplate.simulate(TransformationSimulateIn()
              .eventType("user.signup")
              .channels(null)
          )
      - label: Java
        lang: Java
        source: |-
          TransformationSimulateOut transformationSimulateOut = xwebhook.getTransformationTemplate().simulate(new TransformationSimulateIn()
              .eventType("user.signup")
              .channels(null)
          )
      - label: Ruby
        lang: Ruby
        source: |-
          transformation_simulate_out = xwebhook.transformation_template.simulate(Xwebhook::TransformationSimulateIn.new({
              "event_type": "user.signup",
              "channels": nil
          }))
      - label: Rust
        lang: Rust
        source: |-
          let transformation_simulate_out = xwebhook.transformation_template().simulate(TransformationSimulateIn {
              event_type: "user.signup".to_string(),
              channels: None,
          }, None).await?;
      - label: C#
        lang: C#
        source: |-
          var transformationSimulateOut = await xwebhook.TransformationTemplate.SimulateAsync(new TransformationSimulateIn{
              eventType: "user.signup",
              channels: null
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook transformation-template simulate '{
              "eventType": "user.signup",
              "channels": null
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'POST' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template/simulate' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "eventType": "user.signup",
                  "channels": null
              }'
  /api/v1/transformation-template/{transformation_template_id}:
    delete:
      description: Delete a transformation template
      operationId: v1.transformation-template.delete
      parameters:
      - explode: false
        in: path
        name: transformation_template_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "204":
          description: no content
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Delete Transformation Template
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: await xwebhook.transformationTemplate.delete("transformation_template_id");
      - label: TypeScript
        lang: JavaScript
        source: await xwebhook.transformationTemplate.delete("transformation_template_id");
      - label: Python
        lang: Python
        source: xwebhook.transformation_template.delete("transformation_template_id")
      - label: Python (Async)
        lang: Python
        source: await xwebhook.transformation_template.delete("transformation_template_id")
      - label: Go
        lang: Go
        source: err := xwebhookClient.TransformationTemplate.Delete(ctx, "transformation_template_id")
      - label: Kotlin
        lang: Kotlin
        source: xwebhook.transformationTemplate.delete("transformation_template_id")
      - label: Java
        lang: Java
        source: xwebhook.getTransformationTemplate().delete("transformation_template_id")
      - label: Ruby
        lang: Ruby
        source: xwebhook.transformation_template.delete("transformation_template_id")
      - label: Rust
        lang: Rust
        source: xwebhook.transformation_template().delete("transformation_template_id").await?;
      - label: C#
        lang: C#
        source: await xwebhook.TransformationTemplate.DeleteAsync("transformation_template_id")
      - label: CLI
        lang: Shell
        source: xwebhook transformation-template delete "transformation_template_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'DELETE' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template/{transformation_template_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    get:
      description: Get a transformation template
      operationId: v1.transformation-template.get
      parameters:
      - explode: false
        in: path
        name: transformation_template_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Get Transformation Template
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: const templateOut = await xwebhook.transformationTemplate.get("transformation_template_id");
      - label: TypeScript
        lang: JavaScript
        source: const templateOut = await xwebhook.transformationTemplate.get("transformation_template_id");
      - label: Python
        lang: Python
        source: template_out = xwebhook.transformation_template.get("transformation_template_id")
      - label: Python (Async)
        lang: Python
        source: template_out = await xwebhook.transformation_template.get("transformation_template_id")
      - label: Go
        lang: Go
        source: templateOut, err := xwebhookClient.TransformationTemplate.Get(ctx,
          "transformation_template_id")
      - label: Kotlin
        lang: Kotlin
        source: val templateOut = xwebhook.transformationTemplate.get("transformation_template_id")
      - label: Java
        lang: Java
        source: TemplateOut templateOut = xwebhook.getTransformationTemplate().get("transformation_template_id")
      - label: Ruby
        lang: Ruby
        source: template_out = xwebhook.transformation_template.get("transformation_template_id")
      - label: Rust
        lang: Rust
        source: let template_out = xwebhook.transformation_template().get("transformation_template_id").await?;
      - label: C#
        lang: C#
        source: var templateOut = await xwebhook.TransformationTemplate.GetAsync("transformation_template_id")
      - label: CLI
        lang: Shell
        source: xwebhook transformation-template get "transformation_template_id"
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'GET' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template/{transformation_template_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json'
    patch:
      description: Partially update a transformation template
      operationId: v1.transformation-template.patch
      parameters:
      - explode: false
        in: path
        name: transformation_template_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplatePatch'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Patch Transformation Template
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const templateOut = await xwebhook.transformationTemplate.patch("transformation_template_id", {
              instructionsLink: null,
              filterTypes: ["user.signup", "user.deleted"],
              featureFlag: "cool-new-feature"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const templateOut = await xwebhook.transformationTemplate.patch("transformation_template_id", {
              instructionsLink: null,
              filterTypes: ["user.signup", "user.deleted"],
              featureFlag: "cool-new-feature"
          });
      - label: Python
        lang: Python
        source: |-
          template_out = xwebhook.transformation_template.patch("transformation_template_id", TemplatePatch(
              instructions_link=None,
              filter_types=["user.signup", "user.deleted"],
              feature_flag="cool-new-feature"
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          template_out = await xwebhook.transformation_template.patch("transformation_template_id", TemplatePatch(
              instructions_link=None,
              filter_types=["user.signup", "user.deleted"],
              feature_flag="cool-new-feature"
          ))
      - label: Go
        lang: Go
        source: |-
          templateOut, err := xwebhookClient.TransformationTemplate.Patch(ctx, "transformation_template_id", &TemplatePatch{
              InstructionsLink: nil,
              FilterTypes: []string{"user.signup", "user.deleted"},
              FeatureFlag: "cool-new-feature",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val templateOut = xwebhook.transformationTemplate.patch("transformation_template_id", TemplatePatch()
              .instructionsLink(null)
              .filterTypes(arrayOf("user.signup", "user.deleted"))
              .featureFlag("cool-new-feature")
          )
      - label: Java
        lang: Java
        source: |-
          TemplateOut templateOut = xwebhook.getTransformationTemplate().patch("transformation_template_id", new TemplatePatch()
              .instructionsLink(null)
              .filterTypes(new String[]{"user.signup", "user.deleted"})
              .featureFlag("cool-new-feature")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          template_out = xwebhook.transformation_template.patch("transformation_template_id", Xwebhook::TemplatePatch.new({
              "instructions_link": nil,
              "filter_types": ["user.signup", "user.deleted"],
              "feature_flag": "cool-new-feature"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let template_out = xwebhook.transformation_template().patch("transformation_template_id", TemplatePatch {
              instructions_link: None,
              filter_types: Some(vec!["user.signup".to_string(), "user.deleted".to_string()]),
              feature_flag: Some("cool-new-feature".to_string()),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var templateOut = await xwebhook.TransformationTemplate.PatchAsync("transformation_template_id", new TemplatePatch{
              instructionsLink: null,
              filterTypes: new string[] {"user.signup", "user.deleted"},
              featureFlag: "cool-new-feature"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook transformation-template patch "transformation_template_id" '{
              "instructionsLink": null,
              "filterTypes": ["user.signup", "user.deleted"],
              "featureFlag": "cool-new-feature"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PATCH' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template/{transformation_template_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "instructionsLink": null,
                  "filterTypes": ["user.signup", "user.deleted"],
                  "featureFlag": "cool-new-feature"
              }'
    put:
      description: Update a transformation template
      operationId: v1.transformation-template.update
      parameters:
      - explode: false
        in: path
        name: transformation_template_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateUpdate'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateOut'
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateOut'
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Bad request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Not Found
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Conflict
        "422":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
        "429":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HttpErrorOut'
          description: Too Many Requests
      security:
      - HTTPBearer: []
      summary: Update Transformation Template
      tags:
      - Transformation Template
      x-codeSamples:
      - label: JavaScript
        lang: JavaScript
        source: |-
          const templateOut = await xwebhook.transformationTemplate.update("transformation_template_id", {
              instructionsLink: null,
              filterTypes: ["user.signup", "user.deleted"],
              featureFlag: "cool-new-feature"
          });
      - label: TypeScript
        lang: JavaScript
        source: |-
          const templateOut = await xwebhook.transformationTemplate.update("transformation_template_id", {
              instructionsLink: null,
              filterTypes: ["user.signup", "user.deleted"],
              featureFlag: "cool-new-feature"
          });
      - label: Python
        lang: Python
        source: |-
          template_out = xwebhook.transformation_template.update("transformation_template_id", TemplateUpdate(
              instructions_link=None,
              filter_types=["user.signup", "user.deleted"],
              feature_flag="cool-new-feature"
          ))
      - label: Python (Async)
        lang: Python
        source: |-
          template_out = await xwebhook.transformation_template.update("transformation_template_id", TemplateUpdate(
              instructions_link=None,
              filter_types=["user.signup", "user.deleted"],
              feature_flag="cool-new-feature"
          ))
      - label: Go
        lang: Go
        source: |-
          templateOut, err := xwebhookClient.TransformationTemplate.Update(ctx, "transformation_template_id", &TemplateUpdate{
              InstructionsLink: nil,
              FilterTypes: []string{"user.signup", "user.deleted"},
              FeatureFlag: "cool-new-feature",
          })
      - label: Kotlin
        lang: Kotlin
        source: |-
          val templateOut = xwebhook.transformationTemplate.update("transformation_template_id", TemplateUpdate()
              .instructionsLink(null)
              .filterTypes(arrayOf("user.signup", "user.deleted"))
              .featureFlag("cool-new-feature")
          )
      - label: Java
        lang: Java
        source: |-
          TemplateOut templateOut = xwebhook.getTransformationTemplate().update("transformation_template_id", new TemplateUpdate()
              .instructionsLink(null)
              .filterTypes(new String[]{"user.signup", "user.deleted"})
              .featureFlag("cool-new-feature")
          )
      - label: Ruby
        lang: Ruby
        source: |-
          template_out = xwebhook.transformation_template.update("transformation_template_id", Xwebhook::TemplateUpdate.new({
              "instructions_link": nil,
              "filter_types": ["user.signup", "user.deleted"],
              "feature_flag": "cool-new-feature"
          }))
      - label: Rust
        lang: Rust
        source: |-
          let template_out = xwebhook.transformation_template().update("transformation_template_id", TemplateUpdate {
              instructions_link: None,
              filter_types: Some(vec!["user.signup".to_string(), "user.deleted".to_string()]),
              feature_flag: Some("cool-new-feature".to_string()),
          }).await?;
      - label: C#
        lang: C#
        source: |-
          var templateOut = await xwebhook.TransformationTemplate.UpdateAsync("transformation_template_id", new TemplateUpdate{
              instructionsLink: null,
              filterTypes: new string[] {"user.signup", "user.deleted"},
              featureFlag: "cool-new-feature"
          })
      - label: CLI
        lang: Shell
        source: |-
          xwebhook transformation-template update "transformation_template_id" '{
              "instructionsLink": null,
              "filterTypes": ["user.signup", "user.deleted"],
              "featureFlag": "cool-new-feature"
          }'
      - label: cURL
        lang: Shell
        source: |-
          curl -X 'PUT' \
            'https://api.webhook.openweb3.io/api/v1/transformation-template/{transformation_template_id}' \
            -H 'Authorization: Bearer AUTH_TOKEN' \
            -H 'Accept: application/json' \
            -H 'Content-Type: application/json' \
            -d '{
                  "instructionsLink": null,
                  "filterTypes": ["user.signup", "user.deleted"],
                  "featureFlag": "cool-new-feature"
              }'
components:
  schemas:
    AggregateEventTypesOut:
      example:
        id: id
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/BackgroundTaskStatus'
        task:
          $ref: '#/components/schemas/BackgroundTaskType'
      required:
      - id
      - status
      - task
      type: object
    AppPortalAccessIn:
      example:
        readOnly: true
        expiry: 51745
        featureFlags: []
      properties:
        expiry:
          default: 604800
          description: |-
            How long the token will be valid for, in seconds.

            Valid values are between 1 hour and 7 days. The default is 7 days.
          format: uint64
          maximum: 604800
          minimum: 3600
          nullable: true
          type: integer
        featureFlags:
          description: The set of feature flags the created token will have access
            to.
          example: []
          items:
            example: cool-new-feature
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          type: array
          uniqueItems: true
        readOnly:
          description: Whether the app portal should be in read-only mode.
          nullable: true
          type: boolean
      type: object
    AppPortalAccessOut:
      example:
        url: https://app.webhook.openweb3.io/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl
        token: appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O
      properties:
        token:
          example: appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O
          type: string
        url:
          example: https://app.webhook.openweb3.io/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
      required:
      - token
      - url
      type: object
    AppUsageStatsIn:
      example:
        appIds:
        - unique-app-identifier
        - unique-app-identifier
        until: 2000-01-23T04:56:07.000+00:00
        since: 2000-01-23T04:56:07.000+00:00
      properties:
        appIds:
          items:
            description: The app's ID or UID
            example: unique-app-identifier
            maxLength: 256
            minLength: 1
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        since:
          format: date-time
          type: string
        until:
          format: date-time
          type: string
      required:
      - since
      - until
      type: object
    AppUsageStatsOut:
      example:
        id: id
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/BackgroundTaskStatus'
        task:
          $ref: '#/components/schemas/BackgroundTaskType'
      required:
      - id
      - status
      - task
      type: object
    ApplicationIn:
      example:
        uid: unique-app-identifier
        metadata:
          key: metadata
        rateLimit: 1
        name: My first application
        description: This is my first application
      properties:
        metadata:
          additionalProperties:
            type: string
          default: {}
          type: object
        name:
          example: My first application
          minLength: 1
          type: string
        rateLimit:
          format: uint16
          minimum: 1
          nullable: true
          type: integer
        uid:
          description: Optional unique identifier for the application
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        description:
          description: The application description
          example: This is my first application
          maxLength: 256
          minLength: 1
          nullable: true
          type: string
      required:
      - name
      type: object
    ApplicationOut:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        uid: unique-app-identifier
        metadata:
          key: metadata
        rateLimit: 0
        name: My first application
        id: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          description: The app's ID
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
        name:
          example: My first application
          type: string
        rateLimit:
          format: uint16
          minimum: 0
          nullable: true
          type: integer
        uid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - metadata
      - name
      - updatedAt
      type: object
    ApplicationPatch:
      example:
        uid: unique-app-identifier
        metadata:
          key: metadata
        rateLimit: 0
        name: name
      properties:
        metadata:
          additionalProperties:
            type: string
          type: object
        name:
          type: string
        rateLimit:
          format: uint16
          minimum: 0
          nullable: true
          type: integer
        uid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
      type: object
    ApplicationStats:
      example:
        messageDestinations: 0
        appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
        appUid: unique-app-identifier
      properties:
        appId:
          description: The app's ID
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        appUid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        messageDestinations:
          format: int
          type: integer
      required:
      - appId
      - messageDestinations
      type: object
    ApplicationTokenExpireIn:
      example:
        expiry: 60
      properties:
        expiry:
          description: How many seconds until the old key is expired.
          example: 60
          format: int64
          maximum: 259200
          minimum: 0
          nullable: true
          type: integer
      type: object
    AttemptStatisticsData:
      example:
        successCount:
        - 6
        - 6
        failureCount:
        - 0
        - 0
      properties:
        failureCount:
          items:
            format: int
            type: integer
          nullable: true
          type: array
        successCount:
          items:
            format: int
            type: integer
          nullable: true
          type: array
      type: object
    AttemptStatisticsResponse:
      example:
        data:
          successCount:
          - 6
          - 6
          failureCount:
          - 0
          - 0
        endDate: 2000-01-23T04:56:07.000+00:00
        startDate: 2000-01-23T04:56:07.000+00:00
      properties:
        data:
          $ref: '#/components/schemas/AttemptStatisticsData'
        endDate:
          format: date-time
          type: string
        period:
          $ref: '#/components/schemas/StatisticsPeriod'
        startDate:
          format: date-time
          type: string
      required:
      - data
      - endDate
      - period
      - startDate
      type: object
    BackgroundTaskData:
      type: object
    BackgroundTaskOut:
      example:
        data: '{}'
        id: id
      properties:
        data:
          type: object
        id:
          type: string
        status:
          $ref: '#/components/schemas/BackgroundTaskStatus'
        task:
          $ref: '#/components/schemas/BackgroundTaskType'
      required:
      - data
      - id
      - status
      - task
      type: object
    BackgroundTaskStatus:
      enum:
      - running
      - finished
      - failed
      type: string
    BackgroundTaskType:
      enum:
      - endpoint.replay
      - endpoint.recover
      - application.stats
      - message.broadcast
      - sdk.generate
      - event-type.aggregate
      type: string
    BorderRadiusConfig:
      example: {}
      properties:
        button:
          $ref: '#/components/schemas/BorderRadiusEnum'
        card:
          $ref: '#/components/schemas/BorderRadiusEnum'
        input:
          $ref: '#/components/schemas/BorderRadiusEnum'
      type: object
    BorderRadiusEnum:
      enum:
      - none
      - lg
      - md
      - sm
      - full
      type: string
    ClientSecretJwtParamsIn:
      example:
        secretBase64: secretBase64
        tokenExpirySecs: 0
        secretId: secretId
      properties:
        secretBase64:
          description: The base64-encoded secret used for signing the JWT.
          type: string
        secretId:
          description: Optional secret identifier. If supplied, this will be populated
            in the JWT header in the `kid` field.
          nullable: true
          type: string
        signingAlgorithm:
          $ref: '#/components/schemas/OauthJwsSigningAlgorithm'
        tokenExpirySecs:
          description: Optional number of seconds after which the JWT should expire.
            Defaults to 300 seconds.
          format: uint64
          minimum: 0
          nullable: true
          type: integer
      required:
      - secretBase64
      - signingAlgorithm
      type: object
    CompletionChoice:
      example:
        finish_reason: finish_reason
        index: 0
        message:
          role: role
          content: content
      properties:
        finish_reason:
          type: string
        index:
          format: int64
          type: integer
        message:
          $ref: '#/components/schemas/CompletionMessage'
      required:
      - finish_reason
      - index
      - message
      type: object
    CompletionMessage:
      example:
        role: role
        content: content
      properties:
        content:
          type: string
        role:
          type: string
      required:
      - content
      - role
      type: object
    CustomColorPalette:
      example:
        backgroundHover: backgroundHover
        navigationAccent: navigationAccent
        buttonPrimary: buttonPrimary
        backgroundSecondary: backgroundSecondary
        interactiveAccent: interactiveAccent
        textPrimary: textPrimary
        textDanger: textDanger
        backgroundPrimary: backgroundPrimary
        primary: primary
      properties:
        backgroundHover:
          format: color
          nullable: true
          type: string
        backgroundPrimary:
          format: color
          nullable: true
          type: string
        backgroundSecondary:
          format: color
          nullable: true
          type: string
        buttonPrimary:
          format: color
          nullable: true
          type: string
        interactiveAccent:
          format: color
          nullable: true
          type: string
        navigationAccent:
          format: color
          nullable: true
          type: string
        primary:
          format: color
          nullable: true
          type: string
        textDanger:
          format: color
          nullable: true
          type: string
        textPrimary:
          format: color
          nullable: true
          type: string
      type: object
    CustomThemeOverride:
      example:
        borderRadius: {}
        fontSize:
          base: 0
      properties:
        borderRadius:
          $ref: '#/components/schemas/BorderRadiusConfig'
        fontSize:
          $ref: '#/components/schemas/FontSizeConfig'
      type: object
    DashboardAccessOut:
      example:
        url: https://app.webhook.openweb3.io/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl
        token: appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O
      properties:
        token:
          example: appsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O
          type: string
        url:
          example: https://app.webhook.openweb3.io/login#key=eyJhcHBJZCI6ICJhcHBfMXRSdFl
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
      required:
      - token
      - url
      type: object
    Duration:
      example:
        nanos: 0
        secs: 0
      properties:
        nanos:
          format: uint32
          minimum: 0
          type: integer
        secs:
          format: uint64
          minimum: 0
          type: integer
      required:
      - nanos
      - secs
      type: object
    EndpointCreatedEvent:
      description: Sent when an endpoint is created.
      properties:
        data:
          $ref: '#/components/schemas/EndpointCreatedEventData'
        type:
          default: endpoint.created
          enum:
          - endpoint.created
          type: string
      required:
      - data
      - type
      type: object
    EndpointCreatedEventData:
      properties:
        appId:
          description: The app's ID
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        appUid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        endpointId:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        endpointUid:
          description: The ep's UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
      required:
      - appId
      - endpointId
      type: object
    EndpointDeletedEvent:
      description: Sent when an endpoint is deleted.
      properties:
        data:
          $ref: '#/components/schemas/EndpointDeletedEventData'
        type:
          default: endpoint.deleted
          enum:
          - endpoint.deleted
          type: string
      required:
      - data
      - type
      type: object
    EndpointDeletedEventData:
      properties:
        appId:
          description: The app's ID
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        appUid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        endpointId:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        endpointUid:
          description: The ep's UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
      required:
      - appId
      - endpointId
      type: object
    EndpointDisabledEvent:
      description: Sent when an endpoint has been automatically disabled after continuous
        failures.
      properties:
        data:
          $ref: '#/components/schemas/EndpointDisabledEventData'
        type:
          default: endpoint.disabled
          enum:
          - endpoint.disabled
          type: string
      required:
      - data
      - type
      type: object
    EndpointDisabledEventData:
      description: Sent when an endpoint has been automatically disabled after continuous
        failures.
      properties:
        appId:
          description: The app's ID
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        appUid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        endpointId:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        endpointUid:
          description: The ep's UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        failSince:
          format: date-time
          type: string
      required:
      - appId
      - endpointId
      - failSince
      type: object
    EndpointHeadersIn:
      example:
        headers:
          X-Example: "123"
          X-Foobar: Bar
      properties:
        headers:
          additionalProperties:
            type: string
          example:
            X-Example: "123"
            X-Foobar: Bar
          type: object
      required:
      - headers
      type: object
    EndpointHeadersOut:
      description: |-
        The value of the headers is returned in the `headers` field.

        Sensitive headers that have been redacted are returned in the sensitive field.
      example:
        headers:
          X-Example: "123"
          X-Foobar: Bar
        sensitive:
        - Authorization
      properties:
        headers:
          additionalProperties:
            type: string
          example:
            X-Example: "123"
            X-Foobar: Bar
          type: object
        sensitive:
          example:
          - Authorization
          items:
            type: string
          type: array
          uniqueItems: true
      required:
      - headers
      - sensitive
      type: object
    EndpointHeadersPatchIn:
      example:
        headers:
          X-Example: "123"
          X-Foobar: Bar
      properties:
        headers:
          additionalProperties:
            type: string
          example:
            X-Example: "123"
            X-Foobar: Bar
          type: object
      required:
      - headers
      type: object
    EndpointIn:
      example:
        headers:
          X-Example: "123"
          X-Foobar: Bar
        uid: unique-ep-identifier
        metadata:
          key: metadata
        rateLimit: 1
        channels:
        - project_123
        - group_2
        description: An example endpoint name
        disabled: false
        payloadRules:
          type: tx.created
          chain: ton
          amount:
            $gt: "400"
        secret: whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD
        filterTypes:
        - user.signup
        - user.deleted
        version: 1
        url: https://example.com/webhook/
      properties:
        channels:
          description: List of message channels this endpoint listens to (omit for
            all)
          example:
          - project_123
          - group_2
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          maxItems: 10
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        description:
          default: ""
          example: An example endpoint name
          type: string
        disabled:
          default: false
          example: false
          type: boolean
        filterTypes:
          example:
          - user.signup
          - user.deleted
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        metadata:
          additionalProperties:
            type: string
          default: {}
          type: object
        headers:
          additionalProperties:
            type: string
          example:
            X-Example: "123"
            X-Foobar: Bar
          type: object
        payloadRules:
          additionalProperties:
            type: object
          description: The filter rules for the message payload.
          example:
            type: tx.created
            chain: ton
            amount:
              $gt: "400"
          nullable: true
          type: object
        rateLimit:
          format: uint16
          minimum: 1
          nullable: true
          type: integer
        secret:
          description: 'The endpoint''s verification secret. If `null` is passed,
            a secret is automatically generated. Format: `base64` encoded random bytes
            optionally prefixed with `whsec_`. Recommended size: 24.'
          example: whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD
          nullable: true
          pattern: ^(whsec_)?[a-zA-Z0-9+/=]{32,100}$
          type: string
        uid:
          description: Optional unique identifier for the endpoint
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        url:
          example: https://example.com/webhook/
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
        version:
          default: 1
          deprecated: true
          example: 1
          format: uint16
          minimum: 1
          nullable: true
          type: integer
      required:
      - url
      type: object
    EndpointMessageOut:
      description: A model containing information on a given message plus additional
        fields on the last attempt for that message.
      example:
        eventId: unique-msg-identifier
        channels:
        - project_123
        - group_2
        payload:
          email: test@example.com
          type: user.created
          username: test_user
        eventType: user.signup
        id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
        nextAttempt: 2000-01-23T04:56:07.000+00:00
        tags:
        - project_1337
        - project_1337
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        channels:
          description: List of free-form identifiers that endpoints can filter by
          example:
          - project_123
          - group_2
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          maxItems: 5
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        eventId:
          description: Optional unique identifier for the message
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        eventType:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        id:
          description: The msg's ID
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        nextAttempt:
          format: date-time
          nullable: true
          type: string
        payload:
          example:
            email: test@example.com
            type: user.created
            username: test_user
          type: object
        status:
          $ref: '#/components/schemas/MessageStatus'
        tags:
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        timestamp:
          format: date-time
          type: string
      required:
      - eventType
      - id
      - payload
      - status
      - timestamp
      type: object
    EndpointMtlsConfigIn:
      example:
        caCert: caCert
        identity: identity
      properties:
        caCert:
          description: A PEM encoded X509 certificate used to verify the webhook receiver's
            certificate.
          type: string
        identity:
          description: A PEM encoded private key and X509 certificate to identify
            the webhook sender.
          type: string
      required:
      - caCert
      - identity
      type: object
    EndpointOauthConfigIn:
      example:
        clientId: clientId
        tokenUrl: https://openapi-generator.tech
        jwtParams:
          secretBase64: secretBase64
          tokenExpirySecs: 0
          secretId: secretId
        clientSecret: clientSecret
        extraParams:
          key: extraParams
        scopes:
        - scopes
        - scopes
        refreshToken: refreshToken
      properties:
        authMethod:
          $ref: '#/components/schemas/Oauth2AuthMethodIn'
        clientId:
          description: The client ID. Required for all authentication types.
          type: string
        clientSecret:
          description: |-
            Optional client secret. This is only used for `clientSecretBasic` and `clientSecretPost`.

            For `clientSecretBasic`, the secret will be appended to the `Authorization` header. For `clientSecretPost`, this will be added to the body in a `client_secret` parameter.
          nullable: true
          type: string
        extraParams:
          additionalProperties:
            type: string
          description: Extra parameters added to the request body as key-value pairs.
          nullable: true
          type: object
        grantType:
          $ref: '#/components/schemas/Oauth2GrantTypeIn'
        jwtParams:
          $ref: '#/components/schemas/ClientSecretJwtParamsIn'
        refreshToken:
          description: For `refreshToken` grant type
          nullable: true
          type: string
        scopes:
          description: Optional OAuth scopes added to the request body.
          items:
            type: string
          nullable: true
          type: array
        tokenUrl:
          description: The URL of the authorization server.
          format: uri
          type: string
      required:
      - authMethod
      - clientId
      - grantType
      - tokenUrl
      type: object
    EndpointOut:
      example:
        headers:
          X-Example: "123"
          X-Foobar: Bar
        metadata:
          X-Example: "123"
          X-Foobar: Bar
        rateLimit: 0
        description: description
        version: 1
        url: https://example.com/webhook/
        createdAt: 2000-01-23T04:56:07.000+00:00
        uid: unique-ep-identifier
        channels:
        - project_123
        - group_2
        disabled: false
        payloadRules:
          type: tx.created
          chain: ton
          amount:
            $gt: "400"
        id: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
        filterTypes:
        - user.signup
        - user.deleted
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        channels:
          description: List of message channels this endpoint listens to (omit for
            all)
          example:
          - project_123
          - group_2
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          maxItems: 10
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        createdAt:
          format: date-time
          type: string
        description:
          description: An example endpoint name
          type: string
        disabled:
          default: false
          example: false
          type: boolean
        filterTypes:
          example:
          - user.signup
          - user.deleted
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        id:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        metadata:
          additionalProperties:
            type: string
          example:
            X-Example: "123"
            X-Foobar: Bar
          type: object
        headers:
          additionalProperties:
            type: string
          example:
            X-Example: "123"
            X-Foobar: Bar
          type: object
        payloadRules:
          additionalProperties:
            type: object
          description: The filter rules for the message payload.
          example:
            type: tx.created
            chain: ton
            amount:
              $gt: "400"
          nullable: true
          type: object
        rateLimit:
          format: uint16
          minimum: 0
          nullable: true
          type: integer
        uid:
          description: Optional unique identifier for the endpoint
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        updatedAt:
          format: date-time
          type: string
        url:
          example: https://example.com/webhook/
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
        version:
          deprecated: true
          example: 1
          format: int32
          minimum: 1
          type: integer
      required:
      - createdAt
      - description
      - id
      - metadata
      - updatedAt
      - url
      - version
      type: object
    EndpointPatch:
      example:
        headers:
          X-Example: "123"
          X-Foobar: Bar
        uid: unique-ep-identifier
        metadata:
          X-Example: "123"
          X-Foobar: Bar
        rateLimit: 0
        channels:
        - project_1337
        - project_1337
        description: description
        disabled: true
        payloadRules:
          type: tx.created
          chain: ton
          amount:
            $gt: "400"
        secret: whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD
        filterTypes:
        - user.signup
        - user.signup
        version: 1
        url: https://openapi-generator.tech
      properties:
        channels:
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        description:
          type: string
        disabled:
          type: boolean
        filterTypes:
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        metadata:
          additionalProperties:
            type: string
          example:
            X-Example: "123"
            X-Foobar: Bar
          type: object
        headers:
          additionalProperties:
            type: string
          example:
            X-Example: "123"
            X-Foobar: Bar
          type: object
        payloadRules:
          additionalProperties:
            type: object
          description: The filter rules for the message payload.
          example:
            type: tx.created
            chain: ton
            amount:
              $gt: "400"
          nullable: true
          type: object
        rateLimit:
          format: uint16
          minimum: 0
          nullable: true
          type: integer
        secret:
          description: 'The endpoint''s verification secret. If `null` is passed,
            a secret is automatically generated. Format: `base64` encoded random bytes
            optionally prefixed with `whsec_`. Recommended size: 24.'
          example: whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD
          nullable: true
          pattern: ^(whsec_)?[a-zA-Z0-9+/=]{32,100}$
          type: string
        uid:
          description: The ep's UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        url:
          format: uri
          type: string
        version:
          deprecated: true
          example: 1
          format: uint16
          minimum: 1
          type: integer
      type: object
    EndpointSecretOut:
      example:
        key: whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD
      properties:
        key:
          description: 'The endpoint''s verification secret. If `null` is passed,
            a secret is automatically generated. Format: `base64` encoded random bytes
            optionally prefixed with `whsec_`. Recommended size: 24.'
          example: whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD
          pattern: ^(whsec_)?[a-zA-Z0-9+/=]{32,100}$
          type: string
      required:
      - key
      type: object
    EndpointSecretRotateIn:
      example:
        key: whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD
      properties:
        key:
          description: 'The endpoint''s verification secret. If `null` is passed,
            a secret is automatically generated. Format: `base64` encoded random bytes
            optionally prefixed with `whsec_`. Recommended size: 24.'
          example: whsec_C2FVsBQIhrscChlQIMV+b5sSYspob7oD
          nullable: true
          pattern: ^(whsec_)?[a-zA-Z0-9+/=]{32,100}$
          type: string
      type: object
    EndpointStats:
      example:
        fail: 0
        success: 5
        pending: 6
        sending: 1
      properties:
        fail:
          format: int64
          type: integer
        pending:
          format: int64
          type: integer
        sending:
          format: int64
          type: integer
        success:
          format: int64
          type: integer
      required:
      - fail
      - pending
      - sending
      - success
      type: object
    EndpointTransformationIn:
      example:
        code: code
        enabled: true
      properties:
        code:
          maxLength: 51200
          minLength: 10
          nullable: true
          type: string
        enabled:
          type: boolean
      type: object
    EndpointTransformationOut:
      example:
        code: code
        enabled: false
      properties:
        code:
          maxLength: 51200
          minLength: 10
          nullable: true
          type: string
        enabled:
          default: false
          type: boolean
      type: object
    EndpointTransformationSimulateIn:
      example:
        code: code
        channels:
        - project_1337
        - project_1337
        payload: '{}'
        eventType: user.signup
      properties:
        channels:
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        code:
          maxLength: 51200
          minLength: 10
          type: string
        eventType:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        payload:
          type: object
      required:
      - code
      - eventType
      - payload
      type: object
    EndpointTransformationSimulateOut:
      example:
        payload: payload
        url: https://openapi-generator.tech
      properties:
        method:
          $ref: '#/components/schemas/TransformationHttpMethod'
        payload:
          type: string
        url:
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
      required:
      - payload
      - url
      type: object
    EndpointUpdate:
      example:
        uid: unique-ep-identifier
        metadata:
          key: metadata
        rateLimit: 1
        channels:
        - project_123
        - group_2
        description: An example endpoint name
        disabled: false
        filterTypes:
        - user.signup
        - user.deleted
        version: 1
        url: https://example.com/webhook/
      properties:
        channels:
          description: List of message channels this endpoint listens to (omit for
            all)
          example:
          - project_123
          - group_2
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          maxItems: 10
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        description:
          default: ""
          example: An example endpoint name
          type: string
        disabled:
          default: false
          example: false
          type: boolean
        filterTypes:
          example:
          - user.signup
          - user.deleted
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        metadata:
          additionalProperties:
            type: string
          default: {}
          type: object
        rateLimit:
          format: uint16
          minimum: 1
          nullable: true
          type: integer
        uid:
          description: Optional unique identifier for the endpoint
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        url:
          example: https://example.com/webhook/
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
        version:
          default: 1
          deprecated: true
          example: 1
          format: uint16
          minimum: 1
          nullable: true
          type: integer
      required:
      - url
      type: object
    EndpointUpdatedEvent:
      description: Sent when an endpoint is updated.
      properties:
        data:
          $ref: '#/components/schemas/EndpointUpdatedEventData'
        type:
          default: endpoint.updated
          enum:
          - endpoint.updated
          type: string
      required:
      - data
      - type
      type: object
    EndpointUpdatedEventData:
      properties:
        appId:
          description: The app's ID
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        appUid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        endpointId:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        endpointUid:
          description: The ep's UID
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
      required:
      - appId
      - endpointId
      type: object
    EnvironmentIn:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        settings:
          showUseXwebhookPlay: true
          displayName: displayName
          customThemeOverride:
            borderRadius: {}
            fontSize:
              base: 0
          eventCatalogPublished: false
          enableIntegrationManagement: false
          readOnly: false
          customFontFamily: Open Sans
          colorPaletteDark:
            backgroundHover: backgroundHover
            navigationAccent: navigationAccent
            buttonPrimary: buttonPrimary
            backgroundSecondary: backgroundSecondary
            interactiveAccent: interactiveAccent
            textPrimary: textPrimary
            textDanger: textDanger
            backgroundPrimary: backgroundPrimary
            primary: primary
          enableChannels: false
          disableEndpointOnFailure: true
          customColor: customColor
          enforceHttps: true
          enableTransformations: false
          customBaseFontSize: 0
          customFontFamilyUrl: https://openapi-generator.tech
          customLogoUrl: https://openapi-generator.tech
          colorPaletteLight:
            backgroundHover: backgroundHover
            navigationAccent: navigationAccent
            buttonPrimary: buttonPrimary
            backgroundSecondary: backgroundSecondary
            interactiveAccent: interactiveAccent
            textPrimary: textPrimary
            textDanger: textDanger
            backgroundPrimary: backgroundPrimary
            primary: primary
        eventTypes:
        - archived: false
          featureFlag: cool-new-feature
          schemas:
            "1":
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
          name: user.signup
          description: A user has signed up
        - archived: false
          featureFlag: cool-new-feature
          schemas:
            "1":
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
          name: user.signup
          description: A user has signed up
        version: 6
      properties:
        createdAt:
          format: date-time
          type: string
        eventTypes:
          items:
            $ref: '#/components/schemas/EventTypeIn'
          nullable: true
          type: array
        settings:
          $ref: '#/components/schemas/SettingsIn'
        version:
          format: int
          type: integer
      required:
      - createdAt
      - version
      type: object
    EnvironmentOut:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        settings:
          showUseXwebhookPlay: true
          displayName: displayName
          customThemeOverride:
            borderRadius: {}
            fontSize:
              base: 0
          eventCatalogPublished: false
          enableIntegrationManagement: false
          readOnly: false
          customFontFamily: Open Sans
          colorPaletteDark:
            backgroundHover: backgroundHover
            navigationAccent: navigationAccent
            buttonPrimary: buttonPrimary
            backgroundSecondary: backgroundSecondary
            interactiveAccent: interactiveAccent
            textPrimary: textPrimary
            textDanger: textDanger
            backgroundPrimary: backgroundPrimary
            primary: primary
          enableChannels: false
          disableEndpointOnFailure: true
          customColor: customColor
          enforceHttps: true
          enableTransformations: false
          customBaseFontSize: 0
          customFontFamilyUrl: https://openapi-generator.tech
          customLogoUrl: https://openapi-generator.tech
          colorPaletteLight:
            backgroundHover: backgroundHover
            navigationAccent: navigationAccent
            buttonPrimary: buttonPrimary
            backgroundSecondary: backgroundSecondary
            interactiveAccent: interactiveAccent
            textPrimary: textPrimary
            textDanger: textDanger
            backgroundPrimary: backgroundPrimary
            primary: primary
        eventTypes:
        - archived: false
          createdAt: 2000-01-23T04:56:07.000+00:00
          featureFlag: cool-new-feature
          schemas:
            "1":
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
          name: user.signup
          description: A user has signed up
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - archived: false
          createdAt: 2000-01-23T04:56:07.000+00:00
          featureFlag: cool-new-feature
          schemas:
            "1":
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
          name: user.signup
          description: A user has signed up
          updatedAt: 2000-01-23T04:56:07.000+00:00
        version: 1
      properties:
        createdAt:
          format: date-time
          type: string
        eventTypes:
          items:
            $ref: '#/components/schemas/EventTypeOut'
          type: array
        settings:
          $ref: '#/components/schemas/SettingsOut'
        version:
          default: 1
          format: int
          type: integer
      required:
      - createdAt
      - eventTypes
      type: object
    EnvironmentSettingsOut:
      example:
        showUseXwebhookPlay: true
        enableMessageTags: false
        displayName: displayName
        customThemeOverride:
          borderRadius: {}
          fontSize:
            base: 0
        enableIntegrationManagement: false
        customFontFamily: Open Sans
        colorPaletteDark:
          backgroundHover: backgroundHover
          navigationAccent: navigationAccent
          buttonPrimary: buttonPrimary
          backgroundSecondary: backgroundSecondary
          interactiveAccent: interactiveAccent
          textPrimary: textPrimary
          textDanger: textDanger
          backgroundPrimary: backgroundPrimary
          primary: primary
        enableChannels: false
        customColor: customColor
        enableTransformations: false
        customFontFamilyUrl: https://openapi-generator.tech
        customLogoUrl: https://openapi-generator.tech
        colorPaletteLight:
          backgroundHover: backgroundHover
          navigationAccent: navigationAccent
          buttonPrimary: buttonPrimary
          backgroundSecondary: backgroundSecondary
          interactiveAccent: interactiveAccent
          textPrimary: textPrimary
          textDanger: textDanger
          backgroundPrimary: backgroundPrimary
          primary: primary
      properties:
        colorPaletteDark:
          $ref: '#/components/schemas/CustomColorPalette'
        colorPaletteLight:
          $ref: '#/components/schemas/CustomColorPalette'
        customColor:
          format: color
          nullable: true
          type: string
        customFontFamily:
          example: Open Sans
          nullable: true
          pattern: ^[a-zA-Z0-9\-_ ]+$
          type: string
        customFontFamilyUrl:
          format: uri
          maxLength: 65536
          minLength: 1
          nullable: true
          type: string
        customLogoUrl:
          format: uri
          maxLength: 65536
          minLength: 1
          nullable: true
          type: string
        customThemeOverride:
          $ref: '#/components/schemas/CustomThemeOverride'
        displayName:
          nullable: true
          type: string
        enableChannels:
          default: false
          type: boolean
        enableIntegrationManagement:
          default: false
          type: boolean
        enableMessageTags:
          default: false
          type: boolean
        enableTransformations:
          default: false
          type: boolean
        showUseXwebhookPlay:
          default: true
          type: boolean
      type: object
    EventExampleIn:
      example:
        eventType: user.signup
      properties:
        eventType:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
      required:
      - eventType
      type: object
    EventTypeExampleOut:
      example:
        example:
          data:
            email: test@example.com
            username: test_user
          type: user.created
      properties:
        example:
          additionalProperties:
            type: object
          example:
            data:
              email: test@example.com
              username: test_user
            type: user.created
          type: object
      required:
      - example
      type: object
    EventTypeFromOpenApi:
      example:
        schemas:
          description: An invoice was paid by a user
          properties:
            invoiceId:
              description: The invoice id
              type: string
            userId:
              description: The user id
              type: string
          required:
          - invoiceId
          - userId
          title: Invoice Paid Event
          type: object
        name: user.signup
        description: description
      properties:
        description:
          type: string
        name:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        schemas:
          additionalProperties:
            type: object
          example:
            description: An invoice was paid by a user
            properties:
              invoiceId:
                description: The invoice id
                type: string
              userId:
                description: The user id
                type: string
            required:
            - invoiceId
            - userId
            title: Invoice Paid Event
            type: object
          nullable: true
          type: object
      required:
      - description
      - name
      type: object
    EventTypeImportOpenApiIn:
      description: |-
        Import a list of event types from webhooks defined in an OpenAPI spec.

        The OpenAPI spec can be specified as either `spec` given the spec as a JSON object, or as `specRaw` (a `string`) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a `400` **Bad Request**.
      example:
        specRaw: '{"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information
          about a new pet in the system"},"responses":{"200":{"description":"Return
          a 200 status to indicate that the data was received successfully"}}}}}}'
        dry_run: false
        spec:
          info:
            title: Webhook Example
            version: 1.0.0
          openapi: 3.1.0
          webhooks:
            pet.new:
              post:
                requestBody:
                  content:
                    application/json:
                      schema:
                        properties:
                          id:
                            format: int64
                            type: integer
                          name:
                            type: string
                          tag:
                            type: string
                        required:
                        - id
                        - name
                  description: Information about a new pet in the system
                responses:
                  "200":
                    description: Return a 200 status to indicate that the data was
                      received successfully
      properties:
        dry_run:
          default: false
          description: If `true`, return the event types that would be modified without
            actually modifying them.
          type: boolean
        spec:
          additionalProperties:
            type: object
          description: A pre-parsed JSON spec.
          example:
            info:
              title: Webhook Example
              version: 1.0.0
            openapi: 3.1.0
            webhooks:
              pet.new:
                post:
                  requestBody:
                    content:
                      application/json:
                        schema:
                          properties:
                            id:
                              format: int64
                              type: integer
                            name:
                              type: string
                            tag:
                              type: string
                          required:
                          - id
                          - name
                    description: Information about a new pet in the system
                  responses:
                    "200":
                      description: Return a 200 status to indicate that the data was
                        received successfully
          nullable: true
          type: object
        specRaw:
          description: A string, parsed by the server as YAML or JSON.
          example: '{"info":{"title":"Webhook Example","version":"1.0.0"},"openapi":"3.1.0","webhooks":{"pet.new":{"post":{"requestBody":{"content":{"application/json":{"schema":{"properties":{"id":{"format":"int64","type":"integer"},"name":{"type":"string"},"tag":{"type":"string"}},"required":["id","name"]}}},"description":"Information
            about a new pet in the system"},"responses":{"200":{"description":"Return
            a 200 status to indicate that the data was received successfully"}}}}}}'
          nullable: true
          type: string
      type: object
    EventTypeImportOpenApiOut:
      example:
        data:
          modified:
          - user.signup
          - user.signup
          to_modify:
          - schemas:
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
            name: user.signup
            description: description
          - schemas:
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
            name: user.signup
            description: description
      properties:
        data:
          $ref: '#/components/schemas/EventTypeImportOpenApiOutData'
      required:
      - data
      type: object
    EventTypeImportOpenApiOutData:
      example:
        modified:
        - user.signup
        - user.signup
        to_modify:
        - schemas:
            description: An invoice was paid by a user
            properties:
              invoiceId:
                description: The invoice id
                type: string
              userId:
                description: The user id
                type: string
            required:
            - invoiceId
            - userId
            title: Invoice Paid Event
            type: object
          name: user.signup
          description: description
        - schemas:
            description: An invoice was paid by a user
            properties:
              invoiceId:
                description: The invoice id
                type: string
              userId:
                description: The user id
                type: string
            required:
            - invoiceId
            - userId
            title: Invoice Paid Event
            type: object
          name: user.signup
          description: description
      properties:
        modified:
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          type: array
        to_modify:
          items:
            $ref: '#/components/schemas/EventTypeFromOpenApi'
          nullable: true
          type: array
      required:
      - modified
      type: object
    EventTypeIn:
      example:
        archived: false
        featureFlag: cool-new-feature
        schemas:
          "1":
            description: An invoice was paid by a user
            properties:
              invoiceId:
                description: The invoice id
                type: string
              userId:
                description: The user id
                type: string
            required:
            - invoiceId
            - userId
            title: Invoice Paid Event
            type: object
        name: user.signup
        description: A user has signed up
      properties:
        archived:
          default: false
          example: false
          type: boolean
        description:
          example: A user has signed up
          type: string
        featureFlag:
          example: cool-new-feature
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        name:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        schemas:
          additionalProperties:
            type: object
          description: The schema for the event type for a specific version as a JSON
            schema.
          example:
            "1":
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
          nullable: true
          type: object
      required:
      - description
      - name
      type: object
    EventTypeOut:
      example:
        archived: false
        createdAt: 2000-01-23T04:56:07.000+00:00
        featureFlag: cool-new-feature
        schemas:
          "1":
            description: An invoice was paid by a user
            properties:
              invoiceId:
                description: The invoice id
                type: string
              userId:
                description: The user id
                type: string
            required:
            - invoiceId
            - userId
            title: Invoice Paid Event
            type: object
        name: user.signup
        description: A user has signed up
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        archived:
          default: false
          example: false
          type: boolean
        createdAt:
          format: date-time
          type: string
        description:
          example: A user has signed up
          type: string
        featureFlag:
          example: cool-new-feature
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        name:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        schemas:
          additionalProperties:
            type: object
          description: The schema for the event type for a specific version as a JSON
            schema.
          example:
            "1":
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
          nullable: true
          type: object
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - description
      - name
      - updatedAt
      type: object
    EventTypePatch:
      example:
        archived: true
        featureFlag: cool-new-feature
        schemas:
          description: An invoice was paid by a user
          properties:
            invoiceId:
              description: The invoice id
              type: string
            userId:
              description: The user id
              type: string
          required:
          - invoiceId
          - userId
          title: Invoice Paid Event
          type: object
        description: description
      properties:
        archived:
          type: boolean
        description:
          type: string
        featureFlag:
          example: cool-new-feature
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        schemas:
          additionalProperties:
            type: object
          example:
            description: An invoice was paid by a user
            properties:
              invoiceId:
                description: The invoice id
                type: string
              userId:
                description: The user id
                type: string
            required:
            - invoiceId
            - userId
            title: Invoice Paid Event
            type: object
          nullable: true
          type: object
      type: object
    EventTypeSchemaIn:
      example:
        schema:
          description: An invoice was paid by a user
          properties:
            invoiceId:
              description: The invoice id
              type: string
            userId:
              description: The user id
              type: string
          required:
          - invoiceId
          - userId
          title: Invoice Paid Event
          type: object
      properties:
        schema:
          example:
            description: An invoice was paid by a user
            properties:
              invoiceId:
                description: The invoice id
                type: string
              userId:
                description: The user id
                type: string
            required:
            - invoiceId
            - userId
            title: Invoice Paid Event
            type: object
          type: object
      required:
      - schema
      type: object
    EventTypeUpdate:
      example:
        archived: false
        featureFlag: cool-new-feature
        schemas:
          "1":
            description: An invoice was paid by a user
            properties:
              invoiceId:
                description: The invoice id
                type: string
              userId:
                description: The user id
                type: string
            required:
            - invoiceId
            - userId
            title: Invoice Paid Event
            type: object
        description: A user has signed up
      properties:
        archived:
          default: false
          example: false
          type: boolean
        description:
          example: A user has signed up
          type: string
        featureFlag:
          example: cool-new-feature
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        schemas:
          additionalProperties:
            type: object
          description: The schema for the event type for a specific version as a JSON
            schema.
          example:
            "1":
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
          nullable: true
          type: object
      required:
      - description
      type: object
    ExportEventTypeOut:
      example:
        id: id
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/BackgroundTaskStatus'
        task:
          $ref: '#/components/schemas/BackgroundTaskType'
      required:
      - id
      - status
      - task
      type: object
    FontSizeConfig:
      example:
        base: 0
      properties:
        base:
          format: uint16
          minimum: 0
          nullable: true
          type: integer
      type: object
    GenerateIn:
      example:
        prompt: prompt
      properties:
        prompt:
          type: string
      required:
      - prompt
      type: object
    GenerateOut:
      example:
        created: 6
        model: model
        id: id
        choices:
        - finish_reason: finish_reason
          index: 0
          message:
            role: role
            content: content
        - finish_reason: finish_reason
          index: 0
          message:
            role: role
            content: content
        object: object
      properties:
        choices:
          items:
            $ref: '#/components/schemas/CompletionChoice'
          type: array
        created:
          format: int64
          type: integer
        id:
          type: string
        model:
          type: string
        object:
          type: string
      required:
      - choices
      - created
      - id
      - model
      - object
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
      required:
      - detail
      type: object
    HttpErrorOut:
      properties:
        code:
          type: string
        detail:
          type: string
      required:
      - code
      - detail
      title: HttpError
      type: object
    HubspotOauthConfigIn:
      example:
        refresh_token: refresh_token
      properties:
        refresh_token:
          type: string
      required:
      - refresh_token
      type: object
    InboundPathParams:
      properties:
        app_id:
          description: The app's ID or UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        inbound_token:
          type: string
      required:
      - app_id
      - inbound_token
      type: object
    IncomingWebhookPayloadOut:
      example:
        incomingWebhookUrl: https://openapi-generator.tech
        channel: channel
        error: error
      properties:
        channel:
          nullable: true
          type: string
        error:
          nullable: true
          type: string
        incomingWebhookUrl:
          format: uri
          nullable: true
          type: string
      type: object
    IntegrationIn:
      example:
        name: Example Integration
      properties:
        name:
          example: Example Integration
          type: string
      required:
      - name
      type: object
    IntegrationKeyOut:
      example:
        key: integsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O
      properties:
        key:
          example: integsk_kV3ts5tKPNJN4Dl25cMTfUNdmabxbX0O
          type: string
      required:
      - key
      type: object
    IntegrationOut:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: Example Integration
        id: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          description: The integ's ID
          example: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        name:
          example: Example Integration
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - name
      - updatedAt
      type: object
    IntegrationUpdate:
      example:
        name: Example Integration
      properties:
        name:
          example: Example Integration
          type: string
      required:
      - name
      type: object
    ListResponse_ApplicationOut_:
      example:
        iterator: iterator
        data:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          uid: unique-app-identifier
          metadata:
            key: metadata
          rateLimit: 0
          name: My first application
          id: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          uid: unique-app-identifier
          metadata:
            key: metadata
          rateLimit: 0
          name: My first application
          id: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          updatedAt: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/ApplicationOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_ApplicationStats_:
      example:
        iterator: iterator
        data:
        - messageDestinations: 0
          appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          appUid: unique-app-identifier
        - messageDestinations: 0
          appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          appUid: unique-app-identifier
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/ApplicationStats'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_BackgroundTaskOut_:
      example:
        iterator: iterator
        data:
        - data: '{}'
          id: id
        - data: '{}'
          id: id
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/BackgroundTaskOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_EndpointMessageOut_:
      example:
        iterator: iterator
        data:
        - eventId: unique-msg-identifier
          channels:
          - project_123
          - group_2
          payload:
            email: test@example.com
            type: user.created
            username: test_user
          eventType: user.signup
          id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nextAttempt: 2000-01-23T04:56:07.000+00:00
          tags:
          - project_1337
          - project_1337
          timestamp: 2000-01-23T04:56:07.000+00:00
        - eventId: unique-msg-identifier
          channels:
          - project_123
          - group_2
          payload:
            email: test@example.com
            type: user.created
            username: test_user
          eventType: user.signup
          id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          nextAttempt: 2000-01-23T04:56:07.000+00:00
          tags:
          - project_1337
          - project_1337
          timestamp: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/EndpointMessageOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_EndpointOut_:
      example:
        iterator: iterator
        data:
        - headers:
            X-Example: "123"
            X-Foobar: Bar
          metadata:
            X-Example: "123"
            X-Foobar: Bar
          rateLimit: 0
          description: description
          version: 1
          url: https://example.com/webhook/
          createdAt: 2000-01-23T04:56:07.000+00:00
          uid: unique-ep-identifier
          channels:
          - project_123
          - group_2
          disabled: false
          payloadRules:
            type: tx.created
            chain: ton
            amount:
              $gt: "400"
          id: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          filterTypes:
          - user.signup
          - user.deleted
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - headers:
            X-Example: "123"
            X-Foobar: Bar
          metadata:
            X-Example: "123"
            X-Foobar: Bar
          rateLimit: 0
          description: description
          version: 1
          url: https://example.com/webhook/
          createdAt: 2000-01-23T04:56:07.000+00:00
          uid: unique-ep-identifier
          channels:
          - project_123
          - group_2
          disabled: false
          payloadRules:
            type: tx.created
            chain: ton
            amount:
              $gt: "400"
          id: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          filterTypes:
          - user.signup
          - user.deleted
          updatedAt: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/EndpointOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_EventTypeOut_:
      example:
        iterator: iterator
        data:
        - archived: false
          createdAt: 2000-01-23T04:56:07.000+00:00
          featureFlag: cool-new-feature
          schemas:
            "1":
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
          name: user.signup
          description: A user has signed up
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - archived: false
          createdAt: 2000-01-23T04:56:07.000+00:00
          featureFlag: cool-new-feature
          schemas:
            "1":
              description: An invoice was paid by a user
              properties:
                invoiceId:
                  description: The invoice id
                  type: string
                userId:
                  description: The user id
                  type: string
              required:
              - invoiceId
              - userId
              title: Invoice Paid Event
              type: object
          name: user.signup
          description: A user has signed up
          updatedAt: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/EventTypeOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_IntegrationOut_:
      example:
        iterator: iterator
        data:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: Example Integration
          id: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: Example Integration
          id: integ_1srOrx2ZWZBpBUvZwXKQmoEYga2
          updatedAt: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/IntegrationOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_MessageAttemptEndpointOut_:
      example:
        iterator: iterator
        data:
        - msg:
            eventId: unique-msg-identifier
            channels:
            - project_123
            - group_2
            payload:
              email: test@example.com
              type: user.created
              username: test_user
            eventType: user.signup
            id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
            tags:
            - project_1337
            - project_1337
            timestamp: 2000-01-23T04:56:07.000+00:00
          responseStatusCode: 200
          endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          response: '{}'
          msgId: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          id: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          url: https://example.com/webhook/
          timestamp: 2000-01-23T04:56:07.000+00:00
        - msg:
            eventId: unique-msg-identifier
            channels:
            - project_123
            - group_2
            payload:
              email: test@example.com
              type: user.created
              username: test_user
            eventType: user.signup
            id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
            tags:
            - project_1337
            - project_1337
            timestamp: 2000-01-23T04:56:07.000+00:00
          responseStatusCode: 200
          endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          response: '{}'
          msgId: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          id: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          url: https://example.com/webhook/
          timestamp: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/MessageAttemptEndpointOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_MessageAttemptOut_:
      example:
        iterator: iterator
        data:
        - msg:
            eventId: unique-msg-identifier
            channels:
            - project_123
            - group_2
            payload:
              email: test@example.com
              type: user.created
              username: test_user
            eventType: user.signup
            id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
            tags:
            - project_1337
            - project_1337
            timestamp: 2000-01-23T04:56:07.000+00:00
          responseStatusCode: 200
          endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          response: '{}'
          msgId: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          id: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          url: https://example.com/webhook/
          timestamp: 2000-01-23T04:56:07.000+00:00
        - msg:
            eventId: unique-msg-identifier
            channels:
            - project_123
            - group_2
            payload:
              email: test@example.com
              type: user.created
              username: test_user
            eventType: user.signup
            id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
            tags:
            - project_1337
            - project_1337
            timestamp: 2000-01-23T04:56:07.000+00:00
          responseStatusCode: 200
          endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          response: '{}'
          msgId: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          id: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          url: https://example.com/webhook/
          timestamp: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/MessageAttemptOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_MessageEndpointOut_:
      example:
        iterator: iterator
        data:
        - rateLimit: 0
          description: description
          version: 1
          nextAttempt: 2000-01-23T04:56:07.000+00:00
          url: https://example.com/webhook/
          createdAt: 2000-01-23T04:56:07.000+00:00
          uid: unique-ep-identifier
          channels:
          - project_123
          - group_2
          disabled: false
          id: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          filterTypes:
          - user.signup
          - user.deleted
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - rateLimit: 0
          description: description
          version: 1
          nextAttempt: 2000-01-23T04:56:07.000+00:00
          url: https://example.com/webhook/
          createdAt: 2000-01-23T04:56:07.000+00:00
          uid: unique-ep-identifier
          channels:
          - project_123
          - group_2
          disabled: false
          id: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          filterTypes:
          - user.signup
          - user.deleted
          updatedAt: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/MessageEndpointOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_MessageOut_:
      example:
        iterator: iterator
        data:
        - eventId: unique-msg-identifier
          channels:
          - project_123
          - group_2
          payload:
            email: test@example.com
            type: user.created
            username: test_user
          eventType: user.signup
          id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          tags:
          - project_1337
          - project_1337
          timestamp: 2000-01-23T04:56:07.000+00:00
        - eventId: unique-msg-identifier
          channels:
          - project_123
          - group_2
          payload:
            email: test@example.com
            type: user.created
            username: test_user
          eventType: user.signup
          id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          tags:
          - project_1337
          - project_1337
          timestamp: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/MessageOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    ListResponse_TemplateOut_:
      example:
        iterator: iterator
        data:
        - instructions: instructions
          featureFlag: cool-new-feature
          description: description
          transformation: transformation
          orgId: orgId
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          logo: https://openapi-generator.tech
          id: id
          instructionsLink: https://openapi-generator.tech
          filterTypes:
          - user.signup
          - user.deleted
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - instructions: instructions
          featureFlag: cool-new-feature
          description: description
          transformation: transformation
          orgId: orgId
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          logo: https://openapi-generator.tech
          id: id
          instructionsLink: https://openapi-generator.tech
          filterTypes:
          - user.signup
          - user.deleted
          updatedAt: 2000-01-23T04:56:07.000+00:00
        prevIterator: -iterator
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/TemplateOut'
          type: array
        done:
          type: boolean
        iterator:
          example: iterator
          nullable: true
          type: string
        prevIterator:
          example: -iterator
          nullable: true
          type: string
      required:
      - data
      - done
      type: object
    MessageAttemptEndpointOut:
      example:
        msg:
          eventId: unique-msg-identifier
          channels:
          - project_123
          - group_2
          payload:
            email: test@example.com
            type: user.created
            username: test_user
          eventType: user.signup
          id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          tags:
          - project_1337
          - project_1337
          timestamp: 2000-01-23T04:56:07.000+00:00
        responseStatusCode: 200
        endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
        response: '{}'
        msgId: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
        id: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
        url: https://example.com/webhook/
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        endpointId:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        id:
          description: The attempt's ID
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        msg:
          $ref: '#/components/schemas/MessageOut'
        msgId:
          description: The msg's ID
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        response:
          example: '{}'
          type: string
        responseStatusCode:
          example: 200
          format: int16
          type: integer
        status:
          $ref: '#/components/schemas/MessageStatus'
        timestamp:
          format: date-time
          type: string
        triggerType:
          $ref: '#/components/schemas/MessageAttemptTriggerType'
        url:
          example: https://example.com/webhook/
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
      required:
      - endpointId
      - id
      - msgId
      - response
      - responseStatusCode
      - status
      - timestamp
      - triggerType
      - url
      type: object
    MessageAttemptExhaustedEvent:
      description: Sent when a message delivery has failed (all of the retry attempts
        have been exhausted).
      properties:
        data:
          $ref: '#/components/schemas/MessageAttemptExhaustedEventData'
        type:
          default: message.attempt.exhausted
          enum:
          - message.attempt.exhausted
          type: string
      required:
      - data
      - type
      type: object
    MessageAttemptExhaustedEventData:
      description: Sent when a message delivery has failed (all of the retry attempts
        have been exhausted) as a "message.attempt.exhausted" type or after it's failed
        four times as a "message.attempt.failing" event.
      properties:
        appId:
          description: The app's ID
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        appUid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        endpointId:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        lastAttempt:
          $ref: '#/components/schemas/MessageAttemptFailedData'
        msgEventId:
          description: The msg's UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        msgId:
          description: The msg's ID
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
      required:
      - appId
      - endpointId
      - lastAttempt
      - msgId
      type: object
    MessageAttemptFailedData:
      properties:
        id:
          description: The attempt's ID
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        responseStatusCode:
          format: int16
          type: integer
        timestamp:
          format: date-time
          type: string
      required:
      - id
      - responseStatusCode
      - timestamp
      type: object
    MessageAttemptFailingEvent:
      description: |-
        Sent after a message has been failing for a few times.
        It's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.
      properties:
        data:
          $ref: '#/components/schemas/MessageAttemptFailingEventData'
        type:
          default: message.attempt.failing
          enum:
          - message.attempt.failing
          type: string
      required:
      - data
      - type
      type: object
    MessageAttemptFailingEventData:
      description: Sent when a message delivery has failed (all of the retry attempts
        have been exhausted) as a "message.attempt.exhausted" type or after it's failed
        four times as a "message.attempt.failing" event.
      properties:
        appId:
          description: The app's ID
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        appUid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        endpointId:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        lastAttempt:
          $ref: '#/components/schemas/MessageAttemptFailedData'
        msgEventId:
          description: The msg's UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        msgId:
          description: The msg's ID
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
      required:
      - appId
      - endpointId
      - lastAttempt
      - msgId
      type: object
    MessageAttemptHeadersOut:
      example:
        responseHeaders:
        - - responseHeaders
          - responseHeaders
        - - responseHeaders
          - responseHeaders
        sensitive:
        - sensitive
        - sensitive
        sentHeaders:
          key: sentHeaders
      properties:
        responseHeaders:
          items:
            items:
              type: string
            maxItems: 2
            minItems: 2
            type: array
          nullable: true
          type: array
        sensitive:
          items:
            type: string
          type: array
          uniqueItems: true
        sentHeaders:
          additionalProperties:
            type: string
          type: object
      required:
      - sensitive
      - sentHeaders
      type: object
    MessageAttemptOut:
      example:
        msg:
          eventId: unique-msg-identifier
          channels:
          - project_123
          - group_2
          payload:
            email: test@example.com
            type: user.created
            username: test_user
          eventType: user.signup
          id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          tags:
          - project_1337
          - project_1337
          timestamp: 2000-01-23T04:56:07.000+00:00
        responseStatusCode: 200
        endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
        response: '{}'
        msgId: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
        id: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
        url: https://example.com/webhook/
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        endpointId:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        id:
          description: The attempt's ID
          example: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        msg:
          $ref: '#/components/schemas/MessageOut'
        msgId:
          description: The msg's ID
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        response:
          example: '{}'
          type: string
        responseStatusCode:
          example: 200
          format: int16
          type: integer
        status:
          $ref: '#/components/schemas/MessageStatus'
        timestamp:
          format: date-time
          type: string
        triggerType:
          $ref: '#/components/schemas/MessageAttemptTriggerType'
        url:
          example: https://example.com/webhook/
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
      required:
      - endpointId
      - id
      - msgId
      - response
      - responseStatusCode
      - status
      - timestamp
      - triggerType
      - url
      type: object
    MessageAttemptRecoveredEvent:
      description: Sent on a successful dispatch after an earlier failure op webhook
        has already been sent.
      properties:
        data:
          $ref: '#/components/schemas/MessageAttemptRecoveredEventData'
        type:
          default: message.attempt.recovered
          enum:
          - message.attempt.recovered
          type: string
      required:
      - data
      - type
      type: object
    MessageAttemptRecoveredEventData:
      description: Sent when a message delivery has failed (all of the retry attempts
        have been exhausted) as a "message.attempt.exhausted" type or after it's failed
        four times as a "message.attempt.failing" event.
      properties:
        appId:
          description: The app's ID
          example: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        appUid:
          description: The app's UID
          example: unique-app-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        endpointId:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        lastAttempt:
          $ref: '#/components/schemas/MessageAttemptFailedData'
        msgEventId:
          description: The msg's UID
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        msgId:
          description: The msg's ID
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
      required:
      - appId
      - endpointId
      - lastAttempt
      - msgId
      type: object
    MessageAttemptTriggerType:
      description: |-
        The reason an attempt was made:
        - Scheduled = 0
        - Manual = 1
      enum:
      - 0
      - 1
      title: MessageAttemptTriggerType
      type: integer
      x-enum-varnames:
      - Scheduled
      - Manual
    MessageBroadcastIn:
      example:
        eventId: unique-msg-identifier
        payloadRetentionPeriod: 90
        channels:
        - project_123
        - group_2
        payload:
          email: test@example.com
          type: user.created
          username: test_user
        eventType: user.signup
      properties:
        channels:
          description: List of free-form identifiers that endpoints can filter by
          example:
          - project_123
          - group_2
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          maxItems: 5
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        eventId:
          description: Optional unique identifier for the message
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        eventType:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        payload:
          example:
            email: test@example.com
            type: user.created
            username: test_user
          type: object
        payloadRetentionPeriod:
          default: 90
          example: 90
          format: int64
          maximum: 90
          minimum: 5
          type: integer
      required:
      - eventType
      - payload
      type: object
    MessageBroadcastOut:
      example:
        id: id
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/BackgroundTaskStatus'
        task:
          $ref: '#/components/schemas/BackgroundTaskType'
      required:
      - id
      - status
      - task
      type: object
    MessageEndpointOut:
      example:
        rateLimit: 0
        description: description
        version: 1
        nextAttempt: 2000-01-23T04:56:07.000+00:00
        url: https://example.com/webhook/
        createdAt: 2000-01-23T04:56:07.000+00:00
        uid: unique-ep-identifier
        channels:
        - project_123
        - group_2
        disabled: false
        id: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
        filterTypes:
        - user.signup
        - user.deleted
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        channels:
          description: List of message channels this endpoint listens to (omit for
            all)
          example:
          - project_123
          - group_2
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          maxItems: 10
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        createdAt:
          format: date-time
          type: string
        description:
          description: An example endpoint name
          type: string
        disabled:
          default: false
          example: false
          type: boolean
        filterTypes:
          example:
          - user.signup
          - user.deleted
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        id:
          description: The ep's ID
          example: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        nextAttempt:
          format: date-time
          nullable: true
          type: string
        rateLimit:
          format: uint16
          minimum: 0
          nullable: true
          type: integer
        status:
          $ref: '#/components/schemas/MessageStatus'
        uid:
          description: Optional unique identifier for the endpoint
          example: unique-ep-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        updatedAt:
          format: date-time
          type: string
        url:
          example: https://example.com/webhook/
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
        version:
          deprecated: true
          example: 1
          format: int32
          minimum: 1
          type: integer
      required:
      - createdAt
      - description
      - id
      - status
      - updatedAt
      - url
      - version
      type: object
    MessageIn:
      example:
        eventId: unique-msg-identifier
        headers:
          X-Example: "123"
          X-Foobar: Bar
        payloadRetentionPeriod: 90
        application:
          uid: unique-app-identifier
          metadata:
            key: metadata
          rateLimit: 1
          name: My first application
          description: This is my first application
        channels:
        - project_123
        - group_2
        payload:
          email: test@example.com
          type: user.created
          username: test_user
        transformationsParams: '{}'
        eventType: user.signup
        tags:
        - my_tag
        - other
      properties:
        application:
          $ref: '#/components/schemas/ApplicationIn'
        channels:
          description: List of free-form identifiers that endpoints can filter by
          example:
          - project_123
          - group_2
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          maxItems: 5
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        eventId:
          description: Optional unique identifier for the message
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        eventType:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        payload:
          example:
            email: test@example.com
            type: user.created
            username: test_user
          type: object
        payloadRetentionPeriod:
          default: 90
          example: 90
          format: int64
          maximum: 90
          minimum: 5
          type: integer
        headers:
          additionalProperties:
            type: string
          example:
            X-Example: "123"
            X-Foobar: Bar
          type: object
        tags:
          description: List of free-form tags that can be filtered by when listing
            messages
          example:
          - my_tag
          - other
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          maxItems: 5
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        transformationsParams:
          description: Extra parameters to pass to Transformations (for future use)
          nullable: true
          type: object
      required:
      - eventType
      - payload
      type: object
    MessageOut:
      example:
        eventId: unique-msg-identifier
        channels:
        - project_123
        - group_2
        payload:
          email: test@example.com
          type: user.created
          username: test_user
        eventType: user.signup
        id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
        tags:
        - project_1337
        - project_1337
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        channels:
          description: List of free-form identifiers that endpoints can filter by
          example:
          - project_123
          - group_2
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          maxItems: 5
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        eventId:
          description: Optional unique identifier for the message
          example: unique-msg-identifier
          maxLength: 256
          minLength: 1
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        eventType:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        id:
          description: The msg's ID
          example: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          type: string
        payload:
          example:
            email: test@example.com
            type: user.created
            username: test_user
          type: object
        tags:
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        timestamp:
          format: date-time
          type: string
      required:
      - eventType
      - id
      - payload
      - timestamp
      type: object
    MessageRawPayloadOut:
      example:
        payload: '{"email":"test@example.com","type":"user.created","username":"test_user"}'
      properties:
        payload:
          example: '{"email":"test@example.com","type":"user.created","username":"test_user"}'
          type: string
      required:
      - payload
      type: object
    MessageStatus:
      description: |-
        The sending status of the message:
        - Success = 0
        - Pending = 1
        - Fail = 2
        - Sending = 3
      enum:
      - 0
      - 1
      - 2
      - 3
      title: MessageStatus
      type: integer
      x-enum-varnames:
      - Success
      - Pending
      - Fail
      - Sending
    MessageStreamOut:
      example:
        iterator: iterator
        data:
        - eventId: unique-msg-identifier
          channels:
          - project_123
          - group_2
          payload:
            email: test@example.com
            type: user.created
            username: test_user
          eventType: user.signup
          id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          tags:
          - project_1337
          - project_1337
          timestamp: 2000-01-23T04:56:07.000+00:00
        - eventId: unique-msg-identifier
          channels:
          - project_123
          - group_2
          payload:
            email: test@example.com
            type: user.created
            username: test_user
          eventType: user.signup
          id: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
          tags:
          - project_1337
          - project_1337
          timestamp: 2000-01-23T04:56:07.000+00:00
        done: true
      properties:
        data:
          items:
            $ref: '#/components/schemas/MessageOut'
          type: array
        done:
          type: boolean
        iterator:
          type: string
      required:
      - data
      - done
      - iterator
      type: object
    OAuthPayloadIn:
      example:
        redirectUri: redirectUri
        code: code
      properties:
        code:
          type: string
        redirectUri:
          type: string
      required:
      - code
      - redirectUri
      type: object
    OAuthPayloadOut:
      example:
        accessToken: accessToken
        error: error
        refreshToken: refreshToken
      properties:
        accessToken:
          nullable: true
          type: string
        error:
          nullable: true
          type: string
        refreshToken:
          nullable: true
          type: string
      type: object
    Oauth2AuthMethodIn:
      description: The method used for authenticating to the OAuth authorization server.
        `clientSecretJwt` will construct a JWT used for authentication with the oauth
        authorization server. This method is less commonly used and may not be supported
        by all oauth providers. `clientSecretBasic` will authenticate to the oauth
        authorization server using an `Authorization` header with the client secret
        as the value. This is the most common means of authentication. `clientSecretPost`
        will authenticate to the oauth authorization server by passing the client
        secret in a `client_secret` field in the request body. This method may not
        be supported by all oauth providers, and in general `clientSecretBasic` should
        be preferred.
      enum:
      - clientSecretJwt
      - clientSecretBasic
      - clientSecretPost
      type: string
    Oauth2GrantTypeIn:
      enum:
      - clientCredentials
      - refreshToken
      type: string
    OauthJwsSigningAlgorithm:
      enum:
      - RS256
      type: string
    OneTimeTokenIn:
      example:
        oneTimeToken: oneTimeToken
      properties:
        oneTimeToken:
          type: string
      required:
      - oneTimeToken
      type: object
    OneTimeTokenOut:
      example:
        token: token
      properties:
        token:
          type: string
      required:
      - token
      type: object
    Ordering:
      description: Defines the ordering in a listing of results.
      enum:
      - ascending
      - descending
      type: string
    RecoverIn:
      example:
        until: 2000-01-23T04:56:07.000+00:00
        since: 2000-01-23T04:56:07.000+00:00
      properties:
        since:
          format: date-time
          type: string
        until:
          format: date-time
          nullable: true
          type: string
      required:
      - since
      type: object
    RecoverOut:
      example:
        id: id
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/BackgroundTaskStatus'
        task:
          $ref: '#/components/schemas/BackgroundTaskType'
      required:
      - id
      - status
      - task
      type: object
    ReplayIn:
      example:
        until: 2000-01-23T04:56:07.000+00:00
        since: 2000-01-23T04:56:07.000+00:00
      properties:
        since:
          format: date-time
          type: string
        until:
          format: date-time
          nullable: true
          type: string
      required:
      - since
      type: object
    ReplayOut:
      example:
        id: id
      properties:
        id:
          type: string
        status:
          $ref: '#/components/schemas/BackgroundTaskStatus'
        task:
          $ref: '#/components/schemas/BackgroundTaskType'
      required:
      - id
      - status
      - task
      type: object
    RetrySchedule:
      items:
        $ref: '#/components/schemas/Duration'
      type: array
    RetryScheduleInOut:
      example:
        retrySchedule:
        - nanos: 0
          secs: 0
        - nanos: 0
          secs: 0
      properties:
        retrySchedule:
          items:
            $ref: '#/components/schemas/Duration'
          type: array
      type: object
    RotatedUrlOut:
      example:
        url: url
      properties:
        url:
          type: string
      required:
      - url
      type: object
    SettingsIn:
      example:
        showUseXwebhookPlay: true
        displayName: displayName
        customThemeOverride:
          borderRadius: {}
          fontSize:
            base: 0
        eventCatalogPublished: false
        enableIntegrationManagement: false
        readOnly: false
        customFontFamily: Open Sans
        colorPaletteDark:
          backgroundHover: backgroundHover
          navigationAccent: navigationAccent
          buttonPrimary: buttonPrimary
          backgroundSecondary: backgroundSecondary
          interactiveAccent: interactiveAccent
          textPrimary: textPrimary
          textDanger: textDanger
          backgroundPrimary: backgroundPrimary
          primary: primary
        enableChannels: false
        disableEndpointOnFailure: true
        customColor: customColor
        enforceHttps: true
        enableTransformations: false
        customBaseFontSize: 0
        customFontFamilyUrl: https://openapi-generator.tech
        customLogoUrl: https://openapi-generator.tech
        colorPaletteLight:
          backgroundHover: backgroundHover
          navigationAccent: navigationAccent
          buttonPrimary: buttonPrimary
          backgroundSecondary: backgroundSecondary
          interactiveAccent: interactiveAccent
          textPrimary: textPrimary
          textDanger: textDanger
          backgroundPrimary: backgroundPrimary
          primary: primary
      properties:
        colorPaletteDark:
          $ref: '#/components/schemas/CustomColorPalette'
        colorPaletteLight:
          $ref: '#/components/schemas/CustomColorPalette'
        customBaseFontSize:
          format: int
          nullable: true
          type: integer
        customColor:
          format: color
          nullable: true
          type: string
        customFontFamily:
          example: Open Sans
          nullable: true
          pattern: ^[a-zA-Z0-9\-_ ]+$
          type: string
        customFontFamilyUrl:
          format: uri
          maxLength: 65536
          minLength: 1
          nullable: true
          type: string
        customLogoUrl:
          format: uri
          maxLength: 65536
          minLength: 1
          nullable: true
          type: string
        customThemeOverride:
          $ref: '#/components/schemas/CustomThemeOverride'
        disableEndpointOnFailure:
          default: true
          type: boolean
        displayName:
          nullable: true
          type: string
        enableChannels:
          default: false
          type: boolean
        enableIntegrationManagement:
          default: false
          type: boolean
        enableTransformations:
          default: false
          type: boolean
        enforceHttps:
          default: true
          type: boolean
        eventCatalogPublished:
          default: false
          type: boolean
        readOnly:
          default: false
          type: boolean
        showUseXwebhookPlay:
          default: true
          type: boolean
      type: object
    SettingsOut:
      example:
        showUseXwebhookPlay: true
        displayName: displayName
        customThemeOverride:
          borderRadius: {}
          fontSize:
            base: 0
        eventCatalogPublished: false
        enableIntegrationManagement: false
        readOnly: false
        customFontFamily: Open Sans
        colorPaletteDark:
          backgroundHover: backgroundHover
          navigationAccent: navigationAccent
          buttonPrimary: buttonPrimary
          backgroundSecondary: backgroundSecondary
          interactiveAccent: interactiveAccent
          textPrimary: textPrimary
          textDanger: textDanger
          backgroundPrimary: backgroundPrimary
          primary: primary
        enableChannels: false
        disableEndpointOnFailure: true
        customColor: customColor
        enforceHttps: true
        enableTransformations: false
        customBaseFontSize: 0
        customFontFamilyUrl: https://openapi-generator.tech
        customLogoUrl: https://openapi-generator.tech
        colorPaletteLight:
          backgroundHover: backgroundHover
          navigationAccent: navigationAccent
          buttonPrimary: buttonPrimary
          backgroundSecondary: backgroundSecondary
          interactiveAccent: interactiveAccent
          textPrimary: textPrimary
          textDanger: textDanger
          backgroundPrimary: backgroundPrimary
          primary: primary
      properties:
        colorPaletteDark:
          $ref: '#/components/schemas/CustomColorPalette'
        colorPaletteLight:
          $ref: '#/components/schemas/CustomColorPalette'
        customBaseFontSize:
          format: int
          nullable: true
          type: integer
        customColor:
          format: color
          nullable: true
          type: string
        customFontFamily:
          example: Open Sans
          nullable: true
          pattern: ^[a-zA-Z0-9\-_ ]+$
          type: string
        customFontFamilyUrl:
          format: uri
          maxLength: 65536
          minLength: 1
          nullable: true
          type: string
        customLogoUrl:
          format: uri
          maxLength: 65536
          minLength: 1
          nullable: true
          type: string
        customThemeOverride:
          $ref: '#/components/schemas/CustomThemeOverride'
        disableEndpointOnFailure:
          default: true
          type: boolean
        displayName:
          nullable: true
          type: string
        enableChannels:
          default: false
          type: boolean
        enableIntegrationManagement:
          default: false
          type: boolean
        enableTransformations:
          default: false
          type: boolean
        enforceHttps:
          default: true
          type: boolean
        eventCatalogPublished:
          default: false
          type: boolean
        readOnly:
          default: false
          type: boolean
        showUseXwebhookPlay:
          default: true
          type: boolean
      type: object
    StatisticsPeriod:
      description: Period length for a statistics data point
      enum:
      - OneDay
      - FiveMinutes
      type: string
    StatusCodeClass:
      description: |-
        The different classes of HTTP status codes:
        - CodeNone = 0
        - Code1xx = 100
        - Code2xx = 200
        - Code3xx = 300
        - Code4xx = 400
        - Code5xx = 500
      enum:
      - 0
      - 100
      - 200
      - 300
      - 400
      - 500
      title: StatusCodeClass
      type: integer
      x-enum-varnames:
      - CodeNone
      - Code1xx
      - Code2xx
      - Code3xx
      - Code4xx
      - Code5xx
    TemplateIn:
      example:
        instructions: instructions
        featureFlag: cool-new-feature
        name: name
        description: description
        logo: https://openapi-generator.tech
        instructionsLink: https://openapi-generator.tech
        transformation: transformation
        filterTypes:
        - user.signup
        - user.deleted
      properties:
        description:
          default: ""
          type: string
        featureFlag:
          example: cool-new-feature
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        filterTypes:
          example:
          - user.signup
          - user.deleted
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        instructions:
          default: ""
          type: string
        instructionsLink:
          format: uri
          nullable: true
          type: string
        kind:
          $ref: '#/components/schemas/TransformationTemplateKind'
        logo:
          format: uri
          type: string
        name:
          type: string
        transformation:
          maxLength: 51200
          minLength: 10
          type: string
      required:
      - logo
      - name
      - transformation
      type: object
    TemplateOut:
      example:
        instructions: instructions
        featureFlag: cool-new-feature
        description: description
        transformation: transformation
        orgId: orgId
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        logo: https://openapi-generator.tech
        id: id
        instructionsLink: https://openapi-generator.tech
        filterTypes:
        - user.signup
        - user.deleted
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        featureFlag:
          example: cool-new-feature
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        filterTypes:
          example:
          - user.signup
          - user.deleted
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        id:
          type: string
        instructions:
          type: string
        instructionsLink:
          format: uri
          nullable: true
          type: string
        kind:
          $ref: '#/components/schemas/TransformationTemplateKind'
        logo:
          format: uri
          type: string
        name:
          type: string
        orgId:
          type: string
        transformation:
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - description
      - id
      - instructions
      - kind
      - logo
      - name
      - orgId
      - transformation
      - updatedAt
      type: object
    TemplatePatch:
      example:
        instructions: instructions
        featureFlag: cool-new-feature
        name: name
        description: description
        logo: https://openapi-generator.tech
        instructionsLink: https://openapi-generator.tech
        transformation: transformation
        filterTypes:
        - user.signup
        - user.deleted
      properties:
        description:
          type: string
        featureFlag:
          example: cool-new-feature
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        filterTypes:
          example:
          - user.signup
          - user.deleted
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        instructions:
          type: string
        instructionsLink:
          format: uri
          nullable: true
          type: string
        kind:
          $ref: '#/components/schemas/TransformationTemplateKind'
        logo:
          format: uri
          type: string
        name:
          type: string
        transformation:
          maxLength: 51200
          minLength: 10
          type: string
      type: object
    TemplateUpdate:
      example:
        instructions: instructions
        featureFlag: cool-new-feature
        name: name
        description: description
        logo: https://openapi-generator.tech
        instructionsLink: https://openapi-generator.tech
        transformation: transformation
        filterTypes:
        - user.signup
        - user.deleted
      properties:
        description:
          default: ""
          type: string
        featureFlag:
          example: cool-new-feature
          maxLength: 256
          nullable: true
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        filterTypes:
          example:
          - user.signup
          - user.deleted
          items:
            description: The event type's name
            example: user.signup
            maxLength: 256
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          minItems: 1
          nullable: true
          type: array
          uniqueItems: true
        instructions:
          default: ""
          type: string
        instructionsLink:
          format: uri
          nullable: true
          type: string
        kind:
          $ref: '#/components/schemas/TransformationTemplateKind'
        logo:
          format: uri
          type: string
        name:
          default: ""
          type: string
        transformation:
          maxLength: 51200
          minLength: 10
          type: string
      required:
      - logo
      - transformation
      type: object
    TransformationHttpMethod:
      enum:
      - POST
      - PUT
      type: string
    TransformationSimulateIn:
      example:
        code: code
        channels:
        - project_1337
        - project_1337
        payload: '{}'
        eventType: user.signup
      properties:
        channels:
          items:
            example: project_1337
            maxLength: 128
            pattern: ^[a-zA-Z0-9\-_.]+$
            type: string
          nullable: true
          type: array
          uniqueItems: true
        code:
          maxLength: 51200
          minLength: 10
          type: string
        eventType:
          description: The event type's name
          example: user.signup
          maxLength: 256
          pattern: ^[a-zA-Z0-9\-_.]+$
          type: string
        payload:
          type: object
      required:
      - code
      - eventType
      - payload
      type: object
    TransformationSimulateOut:
      example:
        payload: payload
        url: https://openapi-generator.tech
      properties:
        method:
          $ref: '#/components/schemas/TransformationHttpMethod'
        payload:
          type: string
        url:
          format: uri
          maxLength: 65536
          minLength: 1
          type: string
      required:
      - payload
      - url
      type: object
    TransformationTemplateKind:
      enum:
      - Custom
      - CustomerIO
      - Discord
      - Hubspot
      - Inngest
      - Salesforce
      - Segment
      - Slack
      - Teams
      - TriggerDev
      - Windmill
      - Zapier
      type: string
    ValidationError:
      description: Validation errors have their own schema to provide context for
        invalid requests eg. mismatched types and out of bounds values. There may
        be any number of these per 422 UNPROCESSABLE ENTITY error.
      properties:
        loc:
          description: The location as a [`Vec`] of [`String`]s -- often in the form
            `["body", "field_name"]`, `["query", "field_name"]`, etc. They may, however,
            be arbitrarily deep.
          items:
            type: string
          type: array
        msg:
          description: The message accompanying the validation error item.
          type: string
        type:
          description: The type of error, often "type_error" or "value_error", but
            sometimes with more context like as "value_error.number.not_ge"
          type: string
      required:
      - loc
      - msg
      - type
      type: object
  securitySchemes:
    HTTPBearer:
      bearerFormat: "null"
      description: HTTP Bearer token passed in the `Authorization` header
      scheme: bearer
      type: http
x-tagGroups:
- name: General
  tags:
  - Application
  - Event Type
  - Background Tasks
- name: Application specific
  tags:
  - Authentication
  - Endpoint
  - Message
  - Message Attempt
  - Integration
- name: Utility
  tags:
  - Health
- name: Webhooks
  tags:
  - Webhooks
- name: Statistics
  tags:
  - Statistics
x-webhooks:
  endpoint.created:
    post:
      description: Sent when an endpoint is created.
      operationId: endpoint.created
      requestBody:
        content:
          application/json:
            example:
              data:
                appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
                appUid: unique-app-identifier
                endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
                endpointUid: unique-endpoint-identifier
              type: endpoint.created
            schema:
              $ref: '#/components/schemas/EndpointCreatedEvent'
      responses:
        "2XX":
          description: Return any 2XX status to indicate that the data was received
            successfully
      summary: endpoint.created
      tags:
      - Webhooks
  endpoint.deleted:
    post:
      description: Sent when an endpoint is deleted.
      operationId: endpoint.deleted
      requestBody:
        content:
          application/json:
            example:
              data:
                appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
                appUid: unique-app-identifier
                endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
                endpointUid: unique-endpoint-identifier
              type: endpoint.deleted
            schema:
              $ref: '#/components/schemas/EndpointDeletedEvent'
      responses:
        "2XX":
          description: Return any 2XX status to indicate that the data was received
            successfully
      summary: endpoint.deleted
      tags:
      - Webhooks
  endpoint.disabled:
    post:
      description: Sent when an endpoint has been automatically disabled after continuous
        failures.
      operationId: endpoint.disabled
      requestBody:
        content:
          application/json:
            example:
              data:
                appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
                appUid: unique-app-identifier
                endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
                endpointUid: unique-endpoint-identifier
                failSince: 2022-11-06T15:04:05Z
              type: endpoint.disabled
            schema:
              $ref: '#/components/schemas/EndpointDisabledEvent'
      responses:
        "2XX":
          description: Return any 2XX status to indicate that the data was received
            successfully
      summary: endpoint.disabled
      tags:
      - Webhooks
  endpoint.updated:
    post:
      description: Sent when an endpoint is updated.
      operationId: endpoint.updated
      requestBody:
        content:
          application/json:
            example:
              data:
                appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
                appUid: unique-app-identifier
                endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
                endpointUid: unique-endpoint-identifier
              type: endpoint.updated
            schema:
              $ref: '#/components/schemas/EndpointUpdatedEvent'
      responses:
        "2XX":
          description: Return any 2XX status to indicate that the data was received
            successfully
      summary: endpoint.updated
      tags:
      - Webhooks
  message.attempt.exhausted:
    post:
      description: Sent when a message delivery has failed (all of the retry attempts
        have been exhausted).
      operationId: message.attempt.exhausted
      requestBody:
        content:
          application/json:
            example:
              data:
                appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
                appUid: unique-app-identifier
                endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
                lastAttempt:
                  id: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
                  responseStatusCode: 500
                  timestamp: 2022-11-06T15:04:05Z
                msgEventId: unique-msg-identifier
                msgId: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
              type: message.attempt.exhausted
            schema:
              $ref: '#/components/schemas/MessageAttemptExhaustedEvent'
      responses:
        "2XX":
          description: Return any 2XX status to indicate that the data was received
            successfully
      summary: message.attempt.exhausted
      tags:
      - Webhooks
  message.attempt.failing:
    post:
      description: |-
        Sent after a message has been failing for a few times.
        It's sent on the fourth failure. It complements `message.attempt.exhausted` which is sent after the last failure.
      operationId: message.attempt.failing
      requestBody:
        content:
          application/json:
            example:
              data:
                appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
                appUid: unique-app-identifier
                endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
                lastAttempt:
                  id: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
                  responseStatusCode: 500
                  timestamp: 2022-11-06T15:04:05Z
                msgEventId: unique-msg-identifier
                msgId: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
              type: message.attempt.failing
            schema:
              $ref: '#/components/schemas/MessageAttemptFailingEvent'
      responses:
        "2XX":
          description: Return any 2XX status to indicate that the data was received
            successfully
      summary: message.attempt.failing
      tags:
      - Webhooks
  message.attempt.recovered:
    post:
      description: Sent on a successful dispatch after an earlier failure op webhook
        has already been sent.
      operationId: message.attempt.recovered
      requestBody:
        content:
          application/json:
            example:
              data:
                appId: app_1srOrx2ZWZBpBUvZwXKQmoEYga2
                appUid: unique-app-identifier
                endpointId: ep_1srOrx2ZWZBpBUvZwXKQmoEYga2
                lastAttempt:
                  id: atmpt_1srOrx2ZWZBpBUvZwXKQmoEYga2
                  responseStatusCode: 200
                  timestamp: 2022-11-06T15:04:05Z
                msgEventId: unique-msg-identifier
                msgId: msg_1srOrx2ZWZBpBUvZwXKQmoEYga2
              type: message.attempt.recovered
            schema:
              $ref: '#/components/schemas/MessageAttemptRecoveredEvent'
      responses:
        "2XX":
          description: Return any 2XX status to indicate that the data was received
            successfully
      summary: message.attempt.recovered
      tags:
      - Webhooks
