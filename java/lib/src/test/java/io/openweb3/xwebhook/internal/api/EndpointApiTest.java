/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.xwebhook.internal.api;

import io.openweb3.xwebhook.internal.ApiException;
import io.openweb3.xwebhook.models.EndpointHeadersIn;
import io.openweb3.xwebhook.models.EndpointHeadersOut;
import io.openweb3.xwebhook.models.EndpointHeadersPatchIn;
import io.openweb3.xwebhook.models.EndpointIn;
import io.openweb3.xwebhook.models.EndpointMtlsConfigIn;
import io.openweb3.xwebhook.models.EndpointOauthConfigIn;
import io.openweb3.xwebhook.models.EndpointOut;
import io.openweb3.xwebhook.models.EndpointPatch;
import io.openweb3.xwebhook.models.EndpointSecretOut;
import io.openweb3.xwebhook.models.EndpointSecretRotateIn;
import io.openweb3.xwebhook.models.EndpointStats;
import io.openweb3.xwebhook.models.EndpointTransformationIn;
import io.openweb3.xwebhook.models.EndpointTransformationOut;
import io.openweb3.xwebhook.models.EndpointTransformationSimulateIn;
import io.openweb3.xwebhook.models.EndpointTransformationSimulateOut;
import io.openweb3.xwebhook.models.EndpointUpdate;
import io.openweb3.xwebhook.models.EventExampleIn;
import io.openweb3.xwebhook.models.HTTPValidationError;
import io.openweb3.xwebhook.models.HttpErrorOut;
import io.openweb3.xwebhook.models.ListResponseEndpointOut;
import io.openweb3.xwebhook.models.MessageOut;
import java.time.OffsetDateTime;
import io.openweb3.xwebhook.models.Ordering;
import io.openweb3.xwebhook.models.RecoverIn;
import io.openweb3.xwebhook.models.RecoverOut;
import io.openweb3.xwebhook.models.ReplayIn;
import io.openweb3.xwebhook.models.ReplayOut;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EndpointApi
 */
@Ignore
public class EndpointApiTest {

    private final EndpointApi api = new EndpointApi();

    
    /**
     * Create Endpoint
     *
     * Create a new endpoint for the application.  When &#x60;secret&#x60; is &#x60;null&#x60; the secret is automatically generated (recommended)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointCreateTest() throws ApiException {
        String appId = null;
        EndpointIn endpointIn = null;
        String idempotencyKey = null;
        EndpointOut response = api.v1EndpointCreate(appId, endpointIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Delete Endpoint
     *
     * Delete an endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointDeleteTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        api.v1EndpointDelete(appId, endpointId);

        // TODO: test validations
    }
    
    /**
     * Delete Endpoint Mtls Config
     *
     * Delete endpoint mTLS configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointDeleteMtlsConfigTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        api.v1EndpointDeleteMtlsConfig(appId, endpointId);

        // TODO: test validations
    }
    
    /**
     * Delete Endpoint Oauth Config
     *
     * Delete endpoint OAuth configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointDeleteOauthConfigTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        api.v1EndpointDeleteOauthConfig(appId, endpointId);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint
     *
     * Get an endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointGetTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointOut response = api.v1EndpointGet(appId, endpointId);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint Headers
     *
     * Get the additional headers to be sent with the webhook
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointGetHeadersTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointHeadersOut response = api.v1EndpointGetHeaders(appId, endpointId);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint Secret
     *
     * Get the endpoint&#39;s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.webhook.openweb3.io/consuming-webhooks/).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointGetSecretTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointSecretOut response = api.v1EndpointGetSecret(appId, endpointId);

        // TODO: test validations
    }
    
    /**
     * Endpoint Stats
     *
     * Get basic statistics for the endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointGetStatsTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        OffsetDateTime since = null;
        OffsetDateTime until = null;
        EndpointStats response = api.v1EndpointGetStats(appId, endpointId, since, until);

        // TODO: test validations
    }
    
    /**
     * List Endpoints
     *
     * List the application&#39;s endpoints.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointListTest() throws ApiException {
        String appId = null;
        Integer limit = null;
        String iterator = null;
        Ordering order = null;
        ListResponseEndpointOut response = api.v1EndpointList(appId, limit, iterator, order);

        // TODO: test validations
    }
    
    /**
     * Patch Endpoint
     *
     * Partially update an endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointPatchTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointPatch endpointPatch = null;
        EndpointOut response = api.v1EndpointPatch(appId, endpointId, endpointPatch);

        // TODO: test validations
    }
    
    /**
     * Patch Endpoint Headers
     *
     * Partially set the additional headers to be sent with the webhook
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointPatchHeadersTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointHeadersPatchIn endpointHeadersPatchIn = null;
        api.v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn);

        // TODO: test validations
    }
    
    /**
     * Recover Failed Webhooks
     *
     * Resend all failed messages since a given time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointRecoverTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        RecoverIn recoverIn = null;
        String idempotencyKey = null;
        RecoverOut response = api.v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Replay Missing Webhooks
     *
     * Replays messages to the endpoint. Only messages that were created after &#x60;since&#x60; will be sent. Messages that were previously sent to the endpoint are not resent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointReplayTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        ReplayIn replayIn = null;
        String idempotencyKey = null;
        ReplayOut response = api.v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Rotate Endpoint Secret
     *
     * Rotates the endpoint&#39;s signing secret.  The previous secret will be valid for the next 24 hours.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointRotateSecretTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointSecretRotateIn endpointSecretRotateIn = null;
        String idempotencyKey = null;
        api.v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Send Event Type Example Message
     *
     * Send an example message for event
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointSendExampleTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EventExampleIn eventExampleIn = null;
        String idempotencyKey = null;
        MessageOut response = api.v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Get Endpoint Transformation
     *
     * Get the transformation code associated with this endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointTransformationGetTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointTransformationOut response = api.v1EndpointTransformationGet(appId, endpointId);

        // TODO: test validations
    }
    
    /**
     * Set Endpoint Transformation
     *
     * Set or unset the transformation code associated with this endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointTransformationPartialUpdateTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointTransformationIn endpointTransformationIn = null;
        api.v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn);

        // TODO: test validations
    }
    
    /**
     * Simulate
     *
     * Simulate running the transformation on the payload and code
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointTransformationSimulateTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointTransformationSimulateIn endpointTransformationSimulateIn = null;
        String idempotencyKey = null;
        EndpointTransformationSimulateOut response = api.v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Update Endpoint
     *
     * Update an endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointUpdateTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointUpdate endpointUpdate = null;
        EndpointOut response = api.v1EndpointUpdate(appId, endpointId, endpointUpdate);

        // TODO: test validations
    }
    
    /**
     * Update Endpoint Headers
     *
     * Set the additional headers to be sent with the webhook
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointUpdateHeadersTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointHeadersIn endpointHeadersIn = null;
        api.v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn);

        // TODO: test validations
    }
    
    /**
     * Update Endpoint Mtls Config
     *
     * Create/update endpoint mTLS configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointUpdateMtlsConfigTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointMtlsConfigIn endpointMtlsConfigIn = null;
        api.v1EndpointUpdateMtlsConfig(appId, endpointId, endpointMtlsConfigIn);

        // TODO: test validations
    }
    
    /**
     * Update Endpoint Oauth Config
     *
     * Create/update endpoint OAuth configuration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EndpointUpdateOauthConfigTest() throws ApiException {
        String appId = null;
        String endpointId = null;
        EndpointOauthConfigIn endpointOauthConfigIn = null;
        api.v1EndpointUpdateOauthConfig(appId, endpointId, endpointOauthConfigIn);

        // TODO: test validations
    }
    
}
