/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xwebhook.internal.api;

import com.xwebhook.internal.ApiException;
import com.xwebhook.models.EventTypeExampleOut;
import com.xwebhook.models.EventTypeImportOpenApiIn;
import com.xwebhook.models.EventTypeImportOpenApiOut;
import com.xwebhook.models.EventTypeIn;
import com.xwebhook.models.EventTypeOut;
import com.xwebhook.models.EventTypePatch;
import com.xwebhook.models.EventTypeSchemaIn;
import com.xwebhook.models.EventTypeUpdate;
import com.xwebhook.models.ExportEventTypeOut;
import com.xwebhook.models.HTTPValidationError;
import com.xwebhook.models.HttpErrorOut;
import com.xwebhook.models.ListResponseEventTypeOut;
import com.xwebhook.models.Ordering;
import com.xwebhook.models.RetryScheduleInOut;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventTypeApi
 */
@Ignore
public class EventTypeApiTest {

    private final EventTypeApi api = new EventTypeApi();

    
    /**
     * Create Event Type
     *
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeCreateTest() throws ApiException {
        EventTypeIn eventTypeIn = null;
        String idempotencyKey = null;
        EventTypeOut response = api.v1EventTypeCreate(eventTypeIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Delete Event Type
     *
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeDeleteTest() throws ApiException {
        String eventTypeName = null;
        Boolean expunge = null;
        api.v1EventTypeDelete(eventTypeName, expunge);

        // TODO: test validations
    }
    
    /**
     * Event Type Export From Openapi
     *
     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeExportOpenapiTest() throws ApiException {
        String idempotencyKey = null;
        ExportEventTypeOut response = api.v1EventTypeExportOpenapi(idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Generate Schema Example
     *
     * Generates a fake example from the given JSONSchema
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeGenerateExampleTest() throws ApiException {
        EventTypeSchemaIn eventTypeSchemaIn = null;
        String idempotencyKey = null;
        EventTypeExampleOut response = api.v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Get Event Type
     *
     * Get an event type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeGetTest() throws ApiException {
        String eventTypeName = null;
        EventTypeOut response = api.v1EventTypeGet(eventTypeName);

        // TODO: test validations
    }
    
    /**
     * Get Retry Schedule
     *
     * Gets the retry schedule for messages using the given event type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeGetRetryScheduleTest() throws ApiException {
        String eventTypeName = null;
        RetryScheduleInOut response = api.v1EventTypeGetRetrySchedule(eventTypeName);

        // TODO: test validations
    }
    
    /**
     * Event Type Import From Openapi
     *
     * Given an OpenAPI spec, create new or update existing event types. If an existing &#x60;archived&#x60; event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the &#x60;webhooks&#x60; or &#x60;x-webhooks&#x60; top-level.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeImportOpenapiTest() throws ApiException {
        EventTypeImportOpenApiIn eventTypeImportOpenApiIn = null;
        String idempotencyKey = null;
        EventTypeImportOpenApiOut response = api.v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * List Event Types
     *
     * Return the list of event types.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeListTest() throws ApiException {
        Integer limit = null;
        String iterator = null;
        Ordering order = null;
        Boolean includeArchived = null;
        Boolean withContent = null;
        ListResponseEventTypeOut response = api.v1EventTypeList(limit, iterator, order, includeArchived, withContent);

        // TODO: test validations
    }
    
    /**
     * Patch Event Type
     *
     * Partially update an event type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypePatchTest() throws ApiException {
        String eventTypeName = null;
        EventTypePatch eventTypePatch = null;
        EventTypeOut response = api.v1EventTypePatch(eventTypeName, eventTypePatch);

        // TODO: test validations
    }
    
    /**
     * Update Event Type
     *
     * Update an event type.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeUpdateTest() throws ApiException {
        String eventTypeName = null;
        EventTypeUpdate eventTypeUpdate = null;
        EventTypeOut response = api.v1EventTypeUpdate(eventTypeName, eventTypeUpdate);

        // TODO: test validations
    }
    
    /**
     * Update Retry Schedule
     *
     * Sets a retry schedule for all messages using the given event type
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1EventTypeUpdateRetryScheduleTest() throws ApiException {
        String eventTypeName = null;
        RetryScheduleInOut retryScheduleInOut = null;
        RetryScheduleInOut response = api.v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut);

        // TODO: test validations
    }
    
}
