/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.xwebhook.internal.api;

import com.xwebhook.internal.ApiException;
import com.xwebhook.models.AppPortalAccessIn;
import com.xwebhook.models.AppPortalAccessOut;
import com.xwebhook.models.ApplicationTokenExpireIn;
import com.xwebhook.models.DashboardAccessOut;
import com.xwebhook.models.HTTPValidationError;
import com.xwebhook.models.HttpErrorOut;
import com.xwebhook.models.OneTimeTokenIn;
import com.xwebhook.models.OneTimeTokenOut;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Ignore
public class AuthenticationApiTest {

    private final AuthenticationApi api = new AuthenticationApi();

    
    /**
     * Get Consumer App Portal Access
     *
     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1AuthenticationAppPortalAccessTest() throws ApiException {
        String appId = null;
        AppPortalAccessIn appPortalAccessIn = null;
        String idempotencyKey = null;
        AppPortalAccessOut response = api.v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Dashboard Access
     *
     * DEPRECATED: Please use &#x60;app-portal-access&#x60; instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1AuthenticationDashboardAccessTest() throws ApiException {
        String appId = null;
        String idempotencyKey = null;
        DashboardAccessOut response = api.v1AuthenticationDashboardAccess(appId, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Exchange One Time Token
     *
     * This is a one time token
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1AuthenticationExchangeOneTimeTokenTest() throws ApiException {
        OneTimeTokenIn oneTimeTokenIn = null;
        String idempotencyKey = null;
        OneTimeTokenOut response = api.v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Expire All
     *
     * Expire all of the tokens associated with a specific Application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1AuthenticationExpireAllTest() throws ApiException {
        String appId = null;
        ApplicationTokenExpireIn applicationTokenExpireIn = null;
        String idempotencyKey = null;
        api.v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey);

        // TODO: test validations
    }
    
    /**
     * Logout
     *
     * Logout an app token.  Trying to log out other tokens will fail.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void v1AuthenticationLogoutTest() throws ApiException {
        String idempotencyKey = null;
        api.v1AuthenticationLogout(idempotencyKey);

        // TODO: test validations
    }
    
}
