/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.xwebhook.internal.api;

import io.openweb3.xwebhook.internal.ApiCallback;
import io.openweb3.xwebhook.internal.ApiClient;
import io.openweb3.xwebhook.internal.ApiException;
import io.openweb3.xwebhook.internal.ApiResponse;
import io.openweb3.xwebhook.internal.Configuration;
import io.openweb3.xwebhook.internal.Pair;
import io.openweb3.xwebhook.internal.ProgressRequestBody;
import io.openweb3.xwebhook.internal.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.openweb3.xwebhook.models.HTTPValidationError;
import io.openweb3.xwebhook.models.HttpErrorOut;
import io.openweb3.xwebhook.models.ListResponseMessageOut;
import io.openweb3.xwebhook.models.MessageAttemptOut;
import io.openweb3.xwebhook.models.MessageIn;
import io.openweb3.xwebhook.models.MessageOut;
import io.openweb3.xwebhook.models.MessageRawPayloadOut;
import io.openweb3.xwebhook.models.MessageStreamOut;
import java.time.OffsetDateTime;
import java.util.Set;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageApi {
    private ApiClient localVarApiClient;

    public MessageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for createMessageAttemptForEndpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param messageIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessageAttemptForEndpointCall(String appId, String endpointId, MessageIn messageIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = messageIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/test-attempt"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createMessageAttemptForEndpointValidateBeforeCall(String appId, String endpointId, MessageIn messageIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling createMessageAttemptForEndpoint(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling createMessageAttemptForEndpoint(Async)");
        }
        
        // verify the required parameter 'messageIn' is set
        if (messageIn == null) {
            throw new ApiException("Missing the required parameter 'messageIn' when calling createMessageAttemptForEndpoint(Async)");
        }
        

        okhttp3.Call localVarCall = createMessageAttemptForEndpointCall(appId, endpointId, messageIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Create Message Attempt For Endpoint
     * Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned. FIXME: use MessageIn for expediency, even though the &#x60;application&#x60; parameter is unused. Since this endpoint isn&#39;t publicly documented anyway, it should be fine
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param messageIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return MessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public MessageAttemptOut createMessageAttemptForEndpoint(String appId, String endpointId, MessageIn messageIn, String idempotencyKey) throws ApiException {
        ApiResponse<MessageAttemptOut> localVarResp = createMessageAttemptForEndpointWithHttpInfo(appId, endpointId, messageIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Create Message Attempt For Endpoint
     * Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned. FIXME: use MessageIn for expediency, even though the &#x60;application&#x60; parameter is unused. Since this endpoint isn&#39;t publicly documented anyway, it should be fine
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param messageIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;MessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageAttemptOut> createMessageAttemptForEndpointWithHttpInfo(String appId, String endpointId, MessageIn messageIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = createMessageAttemptForEndpointValidateBeforeCall(appId, endpointId, messageIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<MessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Message Attempt For Endpoint (asynchronously)
     * Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned. FIXME: use MessageIn for expediency, even though the &#x60;application&#x60; parameter is unused. Since this endpoint isn&#39;t publicly documented anyway, it should be fine
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param messageIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createMessageAttemptForEndpointAsync(String appId, String endpointId, MessageIn messageIn, String idempotencyKey, final ApiCallback<MessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = createMessageAttemptForEndpointValidateBeforeCall(appId, endpointId, messageIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<MessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageCreate
     * @param appId The app&#39;s ID or UID (required)
     * @param messageIn  (required)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageCreateCall(String appId, MessageIn messageIn, Boolean withContent, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = messageIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_content", withContent));
        }

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageCreateValidateBeforeCall(String appId, MessageIn messageIn, Boolean withContent, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageCreate(Async)");
        }
        
        // verify the required parameter 'messageIn' is set
        if (messageIn == null) {
            throw new ApiException("Missing the required parameter 'messageIn' when calling v1MessageCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageCreateCall(appId, messageIn, withContent, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Create Message
     * Creates a new message and dispatches it to all of the application&#39;s endpoints.  The &#x60;eventId&#x60; is an optional custom unique ID. It&#39;s verified to be unique only up to a day, after that no verification will be made. If a message with the same &#x60;eventId&#x60; already exists for any application in your environment, a 409 conflict error will be returned.  The &#x60;eventType&#x60; indicates the type and schema of the event. All messages of a certain &#x60;eventType&#x60; are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have &#x60;channels&#x60;, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don&#39;t imply a specific message content or schema.  The &#x60;payload&#x60; property is the webhook&#39;s body (the actual webhook message). Xwebhook supports payload sizes of up to ~350kb, though it&#39;s generally a good idea to keep webhook payloads small, probably no larger than 40kb.
     * @param appId The app&#39;s ID or UID (required)
     * @param messageIn  (required)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return MessageOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public MessageOut v1MessageCreate(String appId, MessageIn messageIn, Boolean withContent, String idempotencyKey) throws ApiException {
        ApiResponse<MessageOut> localVarResp = v1MessageCreateWithHttpInfo(appId, messageIn, withContent, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Create Message
     * Creates a new message and dispatches it to all of the application&#39;s endpoints.  The &#x60;eventId&#x60; is an optional custom unique ID. It&#39;s verified to be unique only up to a day, after that no verification will be made. If a message with the same &#x60;eventId&#x60; already exists for any application in your environment, a 409 conflict error will be returned.  The &#x60;eventType&#x60; indicates the type and schema of the event. All messages of a certain &#x60;eventType&#x60; are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have &#x60;channels&#x60;, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don&#39;t imply a specific message content or schema.  The &#x60;payload&#x60; property is the webhook&#39;s body (the actual webhook message). Xwebhook supports payload sizes of up to ~350kb, though it&#39;s generally a good idea to keep webhook payloads small, probably no larger than 40kb.
     * @param appId The app&#39;s ID or UID (required)
     * @param messageIn  (required)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;MessageOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageOut> v1MessageCreateWithHttpInfo(String appId, MessageIn messageIn, Boolean withContent, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1MessageCreateValidateBeforeCall(appId, messageIn, withContent, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Message (asynchronously)
     * Creates a new message and dispatches it to all of the application&#39;s endpoints.  The &#x60;eventId&#x60; is an optional custom unique ID. It&#39;s verified to be unique only up to a day, after that no verification will be made. If a message with the same &#x60;eventId&#x60; already exists for any application in your environment, a 409 conflict error will be returned.  The &#x60;eventType&#x60; indicates the type and schema of the event. All messages of a certain &#x60;eventType&#x60; are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have &#x60;channels&#x60;, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don&#39;t imply a specific message content or schema.  The &#x60;payload&#x60; property is the webhook&#39;s body (the actual webhook message). Xwebhook supports payload sizes of up to ~350kb, though it&#39;s generally a good idea to keep webhook payloads small, probably no larger than 40kb.
     * @param appId The app&#39;s ID or UID (required)
     * @param messageIn  (required)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload too large </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageCreateAsync(String appId, MessageIn messageIn, Boolean withContent, String idempotencyKey, final ApiCallback<MessageOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageCreateValidateBeforeCall(appId, messageIn, withContent, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageExpungeContent
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageExpungeContentCall(String appId, String msgId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/content"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageExpungeContentValidateBeforeCall(String appId, String msgId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageExpungeContent(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageExpungeContent(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageExpungeContentCall(appId, msgId, _callback);
        return localVarCall;

    }

    /**
     * Delete message payload
     * Delete the given message&#39;s payload. Useful in cases when a message was accidentally sent with sensitive content.  The message can&#39;t be replayed or resent once its payload has been deleted or expired.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1MessageExpungeContent(String appId, String msgId) throws ApiException {
        v1MessageExpungeContentWithHttpInfo(appId, msgId);
    }

    /**
     * Delete message payload
     * Delete the given message&#39;s payload. Useful in cases when a message was accidentally sent with sensitive content.  The message can&#39;t be replayed or resent once its payload has been deleted or expired.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1MessageExpungeContentWithHttpInfo(String appId, String msgId) throws ApiException {
        okhttp3.Call localVarCall = v1MessageExpungeContentValidateBeforeCall(appId, msgId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete message payload (asynchronously)
     * Delete the given message&#39;s payload. Useful in cases when a message was accidentally sent with sensitive content.  The message can&#39;t be replayed or resent once its payload has been deleted or expired.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageExpungeContentAsync(String appId, String msgId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageExpungeContentValidateBeforeCall(appId, msgId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageGet
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageGetCall(String appId, String msgId, Boolean withContent, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (withContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_content", withContent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageGetValidateBeforeCall(String appId, String msgId, Boolean withContent, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageGet(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageGetCall(appId, msgId, withContent, _callback);
        return localVarCall;

    }

    /**
     * Get Message
     * Get a message by its ID or eventID.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @return MessageOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public MessageOut v1MessageGet(String appId, String msgId, Boolean withContent) throws ApiException {
        ApiResponse<MessageOut> localVarResp = v1MessageGetWithHttpInfo(appId, msgId, withContent);
        return localVarResp.getData();
    }

    /**
     * Get Message
     * Get a message by its ID or eventID.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @return ApiResponse&lt;MessageOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageOut> v1MessageGetWithHttpInfo(String appId, String msgId, Boolean withContent) throws ApiException {
        okhttp3.Call localVarCall = v1MessageGetValidateBeforeCall(appId, msgId, withContent, null);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Message (asynchronously)
     * Get a message by its ID or eventID.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageGetAsync(String appId, String msgId, Boolean withContent, final ApiCallback<MessageOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageGetValidateBeforeCall(appId, msgId, withContent, _callback);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageGetRawPayload
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageGetRawPayloadCall(String appId, String msgId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/raw"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageGetRawPayloadValidateBeforeCall(String appId, String msgId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageGetRawPayload(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageGetRawPayload(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageGetRawPayloadCall(appId, msgId, _callback);
        return localVarCall;

    }

    /**
     * Get Raw Message Payload
     * Get a message raw payload by its ID or eventID.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @return MessageRawPayloadOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public MessageRawPayloadOut v1MessageGetRawPayload(String appId, String msgId) throws ApiException {
        ApiResponse<MessageRawPayloadOut> localVarResp = v1MessageGetRawPayloadWithHttpInfo(appId, msgId);
        return localVarResp.getData();
    }

    /**
     * Get Raw Message Payload
     * Get a message raw payload by its ID or eventID.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @return ApiResponse&lt;MessageRawPayloadOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageRawPayloadOut> v1MessageGetRawPayloadWithHttpInfo(String appId, String msgId) throws ApiException {
        okhttp3.Call localVarCall = v1MessageGetRawPayloadValidateBeforeCall(appId, msgId, null);
        Type localVarReturnType = new TypeToken<MessageRawPayloadOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Raw Message Payload (asynchronously)
     * Get a message raw payload by its ID or eventID.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageGetRawPayloadAsync(String appId, String msgId, final ApiCallback<MessageRawPayloadOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageGetRawPayloadValidateBeforeCall(appId, msgId, _callback);
        Type localVarReturnType = new TypeToken<MessageRawPayloadOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageList
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param tag Filter messages matching the provided tag (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageListCall(String appId, Integer limit, String iterator, String channel, OffsetDateTime before, OffsetDateTime after, Boolean withContent, String tag, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (withContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_content", withContent));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageListValidateBeforeCall(String appId, Integer limit, String iterator, String channel, OffsetDateTime before, OffsetDateTime after, Boolean withContent, String tag, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageList(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageListCall(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _callback);
        return localVarCall;

    }

    /**
     * List Messages
     * List all of the application&#39;s messages.  The &#x60;before&#x60; and &#x60;after&#x60; parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param tag Filter messages matching the provided tag (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ListResponseMessageOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageOut v1MessageList(String appId, Integer limit, String iterator, String channel, OffsetDateTime before, OffsetDateTime after, Boolean withContent, String tag, Set<String> eventTypes) throws ApiException {
        ApiResponse<ListResponseMessageOut> localVarResp = v1MessageListWithHttpInfo(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes);
        return localVarResp.getData();
    }

    /**
     * List Messages
     * List all of the application&#39;s messages.  The &#x60;before&#x60; and &#x60;after&#x60; parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param tag Filter messages matching the provided tag (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ApiResponse&lt;ListResponseMessageOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageOut> v1MessageListWithHttpInfo(String appId, Integer limit, String iterator, String channel, OffsetDateTime before, OffsetDateTime after, Boolean withContent, String tag, Set<String> eventTypes) throws ApiException {
        okhttp3.Call localVarCall = v1MessageListValidateBeforeCall(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Messages (asynchronously)
     * List all of the application&#39;s messages.  The &#x60;before&#x60; and &#x60;after&#x60; parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param tag Filter messages matching the provided tag (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageListAsync(String appId, Integer limit, String iterator, String channel, OffsetDateTime before, OffsetDateTime after, Boolean withContent, String tag, Set<String> eventTypes, final ApiCallback<ListResponseMessageOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageListValidateBeforeCall(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageStream
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param channels Filter response based on the event type (optional)
     * @param after  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageStreamCall(String appId, Integer limit, String iterator, Set<String> eventTypes, Set<String> channels, OffsetDateTime after, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/events"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        if (channels != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "channels", channels));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageStreamValidateBeforeCall(String appId, Integer limit, String iterator, Set<String> eventTypes, Set<String> channels, OffsetDateTime after, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageStream(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageStreamCall(appId, limit, iterator, eventTypes, channels, after, _callback);
        return localVarCall;

    }

    /**
     * Stream Events
     * Reads the stream of created messages for an application
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param channels Filter response based on the event type (optional)
     * @param after  (optional)
     * @return MessageStreamOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public MessageStreamOut v1MessageStream(String appId, Integer limit, String iterator, Set<String> eventTypes, Set<String> channels, OffsetDateTime after) throws ApiException {
        ApiResponse<MessageStreamOut> localVarResp = v1MessageStreamWithHttpInfo(appId, limit, iterator, eventTypes, channels, after);
        return localVarResp.getData();
    }

    /**
     * Stream Events
     * Reads the stream of created messages for an application
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param channels Filter response based on the event type (optional)
     * @param after  (optional)
     * @return ApiResponse&lt;MessageStreamOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageStreamOut> v1MessageStreamWithHttpInfo(String appId, Integer limit, String iterator, Set<String> eventTypes, Set<String> channels, OffsetDateTime after) throws ApiException {
        okhttp3.Call localVarCall = v1MessageStreamValidateBeforeCall(appId, limit, iterator, eventTypes, channels, after, null);
        Type localVarReturnType = new TypeToken<MessageStreamOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream Events (asynchronously)
     * Reads the stream of created messages for an application
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param channels Filter response based on the event type (optional)
     * @param after  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageStreamAsync(String appId, Integer limit, String iterator, Set<String> eventTypes, Set<String> channels, OffsetDateTime after, final ApiCallback<MessageStreamOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageStreamValidateBeforeCall(appId, limit, iterator, eventTypes, channels, after, _callback);
        Type localVarReturnType = new TypeToken<MessageStreamOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
