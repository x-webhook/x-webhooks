/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.xwebhook.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.openweb3.xwebhook.models.ClientSecretJwtParamsIn;
import io.openweb3.xwebhook.models.Oauth2AuthMethodIn;
import io.openweb3.xwebhook.models.Oauth2GrantTypeIn;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * EndpointOauthConfigIn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-17T18:09:09.017597+08:00[Asia/Shanghai]")
public class EndpointOauthConfigIn {
  public static final String SERIALIZED_NAME_AUTH_METHOD = "authMethod";
  @SerializedName(SERIALIZED_NAME_AUTH_METHOD)
  private Oauth2AuthMethodIn authMethod;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_EXTRA_PARAMS = "extraParams";
  @SerializedName(SERIALIZED_NAME_EXTRA_PARAMS)
  private Map<String, String> extraParams = null;

  public static final String SERIALIZED_NAME_GRANT_TYPE = "grantType";
  @SerializedName(SERIALIZED_NAME_GRANT_TYPE)
  private Oauth2GrantTypeIn grantType;

  public static final String SERIALIZED_NAME_JWT_PARAMS = "jwtParams";
  @SerializedName(SERIALIZED_NAME_JWT_PARAMS)
  private ClientSecretJwtParamsIn jwtParams;

  public static final String SERIALIZED_NAME_REFRESH_TOKEN = "refreshToken";
  @SerializedName(SERIALIZED_NAME_REFRESH_TOKEN)
  private String refreshToken;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private List<String> scopes = null;

  public static final String SERIALIZED_NAME_TOKEN_URL = "tokenUrl";
  @SerializedName(SERIALIZED_NAME_TOKEN_URL)
  private URI tokenUrl;


  public EndpointOauthConfigIn authMethod(Oauth2AuthMethodIn authMethod) {
    
    this.authMethod = authMethod;
    return this;
  }

   /**
   * Get authMethod
   * @return authMethod
  **/
  @ApiModelProperty(required = true, value = "")

  public Oauth2AuthMethodIn getAuthMethod() {
    return authMethod;
  }


  public void setAuthMethod(Oauth2AuthMethodIn authMethod) {
    this.authMethod = authMethod;
  }


  public EndpointOauthConfigIn clientId(String clientId) {
    
    this.clientId = clientId;
    return this;
  }

   /**
   * The client ID. Required for all authentication types.
   * @return clientId
  **/
  @ApiModelProperty(required = true, value = "The client ID. Required for all authentication types.")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public EndpointOauthConfigIn clientSecret(String clientSecret) {
    
    this.clientSecret = clientSecret;
    return this;
  }

   /**
   * Optional client secret. This is only used for &#x60;clientSecretBasic&#x60; and &#x60;clientSecretPost&#x60;.  For &#x60;clientSecretBasic&#x60;, the secret will be appended to the &#x60;Authorization&#x60; header. For &#x60;clientSecretPost&#x60;, this will be added to the body in a &#x60;client_secret&#x60; parameter.
   * @return clientSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional client secret. This is only used for `clientSecretBasic` and `clientSecretPost`.  For `clientSecretBasic`, the secret will be appended to the `Authorization` header. For `clientSecretPost`, this will be added to the body in a `client_secret` parameter.")

  public String getClientSecret() {
    return clientSecret;
  }


  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public EndpointOauthConfigIn extraParams(Map<String, String> extraParams) {
    
    this.extraParams = extraParams;
    return this;
  }

  public EndpointOauthConfigIn putExtraParamsItem(String key, String extraParamsItem) {
    if (this.extraParams == null) {
      this.extraParams = new HashMap<>();
    }
    this.extraParams.put(key, extraParamsItem);
    return this;
  }

   /**
   * Extra parameters added to the request body as key-value pairs.
   * @return extraParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Extra parameters added to the request body as key-value pairs.")

  public Map<String, String> getExtraParams() {
    return extraParams;
  }


  public void setExtraParams(Map<String, String> extraParams) {
    this.extraParams = extraParams;
  }


  public EndpointOauthConfigIn grantType(Oauth2GrantTypeIn grantType) {
    
    this.grantType = grantType;
    return this;
  }

   /**
   * Get grantType
   * @return grantType
  **/
  @ApiModelProperty(required = true, value = "")

  public Oauth2GrantTypeIn getGrantType() {
    return grantType;
  }


  public void setGrantType(Oauth2GrantTypeIn grantType) {
    this.grantType = grantType;
  }


  public EndpointOauthConfigIn jwtParams(ClientSecretJwtParamsIn jwtParams) {
    
    this.jwtParams = jwtParams;
    return this;
  }

   /**
   * Get jwtParams
   * @return jwtParams
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ClientSecretJwtParamsIn getJwtParams() {
    return jwtParams;
  }


  public void setJwtParams(ClientSecretJwtParamsIn jwtParams) {
    this.jwtParams = jwtParams;
  }


  public EndpointOauthConfigIn refreshToken(String refreshToken) {
    
    this.refreshToken = refreshToken;
    return this;
  }

   /**
   * For &#x60;refreshToken&#x60; grant type
   * @return refreshToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "For `refreshToken` grant type")

  public String getRefreshToken() {
    return refreshToken;
  }


  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }


  public EndpointOauthConfigIn scopes(List<String> scopes) {
    
    this.scopes = scopes;
    return this;
  }

  public EndpointOauthConfigIn addScopesItem(String scopesItem) {
    if (this.scopes == null) {
      this.scopes = new ArrayList<>();
    }
    this.scopes.add(scopesItem);
    return this;
  }

   /**
   * Optional OAuth scopes added to the request body.
   * @return scopes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional OAuth scopes added to the request body.")

  public List<String> getScopes() {
    return scopes;
  }


  public void setScopes(List<String> scopes) {
    this.scopes = scopes;
  }


  public EndpointOauthConfigIn tokenUrl(URI tokenUrl) {
    
    this.tokenUrl = tokenUrl;
    return this;
  }

   /**
   * The URL of the authorization server.
   * @return tokenUrl
  **/
  @ApiModelProperty(required = true, value = "The URL of the authorization server.")

  public URI getTokenUrl() {
    return tokenUrl;
  }


  public void setTokenUrl(URI tokenUrl) {
    this.tokenUrl = tokenUrl;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EndpointOauthConfigIn endpointOauthConfigIn = (EndpointOauthConfigIn) o;
    return Objects.equals(this.authMethod, endpointOauthConfigIn.authMethod) &&
        Objects.equals(this.clientId, endpointOauthConfigIn.clientId) &&
        Objects.equals(this.clientSecret, endpointOauthConfigIn.clientSecret) &&
        Objects.equals(this.extraParams, endpointOauthConfigIn.extraParams) &&
        Objects.equals(this.grantType, endpointOauthConfigIn.grantType) &&
        Objects.equals(this.jwtParams, endpointOauthConfigIn.jwtParams) &&
        Objects.equals(this.refreshToken, endpointOauthConfigIn.refreshToken) &&
        Objects.equals(this.scopes, endpointOauthConfigIn.scopes) &&
        Objects.equals(this.tokenUrl, endpointOauthConfigIn.tokenUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authMethod, clientId, clientSecret, extraParams, grantType, jwtParams, refreshToken, scopes, tokenUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EndpointOauthConfigIn {\n");
    sb.append("    authMethod: ").append(toIndentedString(authMethod)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    extraParams: ").append(toIndentedString(extraParams)).append("\n");
    sb.append("    grantType: ").append(toIndentedString(grantType)).append("\n");
    sb.append("    jwtParams: ").append(toIndentedString(jwtParams)).append("\n");
    sb.append("    refreshToken: ").append(toIndentedString(refreshToken)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    tokenUrl: ").append(toIndentedString(tokenUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

