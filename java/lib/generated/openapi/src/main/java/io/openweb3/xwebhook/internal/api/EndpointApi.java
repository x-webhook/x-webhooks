/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.xwebhook.internal.api;

import io.openweb3.xwebhook.internal.ApiCallback;
import io.openweb3.xwebhook.internal.ApiClient;
import io.openweb3.xwebhook.internal.ApiException;
import io.openweb3.xwebhook.internal.ApiResponse;
import io.openweb3.xwebhook.internal.Configuration;
import io.openweb3.xwebhook.internal.Pair;
import io.openweb3.xwebhook.internal.ProgressRequestBody;
import io.openweb3.xwebhook.internal.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.openweb3.xwebhook.models.EndpointHeadersIn;
import io.openweb3.xwebhook.models.EndpointHeadersOut;
import io.openweb3.xwebhook.models.EndpointHeadersPatchIn;
import io.openweb3.xwebhook.models.EndpointIn;
import io.openweb3.xwebhook.models.EndpointMtlsConfigIn;
import io.openweb3.xwebhook.models.EndpointOauthConfigIn;
import io.openweb3.xwebhook.models.EndpointOut;
import io.openweb3.xwebhook.models.EndpointPatch;
import io.openweb3.xwebhook.models.EndpointSecretOut;
import io.openweb3.xwebhook.models.EndpointSecretRotateIn;
import io.openweb3.xwebhook.models.EndpointStats;
import io.openweb3.xwebhook.models.EndpointTransformationIn;
import io.openweb3.xwebhook.models.EndpointTransformationOut;
import io.openweb3.xwebhook.models.EndpointTransformationSimulateIn;
import io.openweb3.xwebhook.models.EndpointTransformationSimulateOut;
import io.openweb3.xwebhook.models.EndpointUpdate;
import io.openweb3.xwebhook.models.EventExampleIn;
import io.openweb3.xwebhook.models.HTTPValidationError;
import io.openweb3.xwebhook.models.HttpErrorOut;
import io.openweb3.xwebhook.models.ListResponseEndpointOut;
import io.openweb3.xwebhook.models.MessageOut;
import java.time.OffsetDateTime;
import io.openweb3.xwebhook.models.Ordering;
import io.openweb3.xwebhook.models.RecoverIn;
import io.openweb3.xwebhook.models.RecoverOut;
import io.openweb3.xwebhook.models.ReplayIn;
import io.openweb3.xwebhook.models.ReplayOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EndpointApi {
    private ApiClient localVarApiClient;

    public EndpointApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EndpointApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1EndpointCreate
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointCreateCall(String appId, EndpointIn endpointIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointCreateValidateBeforeCall(String appId, EndpointIn endpointIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointCreate(Async)");
        }
        
        // verify the required parameter 'endpointIn' is set
        if (endpointIn == null) {
            throw new ApiException("Missing the required parameter 'endpointIn' when calling v1EndpointCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointCreateCall(appId, endpointIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Create Endpoint
     * Create a new endpoint for the application.  When &#x60;secret&#x60; is &#x60;null&#x60; the secret is automatically generated (recommended)
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return EndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EndpointOut v1EndpointCreate(String appId, EndpointIn endpointIn, String idempotencyKey) throws ApiException {
        ApiResponse<EndpointOut> localVarResp = v1EndpointCreateWithHttpInfo(appId, endpointIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Create Endpoint
     * Create a new endpoint for the application.  When &#x60;secret&#x60; is &#x60;null&#x60; the secret is automatically generated (recommended)
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;EndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointOut> v1EndpointCreateWithHttpInfo(String appId, EndpointIn endpointIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointCreateValidateBeforeCall(appId, endpointIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Endpoint (asynchronously)
     * Create a new endpoint for the application.  When &#x60;secret&#x60; is &#x60;null&#x60; the secret is automatically generated (recommended)
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointCreateAsync(String appId, EndpointIn endpointIn, String idempotencyKey, final ApiCallback<EndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointCreateValidateBeforeCall(appId, endpointIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointDelete
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointDeleteCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointDeleteValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointDelete(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointDeleteCall(appId, endpointId, _callback);
        return localVarCall;

    }

    /**
     * Delete Endpoint
     * Delete an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EndpointDelete(String appId, String endpointId) throws ApiException {
        v1EndpointDeleteWithHttpInfo(appId, endpointId);
    }

    /**
     * Delete Endpoint
     * Delete an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EndpointDeleteWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointDeleteValidateBeforeCall(appId, endpointId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Endpoint (asynchronously)
     * Delete an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointDeleteAsync(String appId, String endpointId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointDeleteValidateBeforeCall(appId, endpointId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointDeleteMtlsConfig
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointDeleteMtlsConfigCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointDeleteMtlsConfigValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointDeleteMtlsConfig(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointDeleteMtlsConfig(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointDeleteMtlsConfigCall(appId, endpointId, _callback);
        return localVarCall;

    }

    /**
     * Delete Endpoint Mtls Config
     * Delete endpoint mTLS configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EndpointDeleteMtlsConfig(String appId, String endpointId) throws ApiException {
        v1EndpointDeleteMtlsConfigWithHttpInfo(appId, endpointId);
    }

    /**
     * Delete Endpoint Mtls Config
     * Delete endpoint mTLS configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EndpointDeleteMtlsConfigWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointDeleteMtlsConfigValidateBeforeCall(appId, endpointId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Endpoint Mtls Config (asynchronously)
     * Delete endpoint mTLS configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointDeleteMtlsConfigAsync(String appId, String endpointId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointDeleteMtlsConfigValidateBeforeCall(appId, endpointId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointDeleteOauthConfig
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointDeleteOauthConfigCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointDeleteOauthConfigValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointDeleteOauthConfig(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointDeleteOauthConfig(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointDeleteOauthConfigCall(appId, endpointId, _callback);
        return localVarCall;

    }

    /**
     * Delete Endpoint Oauth Config
     * Delete endpoint OAuth configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EndpointDeleteOauthConfig(String appId, String endpointId) throws ApiException {
        v1EndpointDeleteOauthConfigWithHttpInfo(appId, endpointId);
    }

    /**
     * Delete Endpoint Oauth Config
     * Delete endpoint OAuth configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EndpointDeleteOauthConfigWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointDeleteOauthConfigValidateBeforeCall(appId, endpointId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Endpoint Oauth Config (asynchronously)
     * Delete endpoint OAuth configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointDeleteOauthConfigAsync(String appId, String endpointId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointDeleteOauthConfigValidateBeforeCall(appId, endpointId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointGet
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointGetCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointGetValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointGet(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointGetCall(appId, endpointId, _callback);
        return localVarCall;

    }

    /**
     * Get Endpoint
     * Get an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return EndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EndpointOut v1EndpointGet(String appId, String endpointId) throws ApiException {
        ApiResponse<EndpointOut> localVarResp = v1EndpointGetWithHttpInfo(appId, endpointId);
        return localVarResp.getData();
    }

    /**
     * Get Endpoint
     * Get an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return ApiResponse&lt;EndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointOut> v1EndpointGetWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointGetValidateBeforeCall(appId, endpointId, null);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Endpoint (asynchronously)
     * Get an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointGetAsync(String appId, String endpointId, final ApiCallback<EndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointGetValidateBeforeCall(appId, endpointId, _callback);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointGetHeaders
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointGetHeadersCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointGetHeadersValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointGetHeaders(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointGetHeaders(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointGetHeadersCall(appId, endpointId, _callback);
        return localVarCall;

    }

    /**
     * Get Endpoint Headers
     * Get the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return EndpointHeadersOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EndpointHeadersOut v1EndpointGetHeaders(String appId, String endpointId) throws ApiException {
        ApiResponse<EndpointHeadersOut> localVarResp = v1EndpointGetHeadersWithHttpInfo(appId, endpointId);
        return localVarResp.getData();
    }

    /**
     * Get Endpoint Headers
     * Get the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return ApiResponse&lt;EndpointHeadersOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointHeadersOut> v1EndpointGetHeadersWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointGetHeadersValidateBeforeCall(appId, endpointId, null);
        Type localVarReturnType = new TypeToken<EndpointHeadersOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Endpoint Headers (asynchronously)
     * Get the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointGetHeadersAsync(String appId, String endpointId, final ApiCallback<EndpointHeadersOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointGetHeadersValidateBeforeCall(appId, endpointId, _callback);
        Type localVarReturnType = new TypeToken<EndpointHeadersOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointGetSecret
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointGetSecretCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointGetSecretValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointGetSecret(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointGetSecret(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointGetSecretCall(appId, endpointId, _callback);
        return localVarCall;

    }

    /**
     * Get Endpoint Secret
     * Get the endpoint&#39;s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.webhook.openweb3.io/consuming-webhooks/).
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return EndpointSecretOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EndpointSecretOut v1EndpointGetSecret(String appId, String endpointId) throws ApiException {
        ApiResponse<EndpointSecretOut> localVarResp = v1EndpointGetSecretWithHttpInfo(appId, endpointId);
        return localVarResp.getData();
    }

    /**
     * Get Endpoint Secret
     * Get the endpoint&#39;s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.webhook.openweb3.io/consuming-webhooks/).
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return ApiResponse&lt;EndpointSecretOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointSecretOut> v1EndpointGetSecretWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointGetSecretValidateBeforeCall(appId, endpointId, null);
        Type localVarReturnType = new TypeToken<EndpointSecretOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Endpoint Secret (asynchronously)
     * Get the endpoint&#39;s signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.webhook.openweb3.io/consuming-webhooks/).
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointGetSecretAsync(String appId, String endpointId, final ApiCallback<EndpointSecretOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointGetSecretValidateBeforeCall(appId, endpointId, _callback);
        Type localVarReturnType = new TypeToken<EndpointSecretOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointGetStats
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param since Filter the range to data starting from this date (optional)
     * @param until Filter the range to data ending by this date (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointGetStatsCall(String appId, String endpointId, OffsetDateTime since, OffsetDateTime until, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (until != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("until", until));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointGetStatsValidateBeforeCall(String appId, String endpointId, OffsetDateTime since, OffsetDateTime until, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointGetStats(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointGetStats(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointGetStatsCall(appId, endpointId, since, until, _callback);
        return localVarCall;

    }

    /**
     * Endpoint Stats
     * Get basic statistics for the endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param since Filter the range to data starting from this date (optional)
     * @param until Filter the range to data ending by this date (optional)
     * @return EndpointStats
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EndpointStats v1EndpointGetStats(String appId, String endpointId, OffsetDateTime since, OffsetDateTime until) throws ApiException {
        ApiResponse<EndpointStats> localVarResp = v1EndpointGetStatsWithHttpInfo(appId, endpointId, since, until);
        return localVarResp.getData();
    }

    /**
     * Endpoint Stats
     * Get basic statistics for the endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param since Filter the range to data starting from this date (optional)
     * @param until Filter the range to data ending by this date (optional)
     * @return ApiResponse&lt;EndpointStats&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointStats> v1EndpointGetStatsWithHttpInfo(String appId, String endpointId, OffsetDateTime since, OffsetDateTime until) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointGetStatsValidateBeforeCall(appId, endpointId, since, until, null);
        Type localVarReturnType = new TypeToken<EndpointStats>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Endpoint Stats (asynchronously)
     * Get basic statistics for the endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param since Filter the range to data starting from this date (optional)
     * @param until Filter the range to data ending by this date (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointGetStatsAsync(String appId, String endpointId, OffsetDateTime since, OffsetDateTime until, final ApiCallback<EndpointStats> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointGetStatsValidateBeforeCall(appId, endpointId, since, until, _callback);
        Type localVarReturnType = new TypeToken<EndpointStats>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointList
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param order The sorting order of the returned items (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointListCall(String appId, Integer limit, String iterator, Ordering order, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointListValidateBeforeCall(String appId, Integer limit, String iterator, Ordering order, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointList(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointListCall(appId, limit, iterator, order, _callback);
        return localVarCall;

    }

    /**
     * List Endpoints
     * List the application&#39;s endpoints.
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param order The sorting order of the returned items (optional)
     * @return ListResponseEndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseEndpointOut v1EndpointList(String appId, Integer limit, String iterator, Ordering order) throws ApiException {
        ApiResponse<ListResponseEndpointOut> localVarResp = v1EndpointListWithHttpInfo(appId, limit, iterator, order);
        return localVarResp.getData();
    }

    /**
     * List Endpoints
     * List the application&#39;s endpoints.
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param order The sorting order of the returned items (optional)
     * @return ApiResponse&lt;ListResponseEndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseEndpointOut> v1EndpointListWithHttpInfo(String appId, Integer limit, String iterator, Ordering order) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointListValidateBeforeCall(appId, limit, iterator, order, null);
        Type localVarReturnType = new TypeToken<ListResponseEndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Endpoints (asynchronously)
     * List the application&#39;s endpoints.
     * @param appId The app&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param order The sorting order of the returned items (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointListAsync(String appId, Integer limit, String iterator, Ordering order, final ApiCallback<ListResponseEndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointListValidateBeforeCall(appId, limit, iterator, order, _callback);
        Type localVarReturnType = new TypeToken<ListResponseEndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointPatch
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointPatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointPatchCall(String appId, String endpointId, EndpointPatch endpointPatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointPatch;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointPatchValidateBeforeCall(String appId, String endpointId, EndpointPatch endpointPatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointPatch(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointPatch(Async)");
        }
        
        // verify the required parameter 'endpointPatch' is set
        if (endpointPatch == null) {
            throw new ApiException("Missing the required parameter 'endpointPatch' when calling v1EndpointPatch(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointPatchCall(appId, endpointId, endpointPatch, _callback);
        return localVarCall;

    }

    /**
     * Patch Endpoint
     * Partially update an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointPatch  (required)
     * @return EndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EndpointOut v1EndpointPatch(String appId, String endpointId, EndpointPatch endpointPatch) throws ApiException {
        ApiResponse<EndpointOut> localVarResp = v1EndpointPatchWithHttpInfo(appId, endpointId, endpointPatch);
        return localVarResp.getData();
    }

    /**
     * Patch Endpoint
     * Partially update an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointPatch  (required)
     * @return ApiResponse&lt;EndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointOut> v1EndpointPatchWithHttpInfo(String appId, String endpointId, EndpointPatch endpointPatch) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointPatchValidateBeforeCall(appId, endpointId, endpointPatch, null);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Endpoint (asynchronously)
     * Partially update an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointPatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointPatchAsync(String appId, String endpointId, EndpointPatch endpointPatch, final ApiCallback<EndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointPatchValidateBeforeCall(appId, endpointId, endpointPatch, _callback);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointPatchHeaders
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersPatchIn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointPatchHeadersCall(String appId, String endpointId, EndpointHeadersPatchIn endpointHeadersPatchIn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointHeadersPatchIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointPatchHeadersValidateBeforeCall(String appId, String endpointId, EndpointHeadersPatchIn endpointHeadersPatchIn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointPatchHeaders(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointPatchHeaders(Async)");
        }
        
        // verify the required parameter 'endpointHeadersPatchIn' is set
        if (endpointHeadersPatchIn == null) {
            throw new ApiException("Missing the required parameter 'endpointHeadersPatchIn' when calling v1EndpointPatchHeaders(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointPatchHeadersCall(appId, endpointId, endpointHeadersPatchIn, _callback);
        return localVarCall;

    }

    /**
     * Patch Endpoint Headers
     * Partially set the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersPatchIn  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EndpointPatchHeaders(String appId, String endpointId, EndpointHeadersPatchIn endpointHeadersPatchIn) throws ApiException {
        v1EndpointPatchHeadersWithHttpInfo(appId, endpointId, endpointHeadersPatchIn);
    }

    /**
     * Patch Endpoint Headers
     * Partially set the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersPatchIn  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EndpointPatchHeadersWithHttpInfo(String appId, String endpointId, EndpointHeadersPatchIn endpointHeadersPatchIn) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointPatchHeadersValidateBeforeCall(appId, endpointId, endpointHeadersPatchIn, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Patch Endpoint Headers (asynchronously)
     * Partially set the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersPatchIn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointPatchHeadersAsync(String appId, String endpointId, EndpointHeadersPatchIn endpointHeadersPatchIn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointPatchHeadersValidateBeforeCall(appId, endpointId, endpointHeadersPatchIn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointRecover
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param recoverIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointRecoverCall(String appId, String endpointId, RecoverIn recoverIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = recoverIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointRecoverValidateBeforeCall(String appId, String endpointId, RecoverIn recoverIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointRecover(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointRecover(Async)");
        }
        
        // verify the required parameter 'recoverIn' is set
        if (recoverIn == null) {
            throw new ApiException("Missing the required parameter 'recoverIn' when calling v1EndpointRecover(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointRecoverCall(appId, endpointId, recoverIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Recover Failed Webhooks
     * Resend all failed messages since a given time.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param recoverIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return RecoverOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public RecoverOut v1EndpointRecover(String appId, String endpointId, RecoverIn recoverIn, String idempotencyKey) throws ApiException {
        ApiResponse<RecoverOut> localVarResp = v1EndpointRecoverWithHttpInfo(appId, endpointId, recoverIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Recover Failed Webhooks
     * Resend all failed messages since a given time.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param recoverIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;RecoverOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecoverOut> v1EndpointRecoverWithHttpInfo(String appId, String endpointId, RecoverIn recoverIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointRecoverValidateBeforeCall(appId, endpointId, recoverIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<RecoverOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Recover Failed Webhooks (asynchronously)
     * Resend all failed messages since a given time.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param recoverIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointRecoverAsync(String appId, String endpointId, RecoverIn recoverIn, String idempotencyKey, final ApiCallback<RecoverOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointRecoverValidateBeforeCall(appId, endpointId, recoverIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<RecoverOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointReplay
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param replayIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointReplayCall(String appId, String endpointId, ReplayIn replayIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = replayIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointReplayValidateBeforeCall(String appId, String endpointId, ReplayIn replayIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointReplay(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointReplay(Async)");
        }
        
        // verify the required parameter 'replayIn' is set
        if (replayIn == null) {
            throw new ApiException("Missing the required parameter 'replayIn' when calling v1EndpointReplay(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointReplayCall(appId, endpointId, replayIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Replay Missing Webhooks
     * Replays messages to the endpoint. Only messages that were created after &#x60;since&#x60; will be sent. Messages that were previously sent to the endpoint are not resent.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param replayIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ReplayOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ReplayOut v1EndpointReplay(String appId, String endpointId, ReplayIn replayIn, String idempotencyKey) throws ApiException {
        ApiResponse<ReplayOut> localVarResp = v1EndpointReplayWithHttpInfo(appId, endpointId, replayIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Replay Missing Webhooks
     * Replays messages to the endpoint. Only messages that were created after &#x60;since&#x60; will be sent. Messages that were previously sent to the endpoint are not resent.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param replayIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;ReplayOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReplayOut> v1EndpointReplayWithHttpInfo(String appId, String endpointId, ReplayIn replayIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointReplayValidateBeforeCall(appId, endpointId, replayIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ReplayOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Replay Missing Webhooks (asynchronously)
     * Replays messages to the endpoint. Only messages that were created after &#x60;since&#x60; will be sent. Messages that were previously sent to the endpoint are not resent.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param replayIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointReplayAsync(String appId, String endpointId, ReplayIn replayIn, String idempotencyKey, final ApiCallback<ReplayOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointReplayValidateBeforeCall(appId, endpointId, replayIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ReplayOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointRotateSecret
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointSecretRotateIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointRotateSecretCall(String appId, String endpointId, EndpointSecretRotateIn endpointSecretRotateIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointSecretRotateIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointRotateSecretValidateBeforeCall(String appId, String endpointId, EndpointSecretRotateIn endpointSecretRotateIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointRotateSecret(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointRotateSecret(Async)");
        }
        
        // verify the required parameter 'endpointSecretRotateIn' is set
        if (endpointSecretRotateIn == null) {
            throw new ApiException("Missing the required parameter 'endpointSecretRotateIn' when calling v1EndpointRotateSecret(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointRotateSecretCall(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Rotate Endpoint Secret
     * Rotates the endpoint&#39;s signing secret.  The previous secret will be valid for the next 24 hours.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointSecretRotateIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EndpointRotateSecret(String appId, String endpointId, EndpointSecretRotateIn endpointSecretRotateIn, String idempotencyKey) throws ApiException {
        v1EndpointRotateSecretWithHttpInfo(appId, endpointId, endpointSecretRotateIn, idempotencyKey);
    }

    /**
     * Rotate Endpoint Secret
     * Rotates the endpoint&#39;s signing secret.  The previous secret will be valid for the next 24 hours.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointSecretRotateIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EndpointRotateSecretWithHttpInfo(String appId, String endpointId, EndpointSecretRotateIn endpointSecretRotateIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointRotateSecretValidateBeforeCall(appId, endpointId, endpointSecretRotateIn, idempotencyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rotate Endpoint Secret (asynchronously)
     * Rotates the endpoint&#39;s signing secret.  The previous secret will be valid for the next 24 hours.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointSecretRotateIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointRotateSecretAsync(String appId, String endpointId, EndpointSecretRotateIn endpointSecretRotateIn, String idempotencyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointRotateSecretValidateBeforeCall(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointSendExample
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param eventExampleIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointSendExampleCall(String appId, String endpointId, EventExampleIn eventExampleIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eventExampleIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointSendExampleValidateBeforeCall(String appId, String endpointId, EventExampleIn eventExampleIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointSendExample(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointSendExample(Async)");
        }
        
        // verify the required parameter 'eventExampleIn' is set
        if (eventExampleIn == null) {
            throw new ApiException("Missing the required parameter 'eventExampleIn' when calling v1EndpointSendExample(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointSendExampleCall(appId, endpointId, eventExampleIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Send Event Type Example Message
     * Send an example message for event
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param eventExampleIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return MessageOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public MessageOut v1EndpointSendExample(String appId, String endpointId, EventExampleIn eventExampleIn, String idempotencyKey) throws ApiException {
        ApiResponse<MessageOut> localVarResp = v1EndpointSendExampleWithHttpInfo(appId, endpointId, eventExampleIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Send Event Type Example Message
     * Send an example message for event
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param eventExampleIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;MessageOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageOut> v1EndpointSendExampleWithHttpInfo(String appId, String endpointId, EventExampleIn eventExampleIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointSendExampleValidateBeforeCall(appId, endpointId, eventExampleIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send Event Type Example Message (asynchronously)
     * Send an example message for event
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param eventExampleIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointSendExampleAsync(String appId, String endpointId, EventExampleIn eventExampleIn, String idempotencyKey, final ApiCallback<MessageOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointSendExampleValidateBeforeCall(appId, endpointId, eventExampleIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<MessageOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointTransformationGet
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointTransformationGetCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointTransformationGetValidateBeforeCall(String appId, String endpointId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointTransformationGet(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointTransformationGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointTransformationGetCall(appId, endpointId, _callback);
        return localVarCall;

    }

    /**
     * Get Endpoint Transformation
     * Get the transformation code associated with this endpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return EndpointTransformationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EndpointTransformationOut v1EndpointTransformationGet(String appId, String endpointId) throws ApiException {
        ApiResponse<EndpointTransformationOut> localVarResp = v1EndpointTransformationGetWithHttpInfo(appId, endpointId);
        return localVarResp.getData();
    }

    /**
     * Get Endpoint Transformation
     * Get the transformation code associated with this endpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @return ApiResponse&lt;EndpointTransformationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointTransformationOut> v1EndpointTransformationGetWithHttpInfo(String appId, String endpointId) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointTransformationGetValidateBeforeCall(appId, endpointId, null);
        Type localVarReturnType = new TypeToken<EndpointTransformationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Endpoint Transformation (asynchronously)
     * Get the transformation code associated with this endpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointTransformationGetAsync(String appId, String endpointId, final ApiCallback<EndpointTransformationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointTransformationGetValidateBeforeCall(appId, endpointId, _callback);
        Type localVarReturnType = new TypeToken<EndpointTransformationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointTransformationPartialUpdate
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointTransformationIn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointTransformationPartialUpdateCall(String appId, String endpointId, EndpointTransformationIn endpointTransformationIn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointTransformationIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointTransformationPartialUpdateValidateBeforeCall(String appId, String endpointId, EndpointTransformationIn endpointTransformationIn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointTransformationPartialUpdate(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointTransformationPartialUpdate(Async)");
        }
        
        // verify the required parameter 'endpointTransformationIn' is set
        if (endpointTransformationIn == null) {
            throw new ApiException("Missing the required parameter 'endpointTransformationIn' when calling v1EndpointTransformationPartialUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointTransformationPartialUpdateCall(appId, endpointId, endpointTransformationIn, _callback);
        return localVarCall;

    }

    /**
     * Set Endpoint Transformation
     * Set or unset the transformation code associated with this endpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointTransformationIn  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EndpointTransformationPartialUpdate(String appId, String endpointId, EndpointTransformationIn endpointTransformationIn) throws ApiException {
        v1EndpointTransformationPartialUpdateWithHttpInfo(appId, endpointId, endpointTransformationIn);
    }

    /**
     * Set Endpoint Transformation
     * Set or unset the transformation code associated with this endpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointTransformationIn  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EndpointTransformationPartialUpdateWithHttpInfo(String appId, String endpointId, EndpointTransformationIn endpointTransformationIn) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointTransformationPartialUpdateValidateBeforeCall(appId, endpointId, endpointTransformationIn, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set Endpoint Transformation (asynchronously)
     * Set or unset the transformation code associated with this endpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointTransformationIn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointTransformationPartialUpdateAsync(String appId, String endpointId, EndpointTransformationIn endpointTransformationIn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointTransformationPartialUpdateValidateBeforeCall(appId, endpointId, endpointTransformationIn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointTransformationSimulate
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointTransformationSimulateIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointTransformationSimulateCall(String appId, String endpointId, EndpointTransformationSimulateIn endpointTransformationSimulateIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointTransformationSimulateIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointTransformationSimulateValidateBeforeCall(String appId, String endpointId, EndpointTransformationSimulateIn endpointTransformationSimulateIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointTransformationSimulate(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointTransformationSimulate(Async)");
        }
        
        // verify the required parameter 'endpointTransformationSimulateIn' is set
        if (endpointTransformationSimulateIn == null) {
            throw new ApiException("Missing the required parameter 'endpointTransformationSimulateIn' when calling v1EndpointTransformationSimulate(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointTransformationSimulateCall(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Simulate
     * Simulate running the transformation on the payload and code
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointTransformationSimulateIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return EndpointTransformationSimulateOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EndpointTransformationSimulateOut v1EndpointTransformationSimulate(String appId, String endpointId, EndpointTransformationSimulateIn endpointTransformationSimulateIn, String idempotencyKey) throws ApiException {
        ApiResponse<EndpointTransformationSimulateOut> localVarResp = v1EndpointTransformationSimulateWithHttpInfo(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Simulate
     * Simulate running the transformation on the payload and code
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointTransformationSimulateIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;EndpointTransformationSimulateOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointTransformationSimulateOut> v1EndpointTransformationSimulateWithHttpInfo(String appId, String endpointId, EndpointTransformationSimulateIn endpointTransformationSimulateIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointTransformationSimulateValidateBeforeCall(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<EndpointTransformationSimulateOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simulate (asynchronously)
     * Simulate running the transformation on the payload and code
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointTransformationSimulateIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointTransformationSimulateAsync(String appId, String endpointId, EndpointTransformationSimulateIn endpointTransformationSimulateIn, String idempotencyKey, final ApiCallback<EndpointTransformationSimulateOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointTransformationSimulateValidateBeforeCall(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<EndpointTransformationSimulateOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointUpdate
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointUpdateCall(String appId, String endpointId, EndpointUpdate endpointUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointUpdateValidateBeforeCall(String appId, String endpointId, EndpointUpdate endpointUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointUpdate(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointUpdate(Async)");
        }
        
        // verify the required parameter 'endpointUpdate' is set
        if (endpointUpdate == null) {
            throw new ApiException("Missing the required parameter 'endpointUpdate' when calling v1EndpointUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointUpdateCall(appId, endpointId, endpointUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update Endpoint
     * Update an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointUpdate  (required)
     * @return EndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EndpointOut v1EndpointUpdate(String appId, String endpointId, EndpointUpdate endpointUpdate) throws ApiException {
        ApiResponse<EndpointOut> localVarResp = v1EndpointUpdateWithHttpInfo(appId, endpointId, endpointUpdate);
        return localVarResp.getData();
    }

    /**
     * Update Endpoint
     * Update an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointUpdate  (required)
     * @return ApiResponse&lt;EndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EndpointOut> v1EndpointUpdateWithHttpInfo(String appId, String endpointId, EndpointUpdate endpointUpdate) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointUpdateValidateBeforeCall(appId, endpointId, endpointUpdate, null);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Endpoint (asynchronously)
     * Update an endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointUpdateAsync(String appId, String endpointId, EndpointUpdate endpointUpdate, final ApiCallback<EndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointUpdateValidateBeforeCall(appId, endpointId, endpointUpdate, _callback);
        Type localVarReturnType = new TypeToken<EndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointUpdateHeaders
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersIn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointUpdateHeadersCall(String appId, String endpointId, EndpointHeadersIn endpointHeadersIn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointHeadersIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointUpdateHeadersValidateBeforeCall(String appId, String endpointId, EndpointHeadersIn endpointHeadersIn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointUpdateHeaders(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointUpdateHeaders(Async)");
        }
        
        // verify the required parameter 'endpointHeadersIn' is set
        if (endpointHeadersIn == null) {
            throw new ApiException("Missing the required parameter 'endpointHeadersIn' when calling v1EndpointUpdateHeaders(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointUpdateHeadersCall(appId, endpointId, endpointHeadersIn, _callback);
        return localVarCall;

    }

    /**
     * Update Endpoint Headers
     * Set the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersIn  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EndpointUpdateHeaders(String appId, String endpointId, EndpointHeadersIn endpointHeadersIn) throws ApiException {
        v1EndpointUpdateHeadersWithHttpInfo(appId, endpointId, endpointHeadersIn);
    }

    /**
     * Update Endpoint Headers
     * Set the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersIn  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EndpointUpdateHeadersWithHttpInfo(String appId, String endpointId, EndpointHeadersIn endpointHeadersIn) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointUpdateHeadersValidateBeforeCall(appId, endpointId, endpointHeadersIn, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Endpoint Headers (asynchronously)
     * Set the additional headers to be sent with the webhook
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointHeadersIn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointUpdateHeadersAsync(String appId, String endpointId, EndpointHeadersIn endpointHeadersIn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointUpdateHeadersValidateBeforeCall(appId, endpointId, endpointHeadersIn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointUpdateMtlsConfig
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointMtlsConfigIn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointUpdateMtlsConfigCall(String appId, String endpointId, EndpointMtlsConfigIn endpointMtlsConfigIn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointMtlsConfigIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointUpdateMtlsConfigValidateBeforeCall(String appId, String endpointId, EndpointMtlsConfigIn endpointMtlsConfigIn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointUpdateMtlsConfig(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointUpdateMtlsConfig(Async)");
        }
        
        // verify the required parameter 'endpointMtlsConfigIn' is set
        if (endpointMtlsConfigIn == null) {
            throw new ApiException("Missing the required parameter 'endpointMtlsConfigIn' when calling v1EndpointUpdateMtlsConfig(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointUpdateMtlsConfigCall(appId, endpointId, endpointMtlsConfigIn, _callback);
        return localVarCall;

    }

    /**
     * Update Endpoint Mtls Config
     * Create/update endpoint mTLS configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointMtlsConfigIn  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EndpointUpdateMtlsConfig(String appId, String endpointId, EndpointMtlsConfigIn endpointMtlsConfigIn) throws ApiException {
        v1EndpointUpdateMtlsConfigWithHttpInfo(appId, endpointId, endpointMtlsConfigIn);
    }

    /**
     * Update Endpoint Mtls Config
     * Create/update endpoint mTLS configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointMtlsConfigIn  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EndpointUpdateMtlsConfigWithHttpInfo(String appId, String endpointId, EndpointMtlsConfigIn endpointMtlsConfigIn) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointUpdateMtlsConfigValidateBeforeCall(appId, endpointId, endpointMtlsConfigIn, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Endpoint Mtls Config (asynchronously)
     * Create/update endpoint mTLS configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointMtlsConfigIn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointUpdateMtlsConfigAsync(String appId, String endpointId, EndpointMtlsConfigIn endpointMtlsConfigIn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointUpdateMtlsConfigValidateBeforeCall(appId, endpointId, endpointMtlsConfigIn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EndpointUpdateOauthConfig
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointOauthConfigIn  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointUpdateOauthConfigCall(String appId, String endpointId, EndpointOauthConfigIn endpointOauthConfigIn, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = endpointOauthConfigIn;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EndpointUpdateOauthConfigValidateBeforeCall(String appId, String endpointId, EndpointOauthConfigIn endpointOauthConfigIn, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1EndpointUpdateOauthConfig(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1EndpointUpdateOauthConfig(Async)");
        }
        
        // verify the required parameter 'endpointOauthConfigIn' is set
        if (endpointOauthConfigIn == null) {
            throw new ApiException("Missing the required parameter 'endpointOauthConfigIn' when calling v1EndpointUpdateOauthConfig(Async)");
        }
        

        okhttp3.Call localVarCall = v1EndpointUpdateOauthConfigCall(appId, endpointId, endpointOauthConfigIn, _callback);
        return localVarCall;

    }

    /**
     * Update Endpoint Oauth Config
     * Create/update endpoint OAuth configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointOauthConfigIn  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EndpointUpdateOauthConfig(String appId, String endpointId, EndpointOauthConfigIn endpointOauthConfigIn) throws ApiException {
        v1EndpointUpdateOauthConfigWithHttpInfo(appId, endpointId, endpointOauthConfigIn);
    }

    /**
     * Update Endpoint Oauth Config
     * Create/update endpoint OAuth configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointOauthConfigIn  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EndpointUpdateOauthConfigWithHttpInfo(String appId, String endpointId, EndpointOauthConfigIn endpointOauthConfigIn) throws ApiException {
        okhttp3.Call localVarCall = v1EndpointUpdateOauthConfigValidateBeforeCall(appId, endpointId, endpointOauthConfigIn, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update Endpoint Oauth Config (asynchronously)
     * Create/update endpoint OAuth configuration
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param endpointOauthConfigIn  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EndpointUpdateOauthConfigAsync(String appId, String endpointId, EndpointOauthConfigIn endpointOauthConfigIn, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EndpointUpdateOauthConfigValidateBeforeCall(appId, endpointId, endpointOauthConfigIn, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
