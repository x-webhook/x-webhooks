/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.xwebhook.internal.api;

import io.openweb3.xwebhook.internal.ApiCallback;
import io.openweb3.xwebhook.internal.ApiClient;
import io.openweb3.xwebhook.internal.ApiException;
import io.openweb3.xwebhook.internal.ApiResponse;
import io.openweb3.xwebhook.internal.Configuration;
import io.openweb3.xwebhook.internal.Pair;
import io.openweb3.xwebhook.internal.ProgressRequestBody;
import io.openweb3.xwebhook.internal.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.openweb3.xwebhook.models.EventTypeExampleOut;
import io.openweb3.xwebhook.models.EventTypeImportOpenApiIn;
import io.openweb3.xwebhook.models.EventTypeImportOpenApiOut;
import io.openweb3.xwebhook.models.EventTypeIn;
import io.openweb3.xwebhook.models.EventTypeOut;
import io.openweb3.xwebhook.models.EventTypePatch;
import io.openweb3.xwebhook.models.EventTypeSchemaIn;
import io.openweb3.xwebhook.models.EventTypeUpdate;
import io.openweb3.xwebhook.models.ExportEventTypeOut;
import io.openweb3.xwebhook.models.HTTPValidationError;
import io.openweb3.xwebhook.models.HttpErrorOut;
import io.openweb3.xwebhook.models.ListResponseEventTypeOut;
import io.openweb3.xwebhook.models.Ordering;
import io.openweb3.xwebhook.models.RetryScheduleInOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventTypeApi {
    private ApiClient localVarApiClient;

    public EventTypeApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventTypeApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1EventTypeCreate
     * @param eventTypeIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeCreateCall(EventTypeIn eventTypeIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eventTypeIn;

        // create path and map variables
        String localVarPath = "/api/v1/event-type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeCreateValidateBeforeCall(EventTypeIn eventTypeIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeIn' is set
        if (eventTypeIn == null) {
            throw new ApiException("Missing the required parameter 'eventTypeIn' when calling v1EventTypeCreate(Async)");
        }
        

        okhttp3.Call localVarCall = v1EventTypeCreateCall(eventTypeIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Create Event Type
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     * @param eventTypeIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return EventTypeOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EventTypeOut v1EventTypeCreate(EventTypeIn eventTypeIn, String idempotencyKey) throws ApiException {
        ApiResponse<EventTypeOut> localVarResp = v1EventTypeCreateWithHttpInfo(eventTypeIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Create Event Type
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     * @param eventTypeIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;EventTypeOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypeOut> v1EventTypeCreateWithHttpInfo(EventTypeIn eventTypeIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeCreateValidateBeforeCall(eventTypeIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Event Type (asynchronously)
     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.
     * @param eventTypeIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeCreateAsync(EventTypeIn eventTypeIn, String idempotencyKey, final ApiCallback<EventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeCreateValidateBeforeCall(eventTypeIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypeDelete
     * @param eventTypeName The event type&#39;s name (required)
     * @param expunge By default event types are archived when \&quot;deleted\&quot;. Passing this to &#x60;true&#x60; deletes them entirely. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeDeleteCall(String eventTypeName, Boolean expunge, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}"
            .replaceAll("\\{" + "event_type_name" + "\\}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expunge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expunge", expunge));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeDeleteValidateBeforeCall(String eventTypeName, Boolean expunge, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling v1EventTypeDelete(Async)");
        }
        

        okhttp3.Call localVarCall = v1EventTypeDeleteCall(eventTypeName, expunge, _callback);
        return localVarCall;

    }

    /**
     * Delete Event Type
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
     * @param eventTypeName The event type&#39;s name (required)
     * @param expunge By default event types are archived when \&quot;deleted\&quot;. Passing this to &#x60;true&#x60; deletes them entirely. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1EventTypeDelete(String eventTypeName, Boolean expunge) throws ApiException {
        v1EventTypeDeleteWithHttpInfo(eventTypeName, expunge);
    }

    /**
     * Delete Event Type
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
     * @param eventTypeName The event type&#39;s name (required)
     * @param expunge By default event types are archived when \&quot;deleted\&quot;. Passing this to &#x60;true&#x60; deletes them entirely. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1EventTypeDeleteWithHttpInfo(String eventTypeName, Boolean expunge) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeDeleteValidateBeforeCall(eventTypeName, expunge, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Event Type (asynchronously)
     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).
     * @param eventTypeName The event type&#39;s name (required)
     * @param expunge By default event types are archived when \&quot;deleted\&quot;. Passing this to &#x60;true&#x60; deletes them entirely. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeDeleteAsync(String eventTypeName, Boolean expunge, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeDeleteValidateBeforeCall(eventTypeName, expunge, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypeExportOpenapi
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeExportOpenapiCall(String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/export/openapi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeExportOpenapiValidateBeforeCall(String idempotencyKey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1EventTypeExportOpenapiCall(idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Event Type Export From Openapi
     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ExportEventTypeOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ExportEventTypeOut v1EventTypeExportOpenapi(String idempotencyKey) throws ApiException {
        ApiResponse<ExportEventTypeOut> localVarResp = v1EventTypeExportOpenapiWithHttpInfo(idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Event Type Export From Openapi
     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;ExportEventTypeOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportEventTypeOut> v1EventTypeExportOpenapiWithHttpInfo(String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeExportOpenapiValidateBeforeCall(idempotencyKey, null);
        Type localVarReturnType = new TypeToken<ExportEventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Event Type Export From Openapi (asynchronously)
     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeExportOpenapiAsync(String idempotencyKey, final ApiCallback<ExportEventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeExportOpenapiValidateBeforeCall(idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<ExportEventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypeGenerateExample
     * @param eventTypeSchemaIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeGenerateExampleCall(EventTypeSchemaIn eventTypeSchemaIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eventTypeSchemaIn;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/schema/generate-example";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeGenerateExampleValidateBeforeCall(EventTypeSchemaIn eventTypeSchemaIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeSchemaIn' is set
        if (eventTypeSchemaIn == null) {
            throw new ApiException("Missing the required parameter 'eventTypeSchemaIn' when calling v1EventTypeGenerateExample(Async)");
        }
        

        okhttp3.Call localVarCall = v1EventTypeGenerateExampleCall(eventTypeSchemaIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Generate Schema Example
     * Generates a fake example from the given JSONSchema
     * @param eventTypeSchemaIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return EventTypeExampleOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EventTypeExampleOut v1EventTypeGenerateExample(EventTypeSchemaIn eventTypeSchemaIn, String idempotencyKey) throws ApiException {
        ApiResponse<EventTypeExampleOut> localVarResp = v1EventTypeGenerateExampleWithHttpInfo(eventTypeSchemaIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Generate Schema Example
     * Generates a fake example from the given JSONSchema
     * @param eventTypeSchemaIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;EventTypeExampleOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypeExampleOut> v1EventTypeGenerateExampleWithHttpInfo(EventTypeSchemaIn eventTypeSchemaIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeGenerateExampleValidateBeforeCall(eventTypeSchemaIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<EventTypeExampleOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate Schema Example (asynchronously)
     * Generates a fake example from the given JSONSchema
     * @param eventTypeSchemaIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeGenerateExampleAsync(EventTypeSchemaIn eventTypeSchemaIn, String idempotencyKey, final ApiCallback<EventTypeExampleOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeGenerateExampleValidateBeforeCall(eventTypeSchemaIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<EventTypeExampleOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypeGet
     * @param eventTypeName The event type&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeGetCall(String eventTypeName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}"
            .replaceAll("\\{" + "event_type_name" + "\\}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeGetValidateBeforeCall(String eventTypeName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling v1EventTypeGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1EventTypeGetCall(eventTypeName, _callback);
        return localVarCall;

    }

    /**
     * Get Event Type
     * Get an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @return EventTypeOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EventTypeOut v1EventTypeGet(String eventTypeName) throws ApiException {
        ApiResponse<EventTypeOut> localVarResp = v1EventTypeGetWithHttpInfo(eventTypeName);
        return localVarResp.getData();
    }

    /**
     * Get Event Type
     * Get an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @return ApiResponse&lt;EventTypeOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypeOut> v1EventTypeGetWithHttpInfo(String eventTypeName) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeGetValidateBeforeCall(eventTypeName, null);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Event Type (asynchronously)
     * Get an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeGetAsync(String eventTypeName, final ApiCallback<EventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeGetValidateBeforeCall(eventTypeName, _callback);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypeGetRetrySchedule
     * @param eventTypeName The event type&#39;s name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeGetRetryScheduleCall(String eventTypeName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}/retry-schedule"
            .replaceAll("\\{" + "event_type_name" + "\\}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeGetRetryScheduleValidateBeforeCall(String eventTypeName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling v1EventTypeGetRetrySchedule(Async)");
        }
        

        okhttp3.Call localVarCall = v1EventTypeGetRetryScheduleCall(eventTypeName, _callback);
        return localVarCall;

    }

    /**
     * Get Retry Schedule
     * Gets the retry schedule for messages using the given event type
     * @param eventTypeName The event type&#39;s name (required)
     * @return RetryScheduleInOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public RetryScheduleInOut v1EventTypeGetRetrySchedule(String eventTypeName) throws ApiException {
        ApiResponse<RetryScheduleInOut> localVarResp = v1EventTypeGetRetryScheduleWithHttpInfo(eventTypeName);
        return localVarResp.getData();
    }

    /**
     * Get Retry Schedule
     * Gets the retry schedule for messages using the given event type
     * @param eventTypeName The event type&#39;s name (required)
     * @return ApiResponse&lt;RetryScheduleInOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetryScheduleInOut> v1EventTypeGetRetryScheduleWithHttpInfo(String eventTypeName) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeGetRetryScheduleValidateBeforeCall(eventTypeName, null);
        Type localVarReturnType = new TypeToken<RetryScheduleInOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Retry Schedule (asynchronously)
     * Gets the retry schedule for messages using the given event type
     * @param eventTypeName The event type&#39;s name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeGetRetryScheduleAsync(String eventTypeName, final ApiCallback<RetryScheduleInOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeGetRetryScheduleValidateBeforeCall(eventTypeName, _callback);
        Type localVarReturnType = new TypeToken<RetryScheduleInOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypeImportOpenapi
     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**. (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeImportOpenapiCall(EventTypeImportOpenApiIn eventTypeImportOpenApiIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eventTypeImportOpenApiIn;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/import/openapi";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeImportOpenapiValidateBeforeCall(EventTypeImportOpenApiIn eventTypeImportOpenApiIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeImportOpenApiIn' is set
        if (eventTypeImportOpenApiIn == null) {
            throw new ApiException("Missing the required parameter 'eventTypeImportOpenApiIn' when calling v1EventTypeImportOpenapi(Async)");
        }
        

        okhttp3.Call localVarCall = v1EventTypeImportOpenapiCall(eventTypeImportOpenApiIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Event Type Import From Openapi
     * Given an OpenAPI spec, create new or update existing event types. If an existing &#x60;archived&#x60; event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the &#x60;webhooks&#x60; or &#x60;x-webhooks&#x60; top-level.
     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**. (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return EventTypeImportOpenApiOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EventTypeImportOpenApiOut v1EventTypeImportOpenapi(EventTypeImportOpenApiIn eventTypeImportOpenApiIn, String idempotencyKey) throws ApiException {
        ApiResponse<EventTypeImportOpenApiOut> localVarResp = v1EventTypeImportOpenapiWithHttpInfo(eventTypeImportOpenApiIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Event Type Import From Openapi
     * Given an OpenAPI spec, create new or update existing event types. If an existing &#x60;archived&#x60; event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the &#x60;webhooks&#x60; or &#x60;x-webhooks&#x60; top-level.
     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**. (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;EventTypeImportOpenApiOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypeImportOpenApiOut> v1EventTypeImportOpenapiWithHttpInfo(EventTypeImportOpenApiIn eventTypeImportOpenApiIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeImportOpenapiValidateBeforeCall(eventTypeImportOpenApiIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<EventTypeImportOpenApiOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Event Type Import From Openapi (asynchronously)
     * Given an OpenAPI spec, create new or update existing event types. If an existing &#x60;archived&#x60; event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the &#x60;webhooks&#x60; or &#x60;x-webhooks&#x60; top-level.
     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**. (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeImportOpenapiAsync(EventTypeImportOpenApiIn eventTypeImportOpenApiIn, String idempotencyKey, final ApiCallback<EventTypeImportOpenApiOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeImportOpenapiValidateBeforeCall(eventTypeImportOpenApiIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<EventTypeImportOpenApiOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypeList
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param order The sorting order of the returned items (optional)
     * @param includeArchived When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response (optional, default to false)
     * @param withContent When &#x60;true&#x60; the full item (including the schema) is included in the response (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeListCall(Integer limit, String iterator, Ordering order, Boolean includeArchived, Boolean withContent, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/event-type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (includeArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_archived", includeArchived));
        }

        if (withContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_content", withContent));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeListValidateBeforeCall(Integer limit, String iterator, Ordering order, Boolean includeArchived, Boolean withContent, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1EventTypeListCall(limit, iterator, order, includeArchived, withContent, _callback);
        return localVarCall;

    }

    /**
     * List Event Types
     * Return the list of event types.
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param order The sorting order of the returned items (optional)
     * @param includeArchived When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response (optional, default to false)
     * @param withContent When &#x60;true&#x60; the full item (including the schema) is included in the response (optional, default to false)
     * @return ListResponseEventTypeOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseEventTypeOut v1EventTypeList(Integer limit, String iterator, Ordering order, Boolean includeArchived, Boolean withContent) throws ApiException {
        ApiResponse<ListResponseEventTypeOut> localVarResp = v1EventTypeListWithHttpInfo(limit, iterator, order, includeArchived, withContent);
        return localVarResp.getData();
    }

    /**
     * List Event Types
     * Return the list of event types.
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param order The sorting order of the returned items (optional)
     * @param includeArchived When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response (optional, default to false)
     * @param withContent When &#x60;true&#x60; the full item (including the schema) is included in the response (optional, default to false)
     * @return ApiResponse&lt;ListResponseEventTypeOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseEventTypeOut> v1EventTypeListWithHttpInfo(Integer limit, String iterator, Ordering order, Boolean includeArchived, Boolean withContent) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeListValidateBeforeCall(limit, iterator, order, includeArchived, withContent, null);
        Type localVarReturnType = new TypeToken<ListResponseEventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Event Types (asynchronously)
     * Return the list of event types.
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param order The sorting order of the returned items (optional)
     * @param includeArchived When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response (optional, default to false)
     * @param withContent When &#x60;true&#x60; the full item (including the schema) is included in the response (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeListAsync(Integer limit, String iterator, Ordering order, Boolean includeArchived, Boolean withContent, final ApiCallback<ListResponseEventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeListValidateBeforeCall(limit, iterator, order, includeArchived, withContent, _callback);
        Type localVarReturnType = new TypeToken<ListResponseEventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypePatch
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypePatch  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypePatchCall(String eventTypeName, EventTypePatch eventTypePatch, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eventTypePatch;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}"
            .replaceAll("\\{" + "event_type_name" + "\\}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypePatchValidateBeforeCall(String eventTypeName, EventTypePatch eventTypePatch, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling v1EventTypePatch(Async)");
        }
        
        // verify the required parameter 'eventTypePatch' is set
        if (eventTypePatch == null) {
            throw new ApiException("Missing the required parameter 'eventTypePatch' when calling v1EventTypePatch(Async)");
        }
        

        okhttp3.Call localVarCall = v1EventTypePatchCall(eventTypeName, eventTypePatch, _callback);
        return localVarCall;

    }

    /**
     * Patch Event Type
     * Partially update an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypePatch  (required)
     * @return EventTypeOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EventTypeOut v1EventTypePatch(String eventTypeName, EventTypePatch eventTypePatch) throws ApiException {
        ApiResponse<EventTypeOut> localVarResp = v1EventTypePatchWithHttpInfo(eventTypeName, eventTypePatch);
        return localVarResp.getData();
    }

    /**
     * Patch Event Type
     * Partially update an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypePatch  (required)
     * @return ApiResponse&lt;EventTypeOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypeOut> v1EventTypePatchWithHttpInfo(String eventTypeName, EventTypePatch eventTypePatch) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypePatchValidateBeforeCall(eventTypeName, eventTypePatch, null);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch Event Type (asynchronously)
     * Partially update an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypePatch  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypePatchAsync(String eventTypeName, EventTypePatch eventTypePatch, final ApiCallback<EventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypePatchValidateBeforeCall(eventTypeName, eventTypePatch, _callback);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypeUpdate
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypeUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeUpdateCall(String eventTypeName, EventTypeUpdate eventTypeUpdate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = eventTypeUpdate;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}"
            .replaceAll("\\{" + "event_type_name" + "\\}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeUpdateValidateBeforeCall(String eventTypeName, EventTypeUpdate eventTypeUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling v1EventTypeUpdate(Async)");
        }
        
        // verify the required parameter 'eventTypeUpdate' is set
        if (eventTypeUpdate == null) {
            throw new ApiException("Missing the required parameter 'eventTypeUpdate' when calling v1EventTypeUpdate(Async)");
        }
        

        okhttp3.Call localVarCall = v1EventTypeUpdateCall(eventTypeName, eventTypeUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update Event Type
     * Update an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypeUpdate  (required)
     * @return EventTypeOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public EventTypeOut v1EventTypeUpdate(String eventTypeName, EventTypeUpdate eventTypeUpdate) throws ApiException {
        ApiResponse<EventTypeOut> localVarResp = v1EventTypeUpdateWithHttpInfo(eventTypeName, eventTypeUpdate);
        return localVarResp.getData();
    }

    /**
     * Update Event Type
     * Update an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypeUpdate  (required)
     * @return ApiResponse&lt;EventTypeOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EventTypeOut> v1EventTypeUpdateWithHttpInfo(String eventTypeName, EventTypeUpdate eventTypeUpdate) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeUpdateValidateBeforeCall(eventTypeName, eventTypeUpdate, null);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Event Type (asynchronously)
     * Update an event type.
     * @param eventTypeName The event type&#39;s name (required)
     * @param eventTypeUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeUpdateAsync(String eventTypeName, EventTypeUpdate eventTypeUpdate, final ApiCallback<EventTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeUpdateValidateBeforeCall(eventTypeName, eventTypeUpdate, _callback);
        Type localVarReturnType = new TypeToken<EventTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1EventTypeUpdateRetrySchedule
     * @param eventTypeName The event type&#39;s name (required)
     * @param retryScheduleInOut  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeUpdateRetryScheduleCall(String eventTypeName, RetryScheduleInOut retryScheduleInOut, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = retryScheduleInOut;

        // create path and map variables
        String localVarPath = "/api/v1/event-type/{event_type_name}/retry-schedule"
            .replaceAll("\\{" + "event_type_name" + "\\}", localVarApiClient.escapeString(eventTypeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1EventTypeUpdateRetryScheduleValidateBeforeCall(String eventTypeName, RetryScheduleInOut retryScheduleInOut, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'eventTypeName' is set
        if (eventTypeName == null) {
            throw new ApiException("Missing the required parameter 'eventTypeName' when calling v1EventTypeUpdateRetrySchedule(Async)");
        }
        
        // verify the required parameter 'retryScheduleInOut' is set
        if (retryScheduleInOut == null) {
            throw new ApiException("Missing the required parameter 'retryScheduleInOut' when calling v1EventTypeUpdateRetrySchedule(Async)");
        }
        

        okhttp3.Call localVarCall = v1EventTypeUpdateRetryScheduleCall(eventTypeName, retryScheduleInOut, _callback);
        return localVarCall;

    }

    /**
     * Update Retry Schedule
     * Sets a retry schedule for all messages using the given event type
     * @param eventTypeName The event type&#39;s name (required)
     * @param retryScheduleInOut  (required)
     * @return RetryScheduleInOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public RetryScheduleInOut v1EventTypeUpdateRetrySchedule(String eventTypeName, RetryScheduleInOut retryScheduleInOut) throws ApiException {
        ApiResponse<RetryScheduleInOut> localVarResp = v1EventTypeUpdateRetryScheduleWithHttpInfo(eventTypeName, retryScheduleInOut);
        return localVarResp.getData();
    }

    /**
     * Update Retry Schedule
     * Sets a retry schedule for all messages using the given event type
     * @param eventTypeName The event type&#39;s name (required)
     * @param retryScheduleInOut  (required)
     * @return ApiResponse&lt;RetryScheduleInOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RetryScheduleInOut> v1EventTypeUpdateRetryScheduleWithHttpInfo(String eventTypeName, RetryScheduleInOut retryScheduleInOut) throws ApiException {
        okhttp3.Call localVarCall = v1EventTypeUpdateRetryScheduleValidateBeforeCall(eventTypeName, retryScheduleInOut, null);
        Type localVarReturnType = new TypeToken<RetryScheduleInOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Retry Schedule (asynchronously)
     * Sets a retry schedule for all messages using the given event type
     * @param eventTypeName The event type&#39;s name (required)
     * @param retryScheduleInOut  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1EventTypeUpdateRetryScheduleAsync(String eventTypeName, RetryScheduleInOut retryScheduleInOut, final ApiCallback<RetryScheduleInOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1EventTypeUpdateRetryScheduleValidateBeforeCall(eventTypeName, retryScheduleInOut, _callback);
        Type localVarReturnType = new TypeToken<RetryScheduleInOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
