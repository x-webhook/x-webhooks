/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.xwebhook.internal.api;

import io.openweb3.xwebhook.internal.ApiCallback;
import io.openweb3.xwebhook.internal.ApiClient;
import io.openweb3.xwebhook.internal.ApiException;
import io.openweb3.xwebhook.internal.ApiResponse;
import io.openweb3.xwebhook.internal.Configuration;
import io.openweb3.xwebhook.internal.Pair;
import io.openweb3.xwebhook.internal.ProgressRequestBody;
import io.openweb3.xwebhook.internal.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.openweb3.xwebhook.models.HTTPValidationError;
import io.openweb3.xwebhook.models.HttpErrorOut;
import io.openweb3.xwebhook.models.ListResponseEndpointMessageOut;
import io.openweb3.xwebhook.models.ListResponseMessageAttemptEndpointOut;
import io.openweb3.xwebhook.models.ListResponseMessageAttemptOut;
import io.openweb3.xwebhook.models.ListResponseMessageEndpointOut;
import io.openweb3.xwebhook.models.MessageAttemptHeadersOut;
import io.openweb3.xwebhook.models.MessageAttemptOut;
import io.openweb3.xwebhook.models.MessageStatus;
import java.time.OffsetDateTime;
import java.util.Set;
import io.openweb3.xwebhook.models.StatusCodeClass;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MessageAttemptApi {
    private ApiClient localVarApiClient;

    public MessageAttemptApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MessageAttemptApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1MessageAttemptExpungeContent
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptExpungeContentCall(String appId, String msgId, String attemptId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "attempt_id" + "\\}", localVarApiClient.escapeString(attemptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptExpungeContentValidateBeforeCall(String appId, String msgId, String attemptId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptExpungeContent(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageAttemptExpungeContent(Async)");
        }
        
        // verify the required parameter 'attemptId' is set
        if (attemptId == null) {
            throw new ApiException("Missing the required parameter 'attemptId' when calling v1MessageAttemptExpungeContent(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptExpungeContentCall(appId, msgId, attemptId, _callback);
        return localVarCall;

    }

    /**
     * Delete attempt response body
     * Deletes the given attempt&#39;s response body. Useful when an endpoint accidentally returned sensitive content.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1MessageAttemptExpungeContent(String appId, String msgId, String attemptId) throws ApiException {
        v1MessageAttemptExpungeContentWithHttpInfo(appId, msgId, attemptId);
    }

    /**
     * Delete attempt response body
     * Deletes the given attempt&#39;s response body. Useful when an endpoint accidentally returned sensitive content.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1MessageAttemptExpungeContentWithHttpInfo(String appId, String msgId, String attemptId) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptExpungeContentValidateBeforeCall(appId, msgId, attemptId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete attempt response body (asynchronously)
     * Deletes the given attempt&#39;s response body. Useful when an endpoint accidentally returned sensitive content.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptExpungeContentAsync(String appId, String msgId, String attemptId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptExpungeContentValidateBeforeCall(appId, msgId, attemptId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageAttemptGet
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptGetCall(String appId, String msgId, String attemptId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "attempt_id" + "\\}", localVarApiClient.escapeString(attemptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptGetValidateBeforeCall(String appId, String msgId, String attemptId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptGet(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageAttemptGet(Async)");
        }
        
        // verify the required parameter 'attemptId' is set
        if (attemptId == null) {
            throw new ApiException("Missing the required parameter 'attemptId' when calling v1MessageAttemptGet(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptGetCall(appId, msgId, attemptId, _callback);
        return localVarCall;

    }

    /**
     * Get Attempt
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @return MessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public MessageAttemptOut v1MessageAttemptGet(String appId, String msgId, String attemptId) throws ApiException {
        ApiResponse<MessageAttemptOut> localVarResp = v1MessageAttemptGetWithHttpInfo(appId, msgId, attemptId);
        return localVarResp.getData();
    }

    /**
     * Get Attempt
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @return ApiResponse&lt;MessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageAttemptOut> v1MessageAttemptGetWithHttpInfo(String appId, String msgId, String attemptId) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptGetValidateBeforeCall(appId, msgId, attemptId, null);
        Type localVarReturnType = new TypeToken<MessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attempt (asynchronously)
     * &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptGetAsync(String appId, String msgId, String attemptId, final ApiCallback<MessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptGetValidateBeforeCall(appId, msgId, attemptId, _callback);
        Type localVarReturnType = new TypeToken<MessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageAttemptGetHeaders
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptGetHeadersCall(String appId, String msgId, String attemptId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "attempt_id" + "\\}", localVarApiClient.escapeString(attemptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptGetHeadersValidateBeforeCall(String appId, String msgId, String attemptId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptGetHeaders(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageAttemptGetHeaders(Async)");
        }
        
        // verify the required parameter 'attemptId' is set
        if (attemptId == null) {
            throw new ApiException("Missing the required parameter 'attemptId' when calling v1MessageAttemptGetHeaders(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptGetHeadersCall(appId, msgId, attemptId, _callback);
        return localVarCall;

    }

    /**
     * Get Attempt Headers
     * Calculate and return headers used on a given message attempt
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @return MessageAttemptHeadersOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public MessageAttemptHeadersOut v1MessageAttemptGetHeaders(String appId, String msgId, String attemptId) throws ApiException {
        ApiResponse<MessageAttemptHeadersOut> localVarResp = v1MessageAttemptGetHeadersWithHttpInfo(appId, msgId, attemptId);
        return localVarResp.getData();
    }

    /**
     * Get Attempt Headers
     * Calculate and return headers used on a given message attempt
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @return ApiResponse&lt;MessageAttemptHeadersOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MessageAttemptHeadersOut> v1MessageAttemptGetHeadersWithHttpInfo(String appId, String msgId, String attemptId) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptGetHeadersValidateBeforeCall(appId, msgId, attemptId, null);
        Type localVarReturnType = new TypeToken<MessageAttemptHeadersOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Attempt Headers (asynchronously)
     * Calculate and return headers used on a given message attempt
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param attemptId The attempt&#39;s ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptGetHeadersAsync(String appId, String msgId, String attemptId, final ApiCallback<MessageAttemptHeadersOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptGetHeadersValidateBeforeCall(appId, msgId, attemptId, _callback);
        Type localVarReturnType = new TypeToken<MessageAttemptHeadersOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageAttemptListAttemptedDestinations
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptListAttemptedDestinationsCall(String appId, String msgId, Integer limit, String iterator, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/endpoint"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptListAttemptedDestinationsValidateBeforeCall(String appId, String msgId, Integer limit, String iterator, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptListAttemptedDestinations(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageAttemptListAttemptedDestinations(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptListAttemptedDestinationsCall(appId, msgId, limit, iterator, _callback);
        return localVarCall;

    }

    /**
     * List Attempted Destinations
     * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @return ListResponseMessageEndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageEndpointOut v1MessageAttemptListAttemptedDestinations(String appId, String msgId, Integer limit, String iterator) throws ApiException {
        ApiResponse<ListResponseMessageEndpointOut> localVarResp = v1MessageAttemptListAttemptedDestinationsWithHttpInfo(appId, msgId, limit, iterator);
        return localVarResp.getData();
    }

    /**
     * List Attempted Destinations
     * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @return ApiResponse&lt;ListResponseMessageEndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageEndpointOut> v1MessageAttemptListAttemptedDestinationsWithHttpInfo(String appId, String msgId, Integer limit, String iterator) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptListAttemptedDestinationsValidateBeforeCall(appId, msgId, limit, iterator, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageEndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempted Destinations (asynchronously)
     * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptListAttemptedDestinationsAsync(String appId, String msgId, Integer limit, String iterator, final ApiCallback<ListResponseMessageEndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptListAttemptedDestinationsValidateBeforeCall(appId, msgId, limit, iterator, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageEndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageAttemptListAttemptedMessages
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the message tags (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptListAttemptedMessagesCall(String appId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (withContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_content", withContent));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptListAttemptedMessagesValidateBeforeCall(String appId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptListAttemptedMessages(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1MessageAttemptListAttemptedMessages(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptListAttemptedMessagesCall(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _callback);
        return localVarCall;

    }

    /**
     * List Attempted Messages
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the message tags (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ListResponseEndpointMessageOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseEndpointMessageOut v1MessageAttemptListAttemptedMessages(String appId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes) throws ApiException {
        ApiResponse<ListResponseEndpointMessageOut> localVarResp = v1MessageAttemptListAttemptedMessagesWithHttpInfo(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes);
        return localVarResp.getData();
    }

    /**
     * List Attempted Messages
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the message tags (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ApiResponse&lt;ListResponseEndpointMessageOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseEndpointMessageOut> v1MessageAttemptListAttemptedMessagesWithHttpInfo(String appId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptListAttemptedMessagesValidateBeforeCall(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, null);
        Type localVarReturnType = new TypeToken<ListResponseEndpointMessageOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempted Messages (asynchronously)
     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the message tags (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; message payloads are included in the response (optional, default to true)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptListAttemptedMessagesAsync(String appId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes, final ApiCallback<ListResponseEndpointMessageOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptListAttemptedMessagesValidateBeforeCall(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _callback);
        Type localVarReturnType = new TypeToken<ListResponseEndpointMessageOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageAttemptListByEndpoint
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param withMsg When &#x60;true&#x60;, the message information is included in the response (optional, default to false)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptListByEndpointCall(String appId, String endpointId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Boolean withMsg, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (statusCodeClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_code_class", statusCodeClass));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (withContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_content", withContent));
        }

        if (withMsg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_msg", withMsg));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptListByEndpointValidateBeforeCall(String appId, String endpointId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Boolean withMsg, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptListByEndpoint(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1MessageAttemptListByEndpoint(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptListByEndpointCall(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _callback);
        return localVarCall;

    }

    /**
     * List Attempts By Endpoint
     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param withMsg When &#x60;true&#x60;, the message information is included in the response (optional, default to false)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ListResponseMessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageAttemptOut v1MessageAttemptListByEndpoint(String appId, String endpointId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Boolean withMsg, Set<String> eventTypes) throws ApiException {
        ApiResponse<ListResponseMessageAttemptOut> localVarResp = v1MessageAttemptListByEndpointWithHttpInfo(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes);
        return localVarResp.getData();
    }

    /**
     * List Attempts By Endpoint
     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param withMsg When &#x60;true&#x60;, the message information is included in the response (optional, default to false)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageAttemptOut> v1MessageAttemptListByEndpointWithHttpInfo(String appId, String endpointId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Boolean withMsg, Set<String> eventTypes) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptListByEndpointValidateBeforeCall(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts By Endpoint (asynchronously)
     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param withMsg When &#x60;true&#x60;, the message information is included in the response (optional, default to false)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptListByEndpointAsync(String appId, String endpointId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Boolean withMsg, Set<String> eventTypes, final ApiCallback<ListResponseMessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptListByEndpointValidateBeforeCall(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageAttemptListByEndpointDeprecated
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v1MessageAttemptListByEndpointDeprecatedCall(String appId, String msgId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptListByEndpointDeprecatedValidateBeforeCall(String appId, String msgId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptListByEndpointDeprecated(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageAttemptListByEndpointDeprecated(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1MessageAttemptListByEndpointDeprecated(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptListByEndpointDeprecatedCall(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _callback);
        return localVarCall;

    }

    /**
     * List Attempts For Endpoint
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ListResponseMessageAttemptEndpointOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListResponseMessageAttemptEndpointOut v1MessageAttemptListByEndpointDeprecated(String appId, String msgId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Set<String> eventTypes) throws ApiException {
        ApiResponse<ListResponseMessageAttemptEndpointOut> localVarResp = v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes);
        return localVarResp.getData();
    }

    /**
     * List Attempts For Endpoint
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptEndpointOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListResponseMessageAttemptEndpointOut> v1MessageAttemptListByEndpointDeprecatedWithHttpInfo(String appId, String msgId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Set<String> eventTypes) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptListByEndpointDeprecatedValidateBeforeCall(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptEndpointOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts For Endpoint (asynchronously)
     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The &#x60;before&#x60; parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v1MessageAttemptListByEndpointDeprecatedAsync(String appId, String msgId, String endpointId, Integer limit, String iterator, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, Set<String> eventTypes, final ApiCallback<ListResponseMessageAttemptEndpointOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptListByEndpointDeprecatedValidateBeforeCall(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptEndpointOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageAttemptListByMsg
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param endpointId Filter the attempts based on the attempted endpoint (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptListByMsgCall(String appId, String msgId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, String endpointId, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/attempt/msg/{msg_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (statusCodeClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_code_class", statusCodeClass));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (endpointId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint_id", endpointId));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (withContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("with_content", withContent));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptListByMsgValidateBeforeCall(String appId, String msgId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, String endpointId, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptListByMsg(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageAttemptListByMsg(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptListByMsgCall(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _callback);
        return localVarCall;

    }

    /**
     * List Attempts By Msg
     * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param endpointId Filter the attempts based on the attempted endpoint (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ListResponseMessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ListResponseMessageAttemptOut v1MessageAttemptListByMsg(String appId, String msgId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, String endpointId, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes) throws ApiException {
        ApiResponse<ListResponseMessageAttemptOut> localVarResp = v1MessageAttemptListByMsgWithHttpInfo(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes);
        return localVarResp.getData();
    }

    /**
     * List Attempts By Msg
     * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param endpointId Filter the attempts based on the attempted endpoint (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListResponseMessageAttemptOut> v1MessageAttemptListByMsgWithHttpInfo(String appId, String msgId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, String endpointId, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptListByMsgValidateBeforeCall(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts By Msg (asynchronously)
     * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate. 
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param endpointId Filter the attempts based on the attempted endpoint (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param withContent When &#x60;true&#x60; attempt content is included in the response (optional, default to true)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptListByMsgAsync(String appId, String msgId, Integer limit, String iterator, MessageStatus status, StatusCodeClass statusCodeClass, String channel, String tag, String endpointId, OffsetDateTime before, OffsetDateTime after, Boolean withContent, Set<String> eventTypes, final ApiCallback<ListResponseMessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptListByMsgValidateBeforeCall(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageAttemptListByMsgDeprecated
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param endpointId Filter the attempts based on the attempted endpoint (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v1MessageAttemptListByMsgDeprecatedCall(String appId, String msgId, Integer limit, String iterator, String endpointId, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, StatusCodeClass statusCodeClass, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/attempt"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (iterator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iterator", iterator));
        }

        if (endpointId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endpoint_id", endpointId));
        }

        if (channel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("channel", channel));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        if (statusCodeClass != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status_code_class", statusCodeClass));
        }

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "event_types", eventTypes));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptListByMsgDeprecatedValidateBeforeCall(String appId, String msgId, Integer limit, String iterator, String endpointId, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, StatusCodeClass statusCodeClass, Set<String> eventTypes, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptListByMsgDeprecated(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageAttemptListByMsgDeprecated(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptListByMsgDeprecatedCall(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _callback);
        return localVarCall;

    }

    /**
     * List Attempts
     * Deprecated: Please use \&quot;List Attempts by Endpoint\&quot; and \&quot;List Attempts by Msg\&quot; instead.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate.  &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param endpointId Filter the attempts based on the attempted endpoint (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ListResponseMessageAttemptOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ListResponseMessageAttemptOut v1MessageAttemptListByMsgDeprecated(String appId, String msgId, Integer limit, String iterator, String endpointId, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, StatusCodeClass statusCodeClass, Set<String> eventTypes) throws ApiException {
        ApiResponse<ListResponseMessageAttemptOut> localVarResp = v1MessageAttemptListByMsgDeprecatedWithHttpInfo(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes);
        return localVarResp.getData();
    }

    /**
     * List Attempts
     * Deprecated: Please use \&quot;List Attempts by Endpoint\&quot; and \&quot;List Attempts by Msg\&quot; instead.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate.  &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param endpointId Filter the attempts based on the attempted endpoint (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @return ApiResponse&lt;ListResponseMessageAttemptOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ListResponseMessageAttemptOut> v1MessageAttemptListByMsgDeprecatedWithHttpInfo(String appId, String msgId, Integer limit, String iterator, String endpointId, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, StatusCodeClass statusCodeClass, Set<String> eventTypes) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptListByMsgDeprecatedValidateBeforeCall(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, null);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Attempts (asynchronously)
     * Deprecated: Please use \&quot;List Attempts by Endpoint\&quot; and \&quot;List Attempts by Msg\&quot; instead.  Note that by default this endpoint is limited to retrieving 90 days&#39; worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the &#x60;before&#x60; or &#x60;after&#x60; parameter as appropriate.  &#x60;msg_id&#x60;: Use a message id or a message &#x60;eventId&#x60;
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param limit Limit the number of returned items (optional)
     * @param iterator The iterator returned from a prior invocation (optional)
     * @param endpointId Filter the attempts based on the attempted endpoint (optional)
     * @param channel Filter response based on the channel (optional)
     * @param tag Filter response based on the tag (optional)
     * @param status Filter response based on the delivery status (optional)
     * @param before Only include items created before a certain date (optional)
     * @param after Only include items created after a certain date (optional)
     * @param statusCodeClass Filter response based on the HTTP status code (optional)
     * @param eventTypes Filter response based on the event type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v1MessageAttemptListByMsgDeprecatedAsync(String appId, String msgId, Integer limit, String iterator, String endpointId, String channel, String tag, MessageStatus status, OffsetDateTime before, OffsetDateTime after, StatusCodeClass statusCodeClass, Set<String> eventTypes, final ApiCallback<ListResponseMessageAttemptOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptListByMsgDeprecatedValidateBeforeCall(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _callback);
        Type localVarReturnType = new TypeToken<ListResponseMessageAttemptOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1MessageAttemptResend
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptResendCall(String appId, String msgId, String endpointId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()))
            .replaceAll("\\{" + "msg_id" + "\\}", localVarApiClient.escapeString(msgId.toString()))
            .replaceAll("\\{" + "endpoint_id" + "\\}", localVarApiClient.escapeString(endpointId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1MessageAttemptResendValidateBeforeCall(String appId, String msgId, String endpointId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1MessageAttemptResend(Async)");
        }
        
        // verify the required parameter 'msgId' is set
        if (msgId == null) {
            throw new ApiException("Missing the required parameter 'msgId' when calling v1MessageAttemptResend(Async)");
        }
        
        // verify the required parameter 'endpointId' is set
        if (endpointId == null) {
            throw new ApiException("Missing the required parameter 'endpointId' when calling v1MessageAttemptResend(Async)");
        }
        

        okhttp3.Call localVarCall = v1MessageAttemptResendCall(appId, msgId, endpointId, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Resend Webhook
     * Resend a message to the specified endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1MessageAttemptResend(String appId, String msgId, String endpointId, String idempotencyKey) throws ApiException {
        v1MessageAttemptResendWithHttpInfo(appId, msgId, endpointId, idempotencyKey);
    }

    /**
     * Resend Webhook
     * Resend a message to the specified endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1MessageAttemptResendWithHttpInfo(String appId, String msgId, String endpointId, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1MessageAttemptResendValidateBeforeCall(appId, msgId, endpointId, idempotencyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Resend Webhook (asynchronously)
     * Resend a message to the specified endpoint.
     * @param appId The app&#39;s ID or UID (required)
     * @param msgId The msg&#39;s ID or UID (required)
     * @param endpointId The ep&#39;s ID or UID (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details: 
     <table border="1">
        <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1MessageAttemptResendAsync(String appId, String msgId, String endpointId, String idempotencyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1MessageAttemptResendValidateBeforeCall(appId, msgId, endpointId, idempotencyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
