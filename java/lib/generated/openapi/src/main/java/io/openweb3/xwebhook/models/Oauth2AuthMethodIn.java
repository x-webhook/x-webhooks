/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.xwebhook.models;

import java.util.Objects;
import java.util.Arrays;
import io.swagger.annotations.ApiModel;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The method used for authenticating to the OAuth authorization server. &#x60;clientSecretJwt&#x60; will construct a JWT used for authentication with the oauth authorization server. This method is less commonly used and may not be supported by all oauth providers. &#x60;clientSecretBasic&#x60; will authenticate to the oauth authorization server using an &#x60;Authorization&#x60; header with the client secret as the value. This is the most common means of authentication. &#x60;clientSecretPost&#x60; will authenticate to the oauth authorization server by passing the client secret in a &#x60;client_secret&#x60; field in the request body. This method may not be supported by all oauth providers, and in general &#x60;clientSecretBasic&#x60; should be preferred.
 */
@JsonAdapter(Oauth2AuthMethodIn.Adapter.class)
public enum Oauth2AuthMethodIn {
  
  CLIENTSECRETJWT("clientSecretJwt"),
  
  CLIENTSECRETBASIC("clientSecretBasic"),
  
  CLIENTSECRETPOST("clientSecretPost");

  private String value;

  Oauth2AuthMethodIn(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Oauth2AuthMethodIn fromValue(String value) {
    for (Oauth2AuthMethodIn b : Oauth2AuthMethodIn.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Oauth2AuthMethodIn> {
    @Override
    public void write(final JsonWriter jsonWriter, final Oauth2AuthMethodIn enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Oauth2AuthMethodIn read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Oauth2AuthMethodIn.fromValue(value);
    }
  }
}

