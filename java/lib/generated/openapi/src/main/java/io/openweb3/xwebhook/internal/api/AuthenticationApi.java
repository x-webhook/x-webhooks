/*
 * Xwebhook API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.openweb3.xwebhook.internal.api;

import io.openweb3.xwebhook.internal.ApiCallback;
import io.openweb3.xwebhook.internal.ApiClient;
import io.openweb3.xwebhook.internal.ApiException;
import io.openweb3.xwebhook.internal.ApiResponse;
import io.openweb3.xwebhook.internal.Configuration;
import io.openweb3.xwebhook.internal.Pair;
import io.openweb3.xwebhook.internal.ProgressRequestBody;
import io.openweb3.xwebhook.internal.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.openweb3.xwebhook.models.AppPortalAccessIn;
import io.openweb3.xwebhook.models.AppPortalAccessOut;
import io.openweb3.xwebhook.models.ApplicationTokenExpireIn;
import io.openweb3.xwebhook.models.DashboardAccessOut;
import io.openweb3.xwebhook.models.HTTPValidationError;
import io.openweb3.xwebhook.models.HttpErrorOut;
import io.openweb3.xwebhook.models.OneTimeTokenIn;
import io.openweb3.xwebhook.models.OneTimeTokenOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for v1AuthenticationAppPortalAccess
     * @param appId The app&#39;s ID or UID (required)
     * @param appPortalAccessIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AuthenticationAppPortalAccessCall(String appId, AppPortalAccessIn appPortalAccessIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = appPortalAccessIn;

        // create path and map variables
        String localVarPath = "/api/v1/auth/app-portal-access/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AuthenticationAppPortalAccessValidateBeforeCall(String appId, AppPortalAccessIn appPortalAccessIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1AuthenticationAppPortalAccess(Async)");
        }
        
        // verify the required parameter 'appPortalAccessIn' is set
        if (appPortalAccessIn == null) {
            throw new ApiException("Missing the required parameter 'appPortalAccessIn' when calling v1AuthenticationAppPortalAccess(Async)");
        }
        

        okhttp3.Call localVarCall = v1AuthenticationAppPortalAccessCall(appId, appPortalAccessIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Get Consumer App Portal Access
     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * @param appId The app&#39;s ID or UID (required)
     * @param appPortalAccessIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return AppPortalAccessOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public AppPortalAccessOut v1AuthenticationAppPortalAccess(String appId, AppPortalAccessIn appPortalAccessIn, String idempotencyKey) throws ApiException {
        ApiResponse<AppPortalAccessOut> localVarResp = v1AuthenticationAppPortalAccessWithHttpInfo(appId, appPortalAccessIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Get Consumer App Portal Access
     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * @param appId The app&#39;s ID or UID (required)
     * @param appPortalAccessIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;AppPortalAccessOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AppPortalAccessOut> v1AuthenticationAppPortalAccessWithHttpInfo(String appId, AppPortalAccessIn appPortalAccessIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1AuthenticationAppPortalAccessValidateBeforeCall(appId, appPortalAccessIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<AppPortalAccessOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Consumer App Portal Access (asynchronously)
     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * @param appId The app&#39;s ID or UID (required)
     * @param appPortalAccessIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AuthenticationAppPortalAccessAsync(String appId, AppPortalAccessIn appPortalAccessIn, String idempotencyKey, final ApiCallback<AppPortalAccessOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AuthenticationAppPortalAccessValidateBeforeCall(appId, appPortalAccessIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<AppPortalAccessOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AuthenticationDashboardAccess
     * @param appId The app&#39;s ID or UID (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v1AuthenticationDashboardAccessCall(String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/auth/dashboard-access/{app_id}"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AuthenticationDashboardAccessValidateBeforeCall(String appId, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1AuthenticationDashboardAccess(Async)");
        }
        

        okhttp3.Call localVarCall = v1AuthenticationDashboardAccessCall(appId, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Dashboard Access
     * DEPRECATED: Please use &#x60;app-portal-access&#x60; instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * @param appId The app&#39;s ID or UID (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return DashboardAccessOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DashboardAccessOut v1AuthenticationDashboardAccess(String appId, String idempotencyKey) throws ApiException {
        ApiResponse<DashboardAccessOut> localVarResp = v1AuthenticationDashboardAccessWithHttpInfo(appId, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Dashboard Access
     * DEPRECATED: Please use &#x60;app-portal-access&#x60; instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * @param appId The app&#39;s ID or UID (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;DashboardAccessOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DashboardAccessOut> v1AuthenticationDashboardAccessWithHttpInfo(String appId, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1AuthenticationDashboardAccessValidateBeforeCall(appId, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<DashboardAccessOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Dashboard Access (asynchronously)
     * DEPRECATED: Please use &#x60;app-portal-access&#x60; instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.
     * @param appId The app&#39;s ID or UID (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v1AuthenticationDashboardAccessAsync(String appId, String idempotencyKey, final ApiCallback<DashboardAccessOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AuthenticationDashboardAccessValidateBeforeCall(appId, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<DashboardAccessOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AuthenticationExchangeOneTimeToken
     * @param oneTimeTokenIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AuthenticationExchangeOneTimeTokenCall(OneTimeTokenIn oneTimeTokenIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = oneTimeTokenIn;

        // create path and map variables
        String localVarPath = "/api/v1/auth/one-time-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AuthenticationExchangeOneTimeTokenValidateBeforeCall(OneTimeTokenIn oneTimeTokenIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'oneTimeTokenIn' is set
        if (oneTimeTokenIn == null) {
            throw new ApiException("Missing the required parameter 'oneTimeTokenIn' when calling v1AuthenticationExchangeOneTimeToken(Async)");
        }
        

        okhttp3.Call localVarCall = v1AuthenticationExchangeOneTimeTokenCall(oneTimeTokenIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Exchange One Time Token
     * This is a one time token
     * @param oneTimeTokenIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return OneTimeTokenOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public OneTimeTokenOut v1AuthenticationExchangeOneTimeToken(OneTimeTokenIn oneTimeTokenIn, String idempotencyKey) throws ApiException {
        ApiResponse<OneTimeTokenOut> localVarResp = v1AuthenticationExchangeOneTimeTokenWithHttpInfo(oneTimeTokenIn, idempotencyKey);
        return localVarResp.getData();
    }

    /**
     * Exchange One Time Token
     * This is a one time token
     * @param oneTimeTokenIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;OneTimeTokenOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OneTimeTokenOut> v1AuthenticationExchangeOneTimeTokenWithHttpInfo(OneTimeTokenIn oneTimeTokenIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1AuthenticationExchangeOneTimeTokenValidateBeforeCall(oneTimeTokenIn, idempotencyKey, null);
        Type localVarReturnType = new TypeToken<OneTimeTokenOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Exchange One Time Token (asynchronously)
     * This is a one time token
     * @param oneTimeTokenIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AuthenticationExchangeOneTimeTokenAsync(OneTimeTokenIn oneTimeTokenIn, String idempotencyKey, final ApiCallback<OneTimeTokenOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AuthenticationExchangeOneTimeTokenValidateBeforeCall(oneTimeTokenIn, idempotencyKey, _callback);
        Type localVarReturnType = new TypeToken<OneTimeTokenOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AuthenticationExpireAll
     * @param appId The app&#39;s ID or UID (required)
     * @param applicationTokenExpireIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AuthenticationExpireAllCall(String appId, ApplicationTokenExpireIn applicationTokenExpireIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = applicationTokenExpireIn;

        // create path and map variables
        String localVarPath = "/api/v1/auth/app/{app_id}/expire-all"
            .replaceAll("\\{" + "app_id" + "\\}", localVarApiClient.escapeString(appId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AuthenticationExpireAllValidateBeforeCall(String appId, ApplicationTokenExpireIn applicationTokenExpireIn, String idempotencyKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling v1AuthenticationExpireAll(Async)");
        }
        
        // verify the required parameter 'applicationTokenExpireIn' is set
        if (applicationTokenExpireIn == null) {
            throw new ApiException("Missing the required parameter 'applicationTokenExpireIn' when calling v1AuthenticationExpireAll(Async)");
        }
        

        okhttp3.Call localVarCall = v1AuthenticationExpireAllCall(appId, applicationTokenExpireIn, idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Expire All
     * Expire all of the tokens associated with a specific Application
     * @param appId The app&#39;s ID or UID (required)
     * @param applicationTokenExpireIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1AuthenticationExpireAll(String appId, ApplicationTokenExpireIn applicationTokenExpireIn, String idempotencyKey) throws ApiException {
        v1AuthenticationExpireAllWithHttpInfo(appId, applicationTokenExpireIn, idempotencyKey);
    }

    /**
     * Expire All
     * Expire all of the tokens associated with a specific Application
     * @param appId The app&#39;s ID or UID (required)
     * @param applicationTokenExpireIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1AuthenticationExpireAllWithHttpInfo(String appId, ApplicationTokenExpireIn applicationTokenExpireIn, String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1AuthenticationExpireAllValidateBeforeCall(appId, applicationTokenExpireIn, idempotencyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Expire All (asynchronously)
     * Expire all of the tokens associated with a specific Application
     * @param appId The app&#39;s ID or UID (required)
     * @param applicationTokenExpireIn  (required)
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AuthenticationExpireAllAsync(String appId, ApplicationTokenExpireIn applicationTokenExpireIn, String idempotencyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AuthenticationExpireAllValidateBeforeCall(appId, applicationTokenExpireIn, idempotencyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1AuthenticationLogout
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AuthenticationLogoutCall(String idempotencyKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/auth/logout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (idempotencyKey != null) {
            localVarHeaderParams.put("idempotency-key", localVarApiClient.parameterToString(idempotencyKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1AuthenticationLogoutValidateBeforeCall(String idempotencyKey, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = v1AuthenticationLogoutCall(idempotencyKey, _callback);
        return localVarCall;

    }

    /**
     * Logout
     * Logout an app token.  Trying to log out other tokens will fail.
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public void v1AuthenticationLogout(String idempotencyKey) throws ApiException {
        v1AuthenticationLogoutWithHttpInfo(idempotencyKey);
    }

    /**
     * Logout
     * Logout an app token.  Trying to log out other tokens will fail.
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v1AuthenticationLogoutWithHttpInfo(String idempotencyKey) throws ApiException {
        okhttp3.Call localVarCall = v1AuthenticationLogoutValidateBeforeCall(idempotencyKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Logout (asynchronously)
     * Logout an app token.  Trying to log out other tokens will fail.
     * @param idempotencyKey The request&#39;s idempotency key (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * http.response.details
     <table border="1">
       <caption>Response Deatails</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Conflict </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1AuthenticationLogoutAsync(String idempotencyKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1AuthenticationLogoutValidateBeforeCall(idempotencyKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
